
v0.6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  08010958  08010958  00020958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011130  08011130  0003027c  2**0
                  CONTENTS
  4 .ARM          00000008  08011130  08011130  00021130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011138  08011138  0003027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011138  08011138  00021138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801113c  0801113c  0002113c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  24000000  08011140  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d28  2400027c  080113bc  0003027c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001fa4  080113bc  00031fa4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003027c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000287dc  00000000  00000000  000302aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000049ee  00000000  00000000  00058a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  0005d478  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001550  00000000  00000000  0005ea20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000385a7  00000000  00000000  0005ff70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000163d5  00000000  00000000  00098517  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0015a28c  00000000  00000000  000ae8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00208b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006578  00000000  00000000  00208bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400027c 	.word	0x2400027c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801093c 	.word	0x0801093c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000280 	.word	0x24000280
 80002dc:	0801093c 	.word	0x0801093c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 f987 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800069a:	f002 f8b5 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 800069e:	4601      	mov	r1, r0
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <HAL_Init+0x60>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	f003 030f 	and.w	r3, r3, #15
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <HAL_Init+0x64>)
 80006ac:	5cd3      	ldrb	r3, [r2, r3]
 80006ae:	f003 031f 	and.w	r3, r3, #31
 80006b2:	fa21 f303 	lsr.w	r3, r1, r3
 80006b6:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <HAL_Init+0x68>)
 80006b8:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */  
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_Init+0x68>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_Init+0x60>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	490b      	ldr	r1, [pc, #44]	; (80006f4 <HAL_Init+0x64>)
 80006c8:	5ccb      	ldrb	r3, [r1, r3]
 80006ca:	f003 031f 	and.w	r3, r3, #31
 80006ce:	fa22 f303 	lsr.w	r3, r2, r3
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <HAL_Init+0x6c>)
 80006d4:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f812 	bl	8000700 <HAL_InitTick>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e002      	b.n	80006ec <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006e6:	f00c faf1 	bl	800cccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ea:	2300      	movs	r3, #0
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	58024400 	.word	0x58024400
 80006f4:	08010e30 	.word	0x08010e30
 80006f8:	2400009c 	.word	0x2400009c
 80006fc:	240000a0 	.word	0x240000a0

08000700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_InitTick+0x60>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000710:	2301      	movs	r3, #1
 8000712:	e021      	b.n	8000758 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000714:	4b13      	ldr	r3, [pc, #76]	; (8000764 <HAL_InitTick+0x64>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <HAL_InitTick+0x60>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000722:	fbb3 f3f1 	udiv	r3, r3, r1
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	4618      	mov	r0, r3
 800072c:	f000 f96f 	bl	8000a0e <HAL_SYSTICK_Config>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
 8000738:	e00e      	b.n	8000758 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d80a      	bhi.n	8000756 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000748:	f000 f939 	bl	80009be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_InitTick+0x68>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000752:	2300      	movs	r3, #0
 8000754:	e000      	b.n	8000758 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000756:	2301      	movs	r3, #1
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	24000004 	.word	0x24000004
 8000764:	2400009c 	.word	0x2400009c
 8000768:	24000000 	.word	0x24000000

0800076c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_IncTick+0x20>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x24>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4413      	add	r3, r2
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <HAL_IncTick+0x24>)
 800077e:	6013      	str	r3, [r2, #0]
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	24000004 	.word	0x24000004
 8000790:	24000298 	.word	0x24000298

08000794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  return uwTick;
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_GetTick+0x14>)
 800079a:	681b      	ldr	r3, [r3, #0]
}
 800079c:	4618      	mov	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	24000298 	.word	0x24000298

080007ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b4:	f7ff ffee 	bl	8000794 <HAL_GetTick>
 80007b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007c4:	d005      	beq.n	80007d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_Delay+0x40>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d2:	bf00      	nop
 80007d4:	f7ff ffde 	bl	8000794 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8f7      	bhi.n	80007d4 <HAL_Delay+0x28>
  {
  }
}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	24000004 	.word	0x24000004

080007f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_GetREVID+0x14>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	0c1b      	lsrs	r3, r3, #16
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	5c001000 	.word	0x5c001000

08000808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <__NVIC_SetPriorityGrouping+0x40>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 8000832:	4313      	orrs	r3, r2
 8000834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000836:	4a04      	ldr	r2, [pc, #16]	; (8000848 <__NVIC_SetPriorityGrouping+0x40>)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	60d3      	str	r3, [r2, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	05fa0000 	.word	0x05fa0000

08000850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800087a:	2b00      	cmp	r3, #0
 800087c:	db0b      	blt.n	8000896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	f003 021f 	and.w	r2, r3, #31
 8000884:	4907      	ldr	r1, [pc, #28]	; (80008a4 <__NVIC_EnableIRQ+0x38>)
 8000886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	2001      	movs	r0, #1
 800088e:	fa00 f202 	lsl.w	r2, r0, r2
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000e100 	.word	0xe000e100

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	; (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	; (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	88fb      	ldrh	r3, [r7, #6]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	; 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000974:	d301      	bcc.n	800097a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000976:	2301      	movs	r3, #1
 8000978:	e00f      	b.n	800099a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <SysTick_Config+0x40>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000982:	210f      	movs	r1, #15
 8000984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000988:	f7ff ff8e 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SysTick_Config+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <SysTick_Config+0x40>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff29 	bl	8000808 <__NVIC_SetPriorityGrouping>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff40 	bl	8000850 <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ff90 	bl	80008fc <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff5f 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff ff33 	bl	800086c <__NVIC_EnableIRQ>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffa4 	bl	8000964 <SysTick_Config>
 8000a1c:	4603      	mov	r3, r0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e1a9      	b.n	8000d98 <HAL_DMA_Start_IT+0x370>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d101      	bne.n	8000a52 <HAL_DMA_Start_IT+0x2a>
 8000a4e:	2302      	movs	r3, #2
 8000a50:	e1a2      	b.n	8000d98 <HAL_DMA_Start_IT+0x370>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2201      	movs	r2, #1
 8000a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	f040 818d 	bne.w	8000d82 <HAL_DMA_Start_IT+0x35a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2202      	movs	r2, #2
 8000a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2200      	movs	r2, #0
 8000a74:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a68      	ldr	r2, [pc, #416]	; (8000c1c <HAL_DMA_Start_IT+0x1f4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d04a      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a66      	ldr	r2, [pc, #408]	; (8000c20 <HAL_DMA_Start_IT+0x1f8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d045      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a65      	ldr	r2, [pc, #404]	; (8000c24 <HAL_DMA_Start_IT+0x1fc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d040      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a63      	ldr	r2, [pc, #396]	; (8000c28 <HAL_DMA_Start_IT+0x200>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d03b      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a62      	ldr	r2, [pc, #392]	; (8000c2c <HAL_DMA_Start_IT+0x204>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d036      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a60      	ldr	r2, [pc, #384]	; (8000c30 <HAL_DMA_Start_IT+0x208>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d031      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a5f      	ldr	r2, [pc, #380]	; (8000c34 <HAL_DMA_Start_IT+0x20c>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d02c      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <HAL_DMA_Start_IT+0x210>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d027      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a5c      	ldr	r2, [pc, #368]	; (8000c3c <HAL_DMA_Start_IT+0x214>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d022      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a5a      	ldr	r2, [pc, #360]	; (8000c40 <HAL_DMA_Start_IT+0x218>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d01d      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a59      	ldr	r2, [pc, #356]	; (8000c44 <HAL_DMA_Start_IT+0x21c>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d018      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a57      	ldr	r2, [pc, #348]	; (8000c48 <HAL_DMA_Start_IT+0x220>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d013      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a56      	ldr	r2, [pc, #344]	; (8000c4c <HAL_DMA_Start_IT+0x224>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d00e      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a54      	ldr	r2, [pc, #336]	; (8000c50 <HAL_DMA_Start_IT+0x228>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d009      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a53      	ldr	r2, [pc, #332]	; (8000c54 <HAL_DMA_Start_IT+0x22c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d004      	beq.n	8000b16 <HAL_DMA_Start_IT+0xee>
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a51      	ldr	r2, [pc, #324]	; (8000c58 <HAL_DMA_Start_IT+0x230>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d108      	bne.n	8000b28 <HAL_DMA_Start_IT+0x100>
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0201 	bic.w	r2, r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e007      	b.n	8000b38 <HAL_DMA_Start_IT+0x110>
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f022 0201 	bic.w	r2, r2, #1
 8000b36:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f000 fae4 	bl	800110c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a34      	ldr	r2, [pc, #208]	; (8000c1c <HAL_DMA_Start_IT+0x1f4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d04a      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a33      	ldr	r2, [pc, #204]	; (8000c20 <HAL_DMA_Start_IT+0x1f8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d045      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a31      	ldr	r2, [pc, #196]	; (8000c24 <HAL_DMA_Start_IT+0x1fc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d040      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a30      	ldr	r2, [pc, #192]	; (8000c28 <HAL_DMA_Start_IT+0x200>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d03b      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <HAL_DMA_Start_IT+0x204>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d036      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <HAL_DMA_Start_IT+0x208>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d031      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a2b      	ldr	r2, [pc, #172]	; (8000c34 <HAL_DMA_Start_IT+0x20c>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d02c      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	; (8000c38 <HAL_DMA_Start_IT+0x210>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d027      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <HAL_DMA_Start_IT+0x214>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d022      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a27      	ldr	r2, [pc, #156]	; (8000c40 <HAL_DMA_Start_IT+0x218>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d01d      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <HAL_DMA_Start_IT+0x21c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d018      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a24      	ldr	r2, [pc, #144]	; (8000c48 <HAL_DMA_Start_IT+0x220>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d013      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <HAL_DMA_Start_IT+0x224>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d00e      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a21      	ldr	r2, [pc, #132]	; (8000c50 <HAL_DMA_Start_IT+0x228>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d009      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	; (8000c54 <HAL_DMA_Start_IT+0x22c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d004      	beq.n	8000be4 <HAL_DMA_Start_IT+0x1bc>
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a1e      	ldr	r2, [pc, #120]	; (8000c58 <HAL_DMA_Start_IT+0x230>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d101      	bne.n	8000be8 <HAL_DMA_Start_IT+0x1c0>
 8000be4:	2301      	movs	r3, #1
 8000be6:	e000      	b.n	8000bea <HAL_DMA_Start_IT+0x1c2>
 8000be8:	2300      	movs	r3, #0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d036      	beq.n	8000c5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f023 021e 	bic.w	r2, r3, #30
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f042 0216 	orr.w	r2, r2, #22
 8000c00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d03e      	beq.n	8000c88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f042 0208 	orr.w	r2, r2, #8
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e035      	b.n	8000c88 <HAL_DMA_Start_IT+0x260>
 8000c1c:	40020010 	.word	0x40020010
 8000c20:	40020028 	.word	0x40020028
 8000c24:	40020040 	.word	0x40020040
 8000c28:	40020058 	.word	0x40020058
 8000c2c:	40020070 	.word	0x40020070
 8000c30:	40020088 	.word	0x40020088
 8000c34:	400200a0 	.word	0x400200a0
 8000c38:	400200b8 	.word	0x400200b8
 8000c3c:	40020410 	.word	0x40020410
 8000c40:	40020428 	.word	0x40020428
 8000c44:	40020440 	.word	0x40020440
 8000c48:	40020458 	.word	0x40020458
 8000c4c:	40020470 	.word	0x40020470
 8000c50:	40020488 	.word	0x40020488
 8000c54:	400204a0 	.word	0x400204a0
 8000c58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f023 020e 	bic.w	r2, r3, #14
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f042 020a 	orr.w	r2, r2, #10
 8000c6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d007      	beq.n	8000c88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0204 	orr.w	r2, r2, #4
 8000c86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Check if DMAMUX Synchronization is enabled */
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <HAL_DMA_Start_IT+0x27e>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ca4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <HAL_DMA_Start_IT+0x296>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT */
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000cb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a37      	ldr	r2, [pc, #220]	; (8000da0 <HAL_DMA_Start_IT+0x378>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d04a      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a35      	ldr	r2, [pc, #212]	; (8000da4 <HAL_DMA_Start_IT+0x37c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d045      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a34      	ldr	r2, [pc, #208]	; (8000da8 <HAL_DMA_Start_IT+0x380>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d040      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a32      	ldr	r2, [pc, #200]	; (8000dac <HAL_DMA_Start_IT+0x384>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d03b      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a31      	ldr	r2, [pc, #196]	; (8000db0 <HAL_DMA_Start_IT+0x388>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d036      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <HAL_DMA_Start_IT+0x38c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d031      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a2e      	ldr	r2, [pc, #184]	; (8000db8 <HAL_DMA_Start_IT+0x390>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d02c      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a2c      	ldr	r2, [pc, #176]	; (8000dbc <HAL_DMA_Start_IT+0x394>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d027      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a2b      	ldr	r2, [pc, #172]	; (8000dc0 <HAL_DMA_Start_IT+0x398>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d022      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <HAL_DMA_Start_IT+0x39c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d01d      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <HAL_DMA_Start_IT+0x3a0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d018      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a26      	ldr	r2, [pc, #152]	; (8000dcc <HAL_DMA_Start_IT+0x3a4>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d013      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a25      	ldr	r2, [pc, #148]	; (8000dd0 <HAL_DMA_Start_IT+0x3a8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d00e      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <HAL_DMA_Start_IT+0x3ac>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d009      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a22      	ldr	r2, [pc, #136]	; (8000dd8 <HAL_DMA_Start_IT+0x3b0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d004      	beq.n	8000d5e <HAL_DMA_Start_IT+0x336>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <HAL_DMA_Start_IT+0x3b4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d108      	bne.n	8000d70 <HAL_DMA_Start_IT+0x348>
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 0201 	orr.w	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e012      	b.n	8000d96 <HAL_DMA_Start_IT+0x36e>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 0201 	orr.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	e009      	b.n	8000d96 <HAL_DMA_Start_IT+0x36e>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40020010 	.word	0x40020010
 8000da4:	40020028 	.word	0x40020028
 8000da8:	40020040 	.word	0x40020040
 8000dac:	40020058 	.word	0x40020058
 8000db0:	40020070 	.word	0x40020070
 8000db4:	40020088 	.word	0x40020088
 8000db8:	400200a0 	.word	0x400200a0
 8000dbc:	400200b8 	.word	0x400200b8
 8000dc0:	40020410 	.word	0x40020410
 8000dc4:	40020428 	.word	0x40020428
 8000dc8:	40020440 	.word	0x40020440
 8000dcc:	40020458 	.word	0x40020458
 8000dd0:	40020470 	.word	0x40020470
 8000dd4:	40020488 	.word	0x40020488
 8000dd8:	400204a0 	.word	0x400204a0
 8000ddc:	400204b8 	.word	0x400204b8

08000de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e188      	b.n	8001104 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d004      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e17d      	b.n	8001104 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a8c      	ldr	r2, [pc, #560]	; (8001040 <HAL_DMA_Abort_IT+0x260>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d04a      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a8b      	ldr	r2, [pc, #556]	; (8001044 <HAL_DMA_Abort_IT+0x264>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d045      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a89      	ldr	r2, [pc, #548]	; (8001048 <HAL_DMA_Abort_IT+0x268>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d040      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a88      	ldr	r2, [pc, #544]	; (800104c <HAL_DMA_Abort_IT+0x26c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d03b      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a86      	ldr	r2, [pc, #536]	; (8001050 <HAL_DMA_Abort_IT+0x270>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d036      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a85      	ldr	r2, [pc, #532]	; (8001054 <HAL_DMA_Abort_IT+0x274>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d031      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a83      	ldr	r2, [pc, #524]	; (8001058 <HAL_DMA_Abort_IT+0x278>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d02c      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a82      	ldr	r2, [pc, #520]	; (800105c <HAL_DMA_Abort_IT+0x27c>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d027      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a80      	ldr	r2, [pc, #512]	; (8001060 <HAL_DMA_Abort_IT+0x280>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d022      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7f      	ldr	r2, [pc, #508]	; (8001064 <HAL_DMA_Abort_IT+0x284>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d01d      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a7d      	ldr	r2, [pc, #500]	; (8001068 <HAL_DMA_Abort_IT+0x288>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d018      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a7c      	ldr	r2, [pc, #496]	; (800106c <HAL_DMA_Abort_IT+0x28c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a7a      	ldr	r2, [pc, #488]	; (8001070 <HAL_DMA_Abort_IT+0x290>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00e      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a79      	ldr	r2, [pc, #484]	; (8001074 <HAL_DMA_Abort_IT+0x294>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d009      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a77      	ldr	r2, [pc, #476]	; (8001078 <HAL_DMA_Abort_IT+0x298>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d004      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a76      	ldr	r2, [pc, #472]	; (800107c <HAL_DMA_Abort_IT+0x29c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d101      	bne.n	8000eac <HAL_DMA_Abort_IT+0xcc>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <HAL_DMA_Abort_IT+0xce>
 8000eac:	2300      	movs	r3, #0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d065      	beq.n	8000f7e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a60      	ldr	r2, [pc, #384]	; (8001040 <HAL_DMA_Abort_IT+0x260>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d04a      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a5e      	ldr	r2, [pc, #376]	; (8001044 <HAL_DMA_Abort_IT+0x264>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d045      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a5d      	ldr	r2, [pc, #372]	; (8001048 <HAL_DMA_Abort_IT+0x268>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d040      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a5b      	ldr	r2, [pc, #364]	; (800104c <HAL_DMA_Abort_IT+0x26c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d03b      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a5a      	ldr	r2, [pc, #360]	; (8001050 <HAL_DMA_Abort_IT+0x270>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d036      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a58      	ldr	r2, [pc, #352]	; (8001054 <HAL_DMA_Abort_IT+0x274>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d031      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a57      	ldr	r2, [pc, #348]	; (8001058 <HAL_DMA_Abort_IT+0x278>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d02c      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a55      	ldr	r2, [pc, #340]	; (800105c <HAL_DMA_Abort_IT+0x27c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d027      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a54      	ldr	r2, [pc, #336]	; (8001060 <HAL_DMA_Abort_IT+0x280>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d022      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a52      	ldr	r2, [pc, #328]	; (8001064 <HAL_DMA_Abort_IT+0x284>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01d      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a51      	ldr	r2, [pc, #324]	; (8001068 <HAL_DMA_Abort_IT+0x288>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d018      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a4f      	ldr	r2, [pc, #316]	; (800106c <HAL_DMA_Abort_IT+0x28c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a4e      	ldr	r2, [pc, #312]	; (8001070 <HAL_DMA_Abort_IT+0x290>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d00e      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	; (8001074 <HAL_DMA_Abort_IT+0x294>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d009      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a4b      	ldr	r2, [pc, #300]	; (8001078 <HAL_DMA_Abort_IT+0x298>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d004      	beq.n	8000f5a <HAL_DMA_Abort_IT+0x17a>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a49      	ldr	r2, [pc, #292]	; (800107c <HAL_DMA_Abort_IT+0x29c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d108      	bne.n	8000f6c <HAL_DMA_Abort_IT+0x18c>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0201 	bic.w	r2, r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e0ca      	b.n	8001102 <HAL_DMA_Abort_IT+0x322>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	e0c1      	b.n	8001102 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 020e 	bic.w	r2, r2, #14
 8000f8c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a2b      	ldr	r2, [pc, #172]	; (8001040 <HAL_DMA_Abort_IT+0x260>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d04a      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a29      	ldr	r2, [pc, #164]	; (8001044 <HAL_DMA_Abort_IT+0x264>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d045      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a28      	ldr	r2, [pc, #160]	; (8001048 <HAL_DMA_Abort_IT+0x268>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d040      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a26      	ldr	r2, [pc, #152]	; (800104c <HAL_DMA_Abort_IT+0x26c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d03b      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a25      	ldr	r2, [pc, #148]	; (8001050 <HAL_DMA_Abort_IT+0x270>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d036      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a23      	ldr	r2, [pc, #140]	; (8001054 <HAL_DMA_Abort_IT+0x274>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d031      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a22      	ldr	r2, [pc, #136]	; (8001058 <HAL_DMA_Abort_IT+0x278>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d02c      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a20      	ldr	r2, [pc, #128]	; (800105c <HAL_DMA_Abort_IT+0x27c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d027      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a1f      	ldr	r2, [pc, #124]	; (8001060 <HAL_DMA_Abort_IT+0x280>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d022      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_DMA_Abort_IT+0x284>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01d      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <HAL_DMA_Abort_IT+0x288>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d018      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_DMA_Abort_IT+0x28c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a19      	ldr	r2, [pc, #100]	; (8001070 <HAL_DMA_Abort_IT+0x290>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d00e      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_DMA_Abort_IT+0x294>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d009      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a16      	ldr	r2, [pc, #88]	; (8001078 <HAL_DMA_Abort_IT+0x298>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d004      	beq.n	800102e <HAL_DMA_Abort_IT+0x24e>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <HAL_DMA_Abort_IT+0x29c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d128      	bne.n	8001080 <HAL_DMA_Abort_IT+0x2a0>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e027      	b.n	8001090 <HAL_DMA_Abort_IT+0x2b0>
 8001040:	40020010 	.word	0x40020010
 8001044:	40020028 	.word	0x40020028
 8001048:	40020040 	.word	0x40020040
 800104c:	40020058 	.word	0x40020058
 8001050:	40020070 	.word	0x40020070
 8001054:	40020088 	.word	0x40020088
 8001058:	400200a0 	.word	0x400200a0
 800105c:	400200b8 	.word	0x400200b8
 8001060:	40020410 	.word	0x40020410
 8001064:	40020428 	.word	0x40020428
 8001068:	40020440 	.word	0x40020440
 800106c:	40020458 	.word	0x40020458
 8001070:	40020470 	.word	0x40020470
 8001074:	40020488 	.word	0x40020488
 8001078:	400204a0 	.word	0x400204a0
 800107c:	400204b8 	.word	0x400204b8
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0201 	bic.w	r2, r2, #1
 800108e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800109e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	2201      	movs	r2, #1
 80010b0:	409a      	lsls	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80010be:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00c      	beq.n	80010e2 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d6:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80010e0:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001124:	613b      	str	r3, [r7, #16]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800112e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <DMA_SetConfig+0x36>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001140:	605a      	str	r2, [r3, #4]
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a68      	ldr	r2, [pc, #416]	; (80012e8 <DMA_SetConfig+0x1dc>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d04a      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a66      	ldr	r2, [pc, #408]	; (80012ec <DMA_SetConfig+0x1e0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d045      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a65      	ldr	r2, [pc, #404]	; (80012f0 <DMA_SetConfig+0x1e4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d040      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a63      	ldr	r2, [pc, #396]	; (80012f4 <DMA_SetConfig+0x1e8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d03b      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a62      	ldr	r2, [pc, #392]	; (80012f8 <DMA_SetConfig+0x1ec>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d036      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a60      	ldr	r2, [pc, #384]	; (80012fc <DMA_SetConfig+0x1f0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d031      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a5f      	ldr	r2, [pc, #380]	; (8001300 <DMA_SetConfig+0x1f4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d02c      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a5d      	ldr	r2, [pc, #372]	; (8001304 <DMA_SetConfig+0x1f8>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d027      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a5c      	ldr	r2, [pc, #368]	; (8001308 <DMA_SetConfig+0x1fc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d022      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a5a      	ldr	r2, [pc, #360]	; (800130c <DMA_SetConfig+0x200>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d01d      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a59      	ldr	r2, [pc, #356]	; (8001310 <DMA_SetConfig+0x204>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d018      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a57      	ldr	r2, [pc, #348]	; (8001314 <DMA_SetConfig+0x208>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a56      	ldr	r2, [pc, #344]	; (8001318 <DMA_SetConfig+0x20c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d00e      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a54      	ldr	r2, [pc, #336]	; (800131c <DMA_SetConfig+0x210>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d009      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a53      	ldr	r2, [pc, #332]	; (8001320 <DMA_SetConfig+0x214>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d004      	beq.n	80011e2 <DMA_SetConfig+0xd6>
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <DMA_SetConfig+0x218>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <DMA_SetConfig+0xda>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <DMA_SetConfig+0xdc>
 80011e6:	2300      	movs	r3, #0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d029      	beq.n	8001240 <DMA_SetConfig+0x134>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f0:	f003 031f 	and.w	r3, r3, #31
 80011f4:	223f      	movs	r2, #63	; 0x3f
 80011f6:	409a      	lsls	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800120a:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b40      	cmp	r3, #64	; 0x40
 800121a:	d108      	bne.n	800122e <DMA_SetConfig+0x122>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68ba      	ldr	r2, [r7, #8]
 800122a:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800122c:	e056      	b.n	80012dc <DMA_SetConfig+0x1d0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	60da      	str	r2, [r3, #12]
}
 800123e:	e04d      	b.n	80012dc <DMA_SetConfig+0x1d0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a38      	ldr	r2, [pc, #224]	; (8001328 <DMA_SetConfig+0x21c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d022      	beq.n	8001290 <DMA_SetConfig+0x184>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a37      	ldr	r2, [pc, #220]	; (800132c <DMA_SetConfig+0x220>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d01d      	beq.n	8001290 <DMA_SetConfig+0x184>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a35      	ldr	r2, [pc, #212]	; (8001330 <DMA_SetConfig+0x224>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d018      	beq.n	8001290 <DMA_SetConfig+0x184>
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a34      	ldr	r2, [pc, #208]	; (8001334 <DMA_SetConfig+0x228>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d013      	beq.n	8001290 <DMA_SetConfig+0x184>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a32      	ldr	r2, [pc, #200]	; (8001338 <DMA_SetConfig+0x22c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00e      	beq.n	8001290 <DMA_SetConfig+0x184>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a31      	ldr	r2, [pc, #196]	; (800133c <DMA_SetConfig+0x230>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d009      	beq.n	8001290 <DMA_SetConfig+0x184>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a2f      	ldr	r2, [pc, #188]	; (8001340 <DMA_SetConfig+0x234>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d004      	beq.n	8001290 <DMA_SetConfig+0x184>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <DMA_SetConfig+0x238>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d101      	bne.n	8001294 <DMA_SetConfig+0x188>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <DMA_SetConfig+0x18a>
 8001294:	2300      	movs	r3, #0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d020      	beq.n	80012dc <DMA_SetConfig+0x1d0>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129e:	f003 031f 	and.w	r3, r3, #31
 80012a2:	2201      	movs	r2, #1
 80012a4:	409a      	lsls	r2, r3
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	683a      	ldr	r2, [r7, #0]
 80012b0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b40      	cmp	r3, #64	; 0x40
 80012b8:	d108      	bne.n	80012cc <DMA_SetConfig+0x1c0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	60da      	str	r2, [r3, #12]
}
 80012ca:	e007      	b.n	80012dc <DMA_SetConfig+0x1d0>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	60da      	str	r2, [r3, #12]
}
 80012dc:	bf00      	nop
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40020010 	.word	0x40020010
 80012ec:	40020028 	.word	0x40020028
 80012f0:	40020040 	.word	0x40020040
 80012f4:	40020058 	.word	0x40020058
 80012f8:	40020070 	.word	0x40020070
 80012fc:	40020088 	.word	0x40020088
 8001300:	400200a0 	.word	0x400200a0
 8001304:	400200b8 	.word	0x400200b8
 8001308:	40020410 	.word	0x40020410
 800130c:	40020428 	.word	0x40020428
 8001310:	40020440 	.word	0x40020440
 8001314:	40020458 	.word	0x40020458
 8001318:	40020470 	.word	0x40020470
 800131c:	40020488 	.word	0x40020488
 8001320:	400204a0 	.word	0x400204a0
 8001324:	400204b8 	.word	0x400204b8
 8001328:	58025408 	.word	0x58025408
 800132c:	5802541c 	.word	0x5802541c
 8001330:	58025430 	.word	0x58025430
 8001334:	58025444 	.word	0x58025444
 8001338:	58025458 	.word	0x58025458
 800133c:	5802546c 	.word	0x5802546c
 8001340:	58025480 	.word	0x58025480
 8001344:	58025494 	.word	0x58025494

08001348 <HAL_FLASH_Program>:
  * @param  DataAddress specifies the address of data (256 bits) to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800135c:	2308      	movs	r3, #8
 800135e:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <HAL_FLASH_Program+0xfc>)
 8001362:	7d1b      	ldrb	r3, [r3, #20]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_FLASH_Program+0x24>
 8001368:	2302      	movs	r3, #2
 800136a:	e067      	b.n	800143c <HAL_FLASH_Program+0xf4>
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <HAL_FLASH_Program+0xfc>)
 800136e:	2201      	movs	r2, #1
 8001370:	751a      	strb	r2, [r3, #20]

  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001378:	d306      	bcc.n	8001388 <HAL_FLASH_Program+0x40>
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001380:	d202      	bcs.n	8001388 <HAL_FLASH_Program+0x40>
  {
    bank = FLASH_BANK_1;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	e001      	b.n	800138c <HAL_FLASH_Program+0x44>
  }
  else
  {
    bank = FLASH_BANK_2;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <HAL_FLASH_Program+0xfc>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001392:	69b9      	ldr	r1, [r7, #24]
 8001394:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001398:	f000 f8bc 	bl	8001514 <FLASH_WaitForLastOperation>
 800139c:	4603      	mov	r3, r0
 800139e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 80013a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d143      	bne.n	8001432 <HAL_FLASH_Program+0xea>
  {
    if(bank == FLASH_BANK_1)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d106      	bne.n	80013be <HAL_FLASH_Program+0x76>
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR1, FLASH_CR_PG);
 80013b0:	4b25      	ldr	r3, [pc, #148]	; (8001448 <HAL_FLASH_Program+0x100>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4a24      	ldr	r2, [pc, #144]	; (8001448 <HAL_FLASH_Program+0x100>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	60d3      	str	r3, [r2, #12]
 80013bc:	e007      	b.n	80013ce <HAL_FLASH_Program+0x86>
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_FLASH_Program+0x100>)
 80013c0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80013c4:	4a20      	ldr	r2, [pc, #128]	; (8001448 <HAL_FLASH_Program+0x100>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80013ce:	f3bf 8f6f 	isb	sy
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013d2:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Program the 256 bits flash word */
    do
    {
      *dest_addr = *src_addr;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	601a      	str	r2, [r3, #0]
      dest_addr++;
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	3304      	adds	r3, #4
 80013e2:	623b      	str	r3, [r7, #32]
      src_addr++;
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3304      	adds	r3, #4
 80013e8:	61fb      	str	r3, [r7, #28]
      row_index--;
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	75fb      	strb	r3, [r7, #23]
    } while (row_index != 0U);
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1ef      	bne.n	80013d6 <HAL_FLASH_Program+0x8e>
  __ASM volatile ("isb 0xF":::"memory");
 80013f6:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 80013fa:	f3bf 8f4f 	dsb	sy

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001404:	f000 f886 	bl	8001514 <FLASH_WaitForLastOperation>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if(bank == FLASH_BANK_1)
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d106      	bne.n	8001422 <HAL_FLASH_Program+0xda>
    {
      /* If the program operation is completed, disable the PG*/
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_FLASH_Program+0x100>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_FLASH_Program+0x100>)
 800141a:	f023 0302 	bic.w	r3, r3, #2
 800141e:	60d3      	str	r3, [r2, #12]
 8001420:	e007      	b.n	8001432 <HAL_FLASH_Program+0xea>
    }
    else
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_FLASH_Program+0x100>)
 8001424:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_FLASH_Program+0x100>)
 800142a:	f023 0302 	bic.w	r3, r3, #2
 800142e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_FLASH_Program+0xfc>)
 8001434:	2200      	movs	r2, #0
 8001436:	751a      	strb	r2, [r3, #20]

  return status;
 8001438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800143c:	4618      	mov	r0, r3
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	240007e0 	.word	0x240007e0
 8001448:	52002000 	.word	0x52002000

0800144c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_FLASH_Unlock+0x68>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00d      	beq.n	8001478 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <HAL_FLASH_Unlock+0x68>)
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <HAL_FLASH_Unlock+0x6c>)
 8001460:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8001462:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_FLASH_Unlock+0x68>)
 8001464:	4a15      	ldr	r2, [pc, #84]	; (80014bc <HAL_FLASH_Unlock+0x70>)
 8001466:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_FLASH_Unlock+0x68>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e018      	b.n	80014aa <HAL_FLASH_Unlock+0x5e>
    }
  }

  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8001478:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <HAL_FLASH_Unlock+0x68>)
 800147a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d010      	beq.n	80014a8 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_FLASH_Unlock+0x68>)
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <HAL_FLASH_Unlock+0x6c>)
 800148a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_FLASH_Unlock+0x68>)
 8001490:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <HAL_FLASH_Unlock+0x70>)
 8001492:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <HAL_FLASH_Unlock+0x68>)
 8001498:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <HAL_FLASH_Unlock+0x5e>
    }
  }

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	52002000 	.word	0x52002000
 80014b8:	45670123 	.word	0x45670123
 80014bc:	cdef89ab 	.word	0xcdef89ab

080014c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_FLASH_Lock+0x50>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a11      	ldr	r2, [pc, #68]	; (8001510 <HAL_FLASH_Lock+0x50>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_FLASH_Lock+0x50>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e011      	b.n	8001504 <HAL_FLASH_Lock+0x44>
  }

  /* Set the LOCK Bit to lock the FLASH Bank2 Control Register access */
  SET_BIT(FLASH->CR2, FLASH_CR_LOCK);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_FLASH_Lock+0x50>)
 80014e2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_FLASH_Lock+0x50>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

  /* Verify Flash Bank2 is locked */
  if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) == 0U)
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_FLASH_Lock+0x50>)
 80014f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_FLASH_Lock+0x42>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_FLASH_Lock+0x44>
  }

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	52002000 	.word	0x52002000

08001514 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag, errorflag;
  uint32_t tickstart = HAL_GetTick();
 800151e:	f7ff f939 	bl	8000794 <HAL_GetTick>
 8001522:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

  /* Select bsyflag depending on Bank */
  if(Bank == FLASH_BANK_1)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <FLASH_WaitForLastOperation+0x1c>
  {
    bsyflag = FLASH_FLAG_QW_BANK1;
 800152a:	2304      	movs	r3, #4
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e013      	b.n	8001558 <FLASH_WaitForLastOperation+0x44>
  }
  else
  {
    bsyflag = FLASH_FLAG_QW_BANK2;
 8001530:	4b41      	ldr	r3, [pc, #260]	; (8001638 <FLASH_WaitForLastOperation+0x124>)
 8001532:	617b      	str	r3, [r7, #20]
  }

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001534:	e010      	b.n	8001558 <FLASH_WaitForLastOperation+0x44>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800153c:	d00c      	beq.n	8001558 <FLASH_WaitForLastOperation+0x44>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800153e:	f7ff f929 	bl	8000794 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	d302      	bcc.n	8001554 <FLASH_WaitForLastOperation+0x40>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <FLASH_WaitForLastOperation+0x44>
      {
        return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e06a      	b.n	800162e <FLASH_WaitForLastOperation+0x11a>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	4b38      	ldr	r3, [pc, #224]	; (800163c <FLASH_WaitForLastOperation+0x128>)
 800155c:	4013      	ands	r3, r2
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	d10a      	bne.n	800157a <FLASH_WaitForLastOperation+0x66>
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 8001566:	691a      	ldr	r2, [r3, #16]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	4013      	ands	r3, r2
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	429a      	cmp	r2, r3
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	e00c      	b.n	8001594 <FLASH_WaitForLastOperation+0x80>
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 800157c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001580:	43da      	mvns	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	4013      	ands	r3, r2
 8001586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ce      	bne.n	8001536 <FLASH_WaitForLastOperation+0x22>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <FLASH_WaitForLastOperation+0x96>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800159e:	4b28      	ldr	r3, [pc, #160]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <FLASH_WaitForLastOperation+0x130>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	e007      	b.n	80015ba <FLASH_WaitForLastOperation+0xa6>
  }
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 80015aa:	4b25      	ldr	r3, [pc, #148]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 80015ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <FLASH_WaitForLastOperation+0x130>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015b8:	613b      	str	r3, [r7, #16]
  }

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d017      	beq.n	80015f4 <FLASH_WaitForLastOperation+0xe0>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <FLASH_WaitForLastOperation+0x134>)
 80015c6:	699a      	ldr	r2, [r3, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <FLASH_WaitForLastOperation+0x134>)
 80015ce:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <FLASH_WaitForLastOperation+0x128>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d103      	bne.n	80015e4 <FLASH_WaitForLastOperation+0xd0>
 80015dc:	4a18      	ldr	r2, [pc, #96]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	6153      	str	r3, [r2, #20]
 80015e2:	e005      	b.n	80015f0 <FLASH_WaitForLastOperation+0xdc>
 80015e4:	4a16      	ldr	r2, [pc, #88]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015ec:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e01c      	b.n	800162e <FLASH_WaitForLastOperation+0x11a>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10b      	bne.n	8001612 <FLASH_WaitForLastOperation+0xfe>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001606:	d111      	bne.n	800162c <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8001608:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 800160a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	e00c      	b.n	800162c <FLASH_WaitForLastOperation+0x118>
    }
  }
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 8001614:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001620:	d104      	bne.n	800162c <FLASH_WaitForLastOperation+0x118>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8001622:	4b07      	ldr	r3, [pc, #28]	; (8001640 <FLASH_WaitForLastOperation+0x12c>)
 8001624:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001628:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	80000004 	.word	0x80000004
 800163c:	1fef000f 	.word	0x1fef000f
 8001640:	52002000 	.word	0x52002000
 8001644:	17ee0000 	.word	0x17ee0000
 8001648:	240007e0 	.word	0x240007e0

0800164c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800165a:	4b5e      	ldr	r3, [pc, #376]	; (80017d4 <HAL_FLASHEx_Erase+0x188>)
 800165c:	7d1b      	ldrb	r3, [r3, #20]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_FLASHEx_Erase+0x1a>
 8001662:	2302      	movs	r3, #2
 8001664:	e0b2      	b.n	80017cc <HAL_FLASHEx_Erase+0x180>
 8001666:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <HAL_FLASHEx_Erase+0x188>)
 8001668:	2201      	movs	r2, #1
 800166a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800166c:	4b59      	ldr	r3, [pc, #356]	; (80017d4 <HAL_FLASHEx_Erase+0x188>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800167e:	2101      	movs	r1, #1
 8001680:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001684:	f7ff ff46 	bl	8001514 <FLASH_WaitForLastOperation>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800169e:	2102      	movs	r1, #2
 80016a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016a4:	f7ff ff36 	bl	8001514 <FLASH_WaitForLastOperation>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  if(status == HAL_OK)
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f040 8085 	bne.w	80017c4 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d136      	bne.n	8001730 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f000 f887 	bl	80017e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00f      	beq.n	80016fe <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 80016de:	2101      	movs	r1, #1
 80016e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016e4:	f7ff ff16 	bl	8001514 <FLASH_WaitForLastOperation>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 80016f2:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	4a38      	ldr	r2, [pc, #224]	; (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 80016f8:	f023 0308 	bic.w	r3, r3, #8
 80016fc:	60d3      	str	r3, [r2, #12]
      }
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d05c      	beq.n	80017c4 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800170a:	2102      	movs	r1, #2
 800170c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001710:	f7ff ff00 	bl	8001514 <FLASH_WaitForLastOperation>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001720:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001724:	4a2c      	ldr	r2, [pc, #176]	; (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001726:	f023 0308 	bic.w	r3, r3, #8
 800172a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800172e:	e049      	b.n	80017c4 <HAL_FLASHEx_Erase+0x178>
      }
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001736:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	e039      	b.n	80017b4 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	461a      	mov	r2, r3
 800174a:	68b8      	ldr	r0, [r7, #8]
 800174c:	f000 f8b6 	bl	80018bc <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00c      	beq.n	8001776 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800175c:	2101      	movs	r1, #1
 800175e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001762:	f7ff fed7 	bl	8001514 <FLASH_WaitForLastOperation>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	491a      	ldr	r1, [pc, #104]	; (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001770:	4b1a      	ldr	r3, [pc, #104]	; (80017dc <HAL_FLASHEx_Erase+0x190>)
 8001772:	4013      	ands	r3, r2
 8001774:	60cb      	str	r3, [r1, #12]
        }
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00e      	beq.n	80017a0 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8001782:	2102      	movs	r1, #2
 8001784:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001788:	f7ff fec4 	bl	8001514 <FLASH_WaitForLastOperation>
 800178c:	4603      	mov	r3, r0
 800178e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001792:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001796:	4910      	ldr	r1, [pc, #64]	; (80017d8 <HAL_FLASHEx_Erase+0x18c>)
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_FLASHEx_Erase+0x190>)
 800179a:	4013      	ands	r3, r2
 800179c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }

        if(status != HAL_OK)
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68ba      	ldr	r2, [r7, #8]
 80017aa:	601a      	str	r2, [r3, #0]
          break;
 80017ac:	e00a      	b.n	80017c4 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68da      	ldr	r2, [r3, #12]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4413      	add	r3, r2
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3bd      	bcc.n	8001740 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_FLASHEx_Erase+0x188>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	751a      	strb	r2, [r3, #20]

  return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3710      	adds	r7, #16
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	240007e0 	.word	0x240007e0
 80017d8:	52002000 	.word	0x52002000
 80017dc:	fffff8fb 	.word	0xfffff8fb

080017e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d122      	bne.n	800183a <FLASH_MassErase+0x5a>
  {
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80017f4:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <FLASH_MassErase+0xd8>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <FLASH_MassErase+0xd8>)
 80017fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017fe:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8001800:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001802:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001806:	4a2c      	ldr	r2, [pc, #176]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001808:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800180c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 8001810:	4b29      	ldr	r3, [pc, #164]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4928      	ldr	r1, [pc, #160]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800181c:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <FLASH_MassErase+0xd8>)
 800181e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001822:	4925      	ldr	r1, [pc, #148]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4313      	orrs	r3, r2
 8001828:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <FLASH_MassErase+0xd8>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001832:	f043 0310 	orr.w	r3, r3, #16
 8001836:	6193      	str	r3, [r2, #24]
      /* Bank2 will be erased, and set voltage range */
      FLASH->CR2 |= FLASH_CR_BER | VoltageRange;
      FLASH->CR2 |= FLASH_CR_START;
    }
  }
}
 8001838:	e037      	b.n	80018aa <FLASH_MassErase+0xca>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d013      	beq.n	800186c <FLASH_MassErase+0x8c>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8001844:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a1b      	ldr	r2, [pc, #108]	; (80018b8 <FLASH_MassErase+0xd8>)
 800184a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800184e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |= FLASH_CR_BER | VoltageRange;
 8001850:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4313      	orrs	r3, r2
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <FLASH_MassErase+0xd8>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |= FLASH_CR_START;
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186a:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d019      	beq.n	80018aa <FLASH_MassErase+0xca>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001878:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800187c:	4a0e      	ldr	r2, [pc, #56]	; (80018b8 <FLASH_MassErase+0xd8>)
 800187e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001882:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= FLASH_CR_BER | VoltageRange;
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001888:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4313      	orrs	r3, r2
 8001890:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <FLASH_MassErase+0xd8>)
 8001892:	f043 0308 	orr.w	r3, r3, #8
 8001896:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= FLASH_CR_START;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <FLASH_MassErase+0xd8>)
 800189c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <FLASH_MassErase+0xd8>)
 80018a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a6:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	52002000 	.word	0x52002000

080018bc <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d016      	beq.n	8001900 <FLASH_Erase_Sector+0x44>
  {
    /* reset Program/erase VoltageRange for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <FLASH_Erase_Sector+0x94>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	4a1e      	ldr	r2, [pc, #120]	; (8001950 <FLASH_Erase_Sector+0x94>)
 80018d8:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80018dc:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos));
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <FLASH_Erase_Sector+0x94>)
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	0219      	lsls	r1, r3, #8
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	4313      	orrs	r3, r2
 80018ec:	4a18      	ldr	r2, [pc, #96]	; (8001950 <FLASH_Erase_Sector+0x94>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= FLASH_CR_START;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <FLASH_Erase_Sector+0x94>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4a15      	ldr	r2, [pc, #84]	; (8001950 <FLASH_Erase_Sector+0x94>)
 80018fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fe:	60d3      	str	r3, [r2, #12]
  }

  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d01c      	beq.n	8001944 <FLASH_Erase_Sector+0x88>
  {
    /* reset Program/erase VoltageRange for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <FLASH_Erase_Sector+0x94>)
 800190c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <FLASH_Erase_Sector+0x94>)
 8001912:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8001916:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos));
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <FLASH_Erase_Sector+0x94>)
 800191c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	0219      	lsls	r1, r3, #8
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	430b      	orrs	r3, r1
 8001928:	4313      	orrs	r3, r2
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <FLASH_Erase_Sector+0x94>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= FLASH_CR_START;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <FLASH_Erase_Sector+0x94>)
 8001936:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <FLASH_Erase_Sector+0x94>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001940:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  }
}
 8001944:	bf00      	nop
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	52002000 	.word	0x52002000

08001954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001962:	4b89      	ldr	r3, [pc, #548]	; (8001b88 <HAL_GPIO_Init+0x234>)
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001966:	e194      	b.n	8001c92 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8186 	beq.w	8001c8c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x3c>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b12      	cmp	r3, #18
 800198e:	d123      	bne.n	80019d8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	08da      	lsrs	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3208      	adds	r2, #8
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	691a      	ldr	r2, [r3, #16]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0203 	and.w	r2, r3, #3
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d00b      	beq.n	8001a2c <HAL_GPIO_Init+0xd8>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d007      	beq.n	8001a2c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a20:	2b11      	cmp	r3, #17
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b12      	cmp	r3, #18
 8001a2a:	d130      	bne.n	8001a8e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a62:	2201      	movs	r2, #1
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	f003 0201 	and.w	r2, r3, #1
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80e0 	beq.w	8001c8c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_GPIO_Init+0x238>)
 8001ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ad2:	4a2e      	ldr	r2, [pc, #184]	; (8001b8c <HAL_GPIO_Init+0x238>)
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_GPIO_Init+0x238>)
 8001ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aea:	4a29      	ldr	r2, [pc, #164]	; (8001b90 <HAL_GPIO_Init+0x23c>)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	089b      	lsrs	r3, r3, #2
 8001af0:	3302      	adds	r3, #2
 8001af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <HAL_GPIO_Init+0x240>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d052      	beq.n	8001bbc <HAL_GPIO_Init+0x268>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <HAL_GPIO_Init+0x244>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d031      	beq.n	8001b82 <HAL_GPIO_Init+0x22e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a1e      	ldr	r2, [pc, #120]	; (8001b9c <HAL_GPIO_Init+0x248>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d02b      	beq.n	8001b7e <HAL_GPIO_Init+0x22a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_GPIO_Init+0x24c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d025      	beq.n	8001b7a <HAL_GPIO_Init+0x226>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a1c      	ldr	r2, [pc, #112]	; (8001ba4 <HAL_GPIO_Init+0x250>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d01f      	beq.n	8001b76 <HAL_GPIO_Init+0x222>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_GPIO_Init+0x254>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x21e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <HAL_GPIO_Init+0x258>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x21a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a19      	ldr	r2, [pc, #100]	; (8001bb0 <HAL_GPIO_Init+0x25c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x216>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_GPIO_Init+0x260>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x212>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <HAL_GPIO_Init+0x264>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x20e>
 8001b5e:	2309      	movs	r3, #9
 8001b60:	e02d      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b62:	230a      	movs	r3, #10
 8001b64:	e02b      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b66:	2308      	movs	r3, #8
 8001b68:	e029      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b6a:	2307      	movs	r3, #7
 8001b6c:	e027      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b6e:	2306      	movs	r3, #6
 8001b70:	e025      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b72:	2305      	movs	r3, #5
 8001b74:	e023      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b76:	2304      	movs	r3, #4
 8001b78:	e021      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e01f      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e01d      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e01b      	b.n	8001bbe <HAL_GPIO_Init+0x26a>
 8001b86:	bf00      	nop
 8001b88:	58000080 	.word	0x58000080
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	58000400 	.word	0x58000400
 8001b94:	58020000 	.word	0x58020000
 8001b98:	58020400 	.word	0x58020400
 8001b9c:	58020800 	.word	0x58020800
 8001ba0:	58020c00 	.word	0x58020c00
 8001ba4:	58021000 	.word	0x58021000
 8001ba8:	58021400 	.word	0x58021400
 8001bac:	58021800 	.word	0x58021800
 8001bb0:	58021c00 	.word	0x58021c00
 8001bb4:	58022000 	.word	0x58022000
 8001bb8:	58022400 	.word	0x58022400
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	0092      	lsls	r2, r2, #2
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bce:	4938      	ldr	r1, [pc, #224]	; (8001cb0 <HAL_GPIO_Init+0x35c>)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47f ae63 	bne.w	8001968 <HAL_GPIO_Init+0x14>
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	58000400 	.word	0x58000400

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cd0:	e003      	b.n	8001cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	619a      	str	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <HAL_PWREx_ConfigSupply+0x6c>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d008      	beq.n	8001d0e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_PWREx_ConfigSupply+0x6c>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d001      	beq.n	8001d0e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e01d      	b.n	8001d4a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <HAL_PWREx_ConfigSupply+0x6c>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f023 0207 	bic.w	r2, r3, #7
 8001d16:	490f      	ldr	r1, [pc, #60]	; (8001d54 <HAL_PWREx_ConfigSupply+0x6c>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d1e:	f7fe fd39 	bl	8000794 <HAL_GetTick>
 8001d22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001d24:	e009      	b.n	8001d3a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8001d26:	f7fe fd35 	bl	8000794 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d34:	d901      	bls.n	8001d3a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e007      	b.n	8001d4a <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_PWREx_ConfigSupply+0x6c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d46:	d1ee      	bne.n	8001d26 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	58024800 	.word	0x58024800

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e3a4      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 8087 	beq.w	8001e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d78:	4b9a      	ldr	r3, [pc, #616]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d82:	4b98      	ldr	r3, [pc, #608]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d007      	beq.n	8001d9e <HAL_RCC_OscConfig+0x46>
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	2b18      	cmp	r3, #24
 8001d92:	d110      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5e>
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d10b      	bne.n	8001db6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9e:	4b91      	ldr	r3, [pc, #580]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d06c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x12c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d168      	bne.n	8001e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e37e      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x76>
 8001dc0:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	e02e      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b83      	ldr	r3, [pc, #524]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a82      	ldr	r2, [pc, #520]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7f      	ldr	r2, [pc, #508]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001de8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e01d      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0xbc>
 8001dfa:	4b7a      	ldr	r3, [pc, #488]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a79      	ldr	r2, [pc, #484]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a76      	ldr	r2, [pc, #472]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e00b      	b.n	8001e2c <HAL_RCC_OscConfig+0xd4>
 8001e14:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a72      	ldr	r2, [pc, #456]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a6f      	ldr	r2, [pc, #444]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7fe fcae 	bl	8000794 <HAL_GetTick>
 8001e38:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7fe fcaa 	bl	8000794 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e332      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e4e:	4b65      	ldr	r3, [pc, #404]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0xe4>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fc9a 	bl	8000794 <HAL_GetTick>
 8001e60:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e64:	f7fe fc96 	bl	8000794 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e31e      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e76:	4b5b      	ldr	r3, [pc, #364]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x10c>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80b0 	beq.w	8001ff4 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e94:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e9c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e9e:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d007      	beq.n	8001eba <HAL_RCC_OscConfig+0x162>
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b18      	cmp	r3, #24
 8001eae:	d149      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1ec>
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d144      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d005      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x17a>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e2f0      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0219 	bic.w	r2, r3, #25
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4941      	ldr	r1, [pc, #260]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe fc56 	bl	8000794 <HAL_GetTick>
 8001ee8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eec:	f7fe fc52 	bl	8000794 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e2da      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001efe:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0a:	f7fe fc71 	bl	80007f0 <HAL_GetREVID>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	f241 0303 	movw	r3, #4099	; 0x1003
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d80a      	bhi.n	8001f2e <HAL_RCC_OscConfig+0x1d6>
 8001f18:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	031b      	lsls	r3, r3, #12
 8001f26:	492f      	ldr	r1, [pc, #188]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f2c:	e062      	b.n	8001ff4 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	4929      	ldr	r1, [pc, #164]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f42:	e057      	b.n	8001ff4 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d038      	beq.n	8001fbe <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f4c:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 0219 	bic.w	r2, r3, #25
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4922      	ldr	r1, [pc, #136]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7fe fc19 	bl	8000794 <HAL_GetTick>
 8001f62:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f66:	f7fe fc15 	bl	8000794 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e29d      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f84:	f7fe fc34 	bl	80007f0 <HAL_GetREVID>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f241 0303 	movw	r3, #4099	; 0x1003
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d80a      	bhi.n	8001fa8 <HAL_RCC_OscConfig+0x250>
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	031b      	lsls	r3, r3, #12
 8001fa0:	4910      	ldr	r1, [pc, #64]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
 8001fa6:	e025      	b.n	8001ff4 <HAL_RCC_OscConfig+0x29c>
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	061b      	lsls	r3, r3, #24
 8001fb6:	490b      	ldr	r1, [pc, #44]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
 8001fbc:	e01a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a08      	ldr	r2, [pc, #32]	; (8001fe4 <HAL_RCC_OscConfig+0x28c>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7fe fbe3 	bl	8000794 <HAL_GetTick>
 8001fce:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7fe fbdf 	bl	8000794 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d903      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e267      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
 8001fe4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fe8:	4ba0      	ldr	r3, [pc, #640]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1ee      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 808f 	beq.w	8002120 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002002:	4b9a      	ldr	r3, [pc, #616]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800200a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800200c:	4b97      	ldr	r3, [pc, #604]	; (800226c <HAL_RCC_OscConfig+0x514>)
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d007      	beq.n	8002028 <HAL_RCC_OscConfig+0x2d0>
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	2b18      	cmp	r3, #24
 800201c:	d12d      	bne.n	800207a <HAL_RCC_OscConfig+0x322>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d128      	bne.n	800207a <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002028:	4b90      	ldr	r3, [pc, #576]	; (800226c <HAL_RCC_OscConfig+0x514>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_OscConfig+0x2e8>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b80      	cmp	r3, #128	; 0x80
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e239      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002040:	f7fe fbd6 	bl	80007f0 <HAL_GetREVID>
 8002044:	4602      	mov	r2, r0
 8002046:	f241 0303 	movw	r3, #4099	; 0x1003
 800204a:	429a      	cmp	r2, r3
 800204c:	d80a      	bhi.n	8002064 <HAL_RCC_OscConfig+0x30c>
 800204e:	4b87      	ldr	r3, [pc, #540]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	4983      	ldr	r1, [pc, #524]	; (800226c <HAL_RCC_OscConfig+0x514>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002062:	e05d      	b.n	8002120 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002064:	4b81      	ldr	r3, [pc, #516]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	061b      	lsls	r3, r3, #24
 8002072:	497e      	ldr	r1, [pc, #504]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002074:	4313      	orrs	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002078:	e052      	b.n	8002120 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d035      	beq.n	80020ee <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002082:	4b7a      	ldr	r3, [pc, #488]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a79      	ldr	r2, [pc, #484]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7fe fb81 	bl	8000794 <HAL_GetTick>
 8002092:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002096:	f7fe fb7d 	bl	8000794 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e205      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020a8:	4b70      	ldr	r3, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020b4:	f7fe fb9c 	bl	80007f0 <HAL_GetREVID>
 80020b8:	4602      	mov	r2, r0
 80020ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80020be:	429a      	cmp	r2, r3
 80020c0:	d80a      	bhi.n	80020d8 <HAL_RCC_OscConfig+0x380>
 80020c2:	4b6a      	ldr	r3, [pc, #424]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	069b      	lsls	r3, r3, #26
 80020d0:	4966      	ldr	r1, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
 80020d6:	e023      	b.n	8002120 <HAL_RCC_OscConfig+0x3c8>
 80020d8:	4b64      	ldr	r3, [pc, #400]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	061b      	lsls	r3, r3, #24
 80020e6:	4961      	ldr	r1, [pc, #388]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	60cb      	str	r3, [r1, #12]
 80020ec:	e018      	b.n	8002120 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a5e      	ldr	r2, [pc, #376]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80020f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7fe fb4b 	bl	8000794 <HAL_GetTick>
 80020fe:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002102:	f7fe fb47 	bl	8000794 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e1cf      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002114:	4b55      	ldr	r3, [pc, #340]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d036      	beq.n	800219a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d019      	beq.n	8002168 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002138:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_RCC_OscConfig+0x514>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7fe fb28 	bl	8000794 <HAL_GetTick>
 8002144:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002148:	f7fe fb24 	bl	8000794 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1ac      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800215a:	4b44      	ldr	r3, [pc, #272]	; (800226c <HAL_RCC_OscConfig+0x514>)
 800215c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCC_OscConfig+0x3f0>
 8002166:	e018      	b.n	800219a <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002168:	4b40      	ldr	r3, [pc, #256]	; (800226c <HAL_RCC_OscConfig+0x514>)
 800216a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216c:	4a3f      	ldr	r2, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x514>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7fe fb0e 	bl	8000794 <HAL_GetTick>
 8002178:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217c:	f7fe fb0a 	bl	8000794 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e192      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800218e:	4b37      	ldr	r3, [pc, #220]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d036      	beq.n	8002214 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d019      	beq.n	80021e2 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021ae:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a2e      	ldr	r2, [pc, #184]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80021b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021ba:	f7fe faeb 	bl	8000794 <HAL_GetTick>
 80021be:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80021c2:	f7fe fae7 	bl	8000794 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e16f      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f0      	beq.n	80021c2 <HAL_RCC_OscConfig+0x46a>
 80021e0:	e018      	b.n	8002214 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a21      	ldr	r2, [pc, #132]	; (800226c <HAL_RCC_OscConfig+0x514>)
 80021e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fad1 	bl	8000794 <HAL_GetTick>
 80021f2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80021f6:	f7fe facd 	bl	8000794 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e155      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002208:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x514>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8086 	beq.w	800232e <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002222:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_RCC_OscConfig+0x518>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a12      	ldr	r2, [pc, #72]	; (8002270 <HAL_RCC_OscConfig+0x518>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800222e:	f7fe fab1 	bl	8000794 <HAL_GetTick>
 8002232:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002236:	f7fe faad 	bl	8000794 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b64      	cmp	r3, #100	; 0x64
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e135      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_OscConfig+0x518>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d10b      	bne.n	8002274 <HAL_RCC_OscConfig+0x51c>
 800225c:	4b03      	ldr	r3, [pc, #12]	; (800226c <HAL_RCC_OscConfig+0x514>)
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	4a02      	ldr	r2, [pc, #8]	; (800226c <HAL_RCC_OscConfig+0x514>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6713      	str	r3, [r2, #112]	; 0x70
 8002268:	e032      	b.n	80022d0 <HAL_RCC_OscConfig+0x578>
 800226a:	bf00      	nop
 800226c:	58024400 	.word	0x58024400
 8002270:	58024800 	.word	0x58024800
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x53e>
 800227c:	4b8f      	ldr	r3, [pc, #572]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a8e      	ldr	r2, [pc, #568]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	4b8c      	ldr	r3, [pc, #560]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a8b      	ldr	r2, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	e01c      	b.n	80022d0 <HAL_RCC_OscConfig+0x578>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x560>
 800229e:	4b87      	ldr	r3, [pc, #540]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a86      	ldr	r2, [pc, #536]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	4b84      	ldr	r3, [pc, #528]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80022ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ae:	4a83      	ldr	r2, [pc, #524]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6713      	str	r3, [r2, #112]	; 0x70
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0x578>
 80022b8:	4b80      	ldr	r3, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	6713      	str	r3, [r2, #112]	; 0x70
 80022c4:	4b7d      	ldr	r3, [pc, #500]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c8:	4a7c      	ldr	r2, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80022ca:	f023 0304 	bic.w	r3, r3, #4
 80022ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d015      	beq.n	8002304 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7fe fa5c 	bl	8000794 <HAL_GetTick>
 80022dc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e0:	f7fe fa58 	bl	8000794 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e0de      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022f6:	4b71      	ldr	r3, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80022f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ee      	beq.n	80022e0 <HAL_RCC_OscConfig+0x588>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7fe fa46 	bl	8000794 <HAL_GetTick>
 8002308:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800230a:	e00a      	b.n	8002322 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7fe fa42 	bl	8000794 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e0c8      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002322:	4b66      	ldr	r3, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ee      	bne.n	800230c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80bd 	beq.w	80024b2 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002338:	4b60      	ldr	r3, [pc, #384]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002340:	2b18      	cmp	r3, #24
 8002342:	f000 80b4 	beq.w	80024ae <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	2b02      	cmp	r3, #2
 800234c:	f040 8095 	bne.w	800247a <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a59      	ldr	r2, [pc, #356]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fa1a 	bl	8000794 <HAL_GetTick>
 8002360:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fa16 	bl	8000794 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e09e      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002376:	4b51      	ldr	r3, [pc, #324]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002382:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002386:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <HAL_RCC_OscConfig+0x768>)
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	430a      	orrs	r2, r1
 8002396:	4949      	ldr	r1, [pc, #292]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002398:	4313      	orrs	r3, r2
 800239a:	628b      	str	r3, [r1, #40]	; 0x28
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	3b01      	subs	r3, #1
 80023a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	3b01      	subs	r3, #1
 80023ac:	025b      	lsls	r3, r3, #9
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	3b01      	subs	r3, #1
 80023b8:	041b      	lsls	r3, r3, #16
 80023ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c4:	3b01      	subs	r3, #1
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80023cc:	493b      	ldr	r1, [pc, #236]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80023d2:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	4a39      	ldr	r2, [pc, #228]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80023e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_RCC_OscConfig+0x76c>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023ea:	00d2      	lsls	r2, r2, #3
 80023ec:	4933      	ldr	r1, [pc, #204]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023f2:	4b32      	ldr	r3, [pc, #200]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f023 020c 	bic.w	r2, r3, #12
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	492f      	ldr	r1, [pc, #188]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002400:	4313      	orrs	r3, r2
 8002402:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f023 0202 	bic.w	r2, r3, #2
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	492a      	ldr	r1, [pc, #168]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002412:	4313      	orrs	r3, r2
 8002414:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002416:	4b29      	ldr	r3, [pc, #164]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	4a28      	ldr	r2, [pc, #160]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	4a25      	ldr	r2, [pc, #148]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	4a22      	ldr	r2, [pc, #136]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	4a1f      	ldr	r2, [pc, #124]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 800244c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002452:	f7fe f99f 	bl	8000794 <HAL_GetTick>
 8002456:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe f99b 	bl	8000794 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e023      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0f0      	beq.n	800245a <HAL_RCC_OscConfig+0x702>
 8002478:	e01b      	b.n	80024b2 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 8002480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe f985 	bl	8000794 <HAL_GetTick>
 800248a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe f981 	bl	8000794 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e009      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_OscConfig+0x764>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x736>
 80024ac:	e001      	b.n	80024b2 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3728      	adds	r7, #40	; 0x28
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	58024400 	.word	0x58024400
 80024c0:	fffffc0c 	.word	0xfffffc0c
 80024c4:	ffff0007 	.word	0xffff0007

080024c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e18b      	b.n	80027f4 <HAL_RCC_ClockConfig+0x32c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b8a      	ldr	r3, [pc, #552]	; (8002708 <HAL_RCC_ClockConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d910      	bls.n	800250c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b87      	ldr	r3, [pc, #540]	; (8002708 <HAL_RCC_ClockConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 020f 	bic.w	r2, r3, #15
 80024f2:	4985      	ldr	r1, [pc, #532]	; (8002708 <HAL_RCC_ClockConfig+0x240>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b83      	ldr	r3, [pc, #524]	; (8002708 <HAL_RCC_ClockConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e173      	b.n	80027f4 <HAL_RCC_ClockConfig+0x32c>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	4b7b      	ldr	r3, [pc, #492]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002524:	429a      	cmp	r2, r3
 8002526:	d908      	bls.n	800253a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002528:	4b78      	ldr	r3, [pc, #480]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4975      	ldr	r1, [pc, #468]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 8002536:	4313      	orrs	r3, r2
 8002538:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d010      	beq.n	8002568 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	4b70      	ldr	r3, [pc, #448]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002552:	429a      	cmp	r2, r3
 8002554:	d908      	bls.n	8002568 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002556:	4b6d      	ldr	r3, [pc, #436]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	496a      	ldr	r1, [pc, #424]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 8002564:	4313      	orrs	r3, r2
 8002566:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	d010      	beq.n	8002596 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699a      	ldr	r2, [r3, #24]
 8002578:	4b64      	ldr	r3, [pc, #400]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002580:	429a      	cmp	r2, r3
 8002582:	d908      	bls.n	8002596 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	495e      	ldr	r1, [pc, #376]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 8002592:	4313      	orrs	r3, r2
 8002594:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d010      	beq.n	80025c4 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	4b59      	ldr	r3, [pc, #356]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d908      	bls.n	80025c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80025b2:	4b56      	ldr	r3, [pc, #344]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4953      	ldr	r1, [pc, #332]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d010      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	4b4d      	ldr	r3, [pc, #308]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	429a      	cmp	r2, r3
 80025de:	d908      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e0:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	f023 020f 	bic.w	r2, r3, #15
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4947      	ldr	r1, [pc, #284]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d055      	beq.n	80026aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025fe:	4b43      	ldr	r3, [pc, #268]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4940      	ldr	r1, [pc, #256]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800260c:	4313      	orrs	r3, r2
 800260e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d107      	bne.n	8002628 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002618:	4b3c      	ldr	r3, [pc, #240]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d121      	bne.n	8002668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0e5      	b.n	80027f4 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d107      	bne.n	8002640 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d115      	bne.n	8002668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0d9      	b.n	80027f4 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d107      	bne.n	8002658 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002648:	4b30      	ldr	r3, [pc, #192]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0cd      	b.n	80027f4 <HAL_RCC_ClockConfig+0x32c>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0c5      	b.n	80027f4 <HAL_RCC_ClockConfig+0x32c>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002668:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f023 0207 	bic.w	r2, r3, #7
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4925      	ldr	r1, [pc, #148]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 8002676:	4313      	orrs	r3, r2
 8002678:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe f88b 	bl	8000794 <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002680:	e00a      	b.n	8002698 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002682:	f7fe f887 	bl	8000794 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0ad      	b.n	80027f4 <HAL_RCC_ClockConfig+0x32c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d1eb      	bne.n	8002682 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d010      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d208      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f023 020f 	bic.w	r2, r3, #15
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	490e      	ldr	r1, [pc, #56]	; (800270c <HAL_RCC_ClockConfig+0x244>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x240>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d214      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_RCC_ClockConfig+0x240>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 020f 	bic.w	r2, r3, #15
 80026ee:	4906      	ldr	r1, [pc, #24]	; (8002708 <HAL_RCC_ClockConfig+0x240>)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_RCC_ClockConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	429a      	cmp	r2, r3
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e075      	b.n	80027f4 <HAL_RCC_ClockConfig+0x32c>
 8002708:	52002000 	.word	0x52002000
 800270c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d010      	beq.n	800273e <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	4b36      	ldr	r3, [pc, #216]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002728:	429a      	cmp	r2, r3
 800272a:	d208      	bcs.n	800273e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800272c:	4b33      	ldr	r3, [pc, #204]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	4930      	ldr	r1, [pc, #192]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 800273a:	4313      	orrs	r3, r2
 800273c:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d010      	beq.n	800276c <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002756:	429a      	cmp	r2, r3
 8002758:	d208      	bcs.n	800276c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4925      	ldr	r1, [pc, #148]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 8002768:	4313      	orrs	r3, r2
 800276a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	d010      	beq.n	800279a <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002784:	429a      	cmp	r2, r3
 8002786:	d208      	bcs.n	800279a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4919      	ldr	r1, [pc, #100]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 8002796:	4313      	orrs	r3, r2
 8002798:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d010      	beq.n	80027c8 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69da      	ldr	r2, [r3, #28]
 80027aa:	4b14      	ldr	r3, [pc, #80]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d208      	bcs.n	80027c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	490e      	ldr	r1, [pc, #56]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80027c8:	f000 f81e 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027cc:	4601      	mov	r1, r0
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_ClockConfig+0x334>)
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	0a1b      	lsrs	r3, r3, #8
 80027d4:	f003 030f 	and.w	r3, r3, #15
 80027d8:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_RCC_ClockConfig+0x338>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	f003 031f 	and.w	r3, r3, #31
 80027e0:	fa21 f303 	lsr.w	r3, r1, r3
 80027e4:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_RCC_ClockConfig+0x33c>)
 80027e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (TICK_INT_PRIORITY);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fd ff89 	bl	8000700 <HAL_InitTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80027f2:	7afb      	ldrb	r3, [r7, #11]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	58024400 	.word	0x58024400
 8002800:	08010e30 	.word	0x08010e30
 8002804:	2400009c 	.word	0x2400009c

08002808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800280e:	4baf      	ldr	r3, [pc, #700]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002816:	2b18      	cmp	r3, #24
 8002818:	f200 814e 	bhi.w	8002ab8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800281c:	a201      	add	r2, pc, #4	; (adr r2, 8002824 <HAL_RCC_GetSysClockFreq+0x1c>)
 800281e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002822:	bf00      	nop
 8002824:	08002889 	.word	0x08002889
 8002828:	08002ab9 	.word	0x08002ab9
 800282c:	08002ab9 	.word	0x08002ab9
 8002830:	08002ab9 	.word	0x08002ab9
 8002834:	08002ab9 	.word	0x08002ab9
 8002838:	08002ab9 	.word	0x08002ab9
 800283c:	08002ab9 	.word	0x08002ab9
 8002840:	08002ab9 	.word	0x08002ab9
 8002844:	080028af 	.word	0x080028af
 8002848:	08002ab9 	.word	0x08002ab9
 800284c:	08002ab9 	.word	0x08002ab9
 8002850:	08002ab9 	.word	0x08002ab9
 8002854:	08002ab9 	.word	0x08002ab9
 8002858:	08002ab9 	.word	0x08002ab9
 800285c:	08002ab9 	.word	0x08002ab9
 8002860:	08002ab9 	.word	0x08002ab9
 8002864:	080028b5 	.word	0x080028b5
 8002868:	08002ab9 	.word	0x08002ab9
 800286c:	08002ab9 	.word	0x08002ab9
 8002870:	08002ab9 	.word	0x08002ab9
 8002874:	08002ab9 	.word	0x08002ab9
 8002878:	08002ab9 	.word	0x08002ab9
 800287c:	08002ab9 	.word	0x08002ab9
 8002880:	08002ab9 	.word	0x08002ab9
 8002884:	080028bb 	.word	0x080028bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002888:	4b90      	ldr	r3, [pc, #576]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	d009      	beq.n	80028a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002894:	4b8d      	ldr	r3, [pc, #564]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	08db      	lsrs	r3, r3, #3
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	4a8c      	ldr	r2, [pc, #560]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
 80028a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80028a6:	e10a      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80028a8:	4b89      	ldr	r3, [pc, #548]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80028aa:	61bb      	str	r3, [r7, #24]
    break;
 80028ac:	e107      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80028ae:	4b89      	ldr	r3, [pc, #548]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80028b0:	61bb      	str	r3, [r7, #24]
    break;
 80028b2:	e104      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80028b4:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80028b6:	61bb      	str	r3, [r7, #24]
    break;
 80028b8:	e101      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028ba:	4b84      	ldr	r3, [pc, #528]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80028c4:	4b81      	ldr	r3, [pc, #516]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028d0:	4b7e      	ldr	r3, [pc, #504]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80028da:	4b7c      	ldr	r3, [pc, #496]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	08db      	lsrs	r3, r3, #3
 80028e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80da 	beq.w	8002ab2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d05a      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x1b2>
 8002904:	2b01      	cmp	r3, #1
 8002906:	d302      	bcc.n	800290e <HAL_RCC_GetSysClockFreq+0x106>
 8002908:	2b02      	cmp	r3, #2
 800290a:	d078      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x1f6>
 800290c:	e099      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800290e:	4b6f      	ldr	r3, [pc, #444]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	d02d      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800291a:	4b6c      	ldr	r3, [pc, #432]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	08db      	lsrs	r3, r3, #3
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	4a6a      	ldr	r2, [pc, #424]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	ee07 3a90 	vmov	s15, r3
 800293c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002940:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002944:	4b61      	ldr	r3, [pc, #388]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294c:	ee07 3a90 	vmov	s15, r3
 8002950:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002954:	ed97 6a02 	vldr	s12, [r7, #8]
 8002958:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002adc <HAL_RCC_GetSysClockFreq+0x2d4>
 800295c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002960:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002968:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002970:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002974:	e087      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	ee07 3a90 	vmov	s15, r3
 800297c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002980:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002ae0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002988:	4b50      	ldr	r3, [pc, #320]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002990:	ee07 3a90 	vmov	s15, r3
 8002994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002998:	ed97 6a02 	vldr	s12, [r7, #8]
 800299c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002adc <HAL_RCC_GetSysClockFreq+0x2d4>
 80029a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029b8:	e065      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	ee07 3a90 	vmov	s15, r3
 80029c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002ae4 <HAL_RCC_GetSysClockFreq+0x2dc>
 80029c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d4:	ee07 3a90 	vmov	s15, r3
 80029d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80029e0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002adc <HAL_RCC_GetSysClockFreq+0x2d4>
 80029e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029fc:	e043      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a08:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002ae8 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a10:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a20:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a24:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002adc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a40:	e021      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002ae4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a54:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a64:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a68:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002adc <HAL_RCC_GetSysClockFreq+0x2d4>
 8002a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a84:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	0a5b      	lsrs	r3, r3, #9
 8002a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a90:	3301      	adds	r3, #1
 8002a92:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002aa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aaa:	ee17 3a90 	vmov	r3, s15
 8002aae:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002ab0:	e005      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
    break;
 8002ab6:	e002      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002aba:	61bb      	str	r3, [r7, #24]
    break;
 8002abc:	bf00      	nop
  }

  return sysclockfreq;
 8002abe:	69bb      	ldr	r3, [r7, #24]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3724      	adds	r7, #36	; 0x24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	03d09000 	.word	0x03d09000
 8002ad4:	003d0900 	.word	0x003d0900
 8002ad8:	007a1200 	.word	0x007a1200
 8002adc:	46000000 	.word	0x46000000
 8002ae0:	4c742400 	.word	0x4c742400
 8002ae4:	4a742400 	.word	0x4a742400
 8002ae8:	4af42400 	.word	0x4af42400

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002af0:	f001 f9e2 	bl	8003eb8 <HAL_RCCEx_GetD1SysClockFreq>
 8002af4:	4601      	mov	r1, r0
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_RCC_GetHCLKFreq+0x30>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	f003 031f 	and.w	r3, r3, #31
 8002b06:	fa21 f303 	lsr.w	r3, r1, r3
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x34>)
 8002b0c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <HAL_RCC_GetHCLKFreq+0x34>)
 8002b10:	681b      	ldr	r3, [r3, #0]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	08010e30 	.word	0x08010e30
 8002b20:	240000a0 	.word	0x240000a0

08002b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002b28:	f7ff ffe0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b2c:	4601      	mov	r1, r0
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b3a:	5cd3      	ldrb	r3, [r2, r3]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	58024400 	.word	0x58024400
 8002b4c:	08010e30 	.word	0x08010e30

08002b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b54:	f7ff ffca 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b58:	4601      	mov	r1, r0
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4a04      	ldr	r2, [pc, #16]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b66:	5cd3      	ldrb	r3, [r2, r3]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	58024400 	.word	0x58024400
 8002b78:	08010e30 	.word	0x08010e30

08002b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b84:	2300      	movs	r3, #0
 8002b86:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d03d      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba0:	d013      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ba6:	d802      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002bac:	e01f      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002bae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bb2:	d013      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002bb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bb8:	d01c      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002bba:	e018      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bbc:	4baf      	ldr	r3, [pc, #700]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	4aae      	ldr	r2, [pc, #696]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bc8:	e015      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2102      	movs	r1, #2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f001 f98d 	bl	8003ef0 <RCCEx_PLL2_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bda:	e00c      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3324      	adds	r3, #36	; 0x24
 8002be0:	2102      	movs	r1, #2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 fa36 	bl	8004054 <RCCEx_PLL3_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bec:	e003      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d109      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002bfc:	4b9f      	ldr	r3, [pc, #636]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c08:	499c      	ldr	r1, [pc, #624]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	650b      	str	r3, [r1, #80]	; 0x50
 8002c0e:	e001      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d03d      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d826      	bhi.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002c28:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2e:	bf00      	nop
 8002c30:	08002c45 	.word	0x08002c45
 8002c34:	08002c53 	.word	0x08002c53
 8002c38:	08002c65 	.word	0x08002c65
 8002c3c:	08002c7d 	.word	0x08002c7d
 8002c40:	08002c7d 	.word	0x08002c7d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c44:	4b8d      	ldr	r3, [pc, #564]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	4a8c      	ldr	r2, [pc, #560]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c50:	e015      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3304      	adds	r3, #4
 8002c56:	2100      	movs	r1, #0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f001 f949 	bl	8003ef0 <RCCEx_PLL2_Config>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c62:	e00c      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3324      	adds	r3, #36	; 0x24
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f001 f9f2 	bl	8004054 <RCCEx_PLL3_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002c74:	e003      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	75fb      	strb	r3, [r7, #23]
      break;
 8002c7a:	e000      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002c7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c84:	4b7d      	ldr	r3, [pc, #500]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c88:	f023 0207 	bic.w	r2, r3, #7
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	497a      	ldr	r1, [pc, #488]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	650b      	str	r3, [r1, #80]	; 0x50
 8002c96:	e001      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03e      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d01c      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002cb0:	2b80      	cmp	r3, #128	; 0x80
 8002cb2:	d804      	bhi.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d00d      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002cbc:	e01e      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002cbe:	2bc0      	cmp	r3, #192	; 0xc0
 8002cc0:	d01f      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc6:	d01e      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002cc8:	e018      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	4a6b      	ldr	r2, [pc, #428]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002cd6:	e017      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 f906 	bl	8003ef0 <RCCEx_PLL2_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ce8:	e00e      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3324      	adds	r3, #36	; 0x24
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f001 f9af 	bl	8004054 <RCCEx_PLL3_Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002cfa:	e005      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002d00:	e002      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002d02:	bf00      	nop
 8002d04:	e000      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d0e:	4b5b      	ldr	r3, [pc, #364]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1a:	4958      	ldr	r1, [pc, #352]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	650b      	str	r3, [r1, #80]	; 0x50
 8002d20:	e001      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d22:	7dfb      	ldrb	r3, [r7, #23]
 8002d24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d044      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3c:	d01f      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8002d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d42:	d805      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00a      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d4c:	d00e      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8002d4e:	e01f      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8002d50:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d54:	d01f      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d5a:	d01e      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002d5c:	e018      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d5e:	4b47      	ldr	r3, [pc, #284]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	4a46      	ldr	r2, [pc, #280]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d6a:	e017      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 f8bc 	bl	8003ef0 <RCCEx_PLL2_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002d7c:	e00e      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3324      	adds	r3, #36	; 0x24
 8002d82:	2100      	movs	r1, #0
 8002d84:	4618      	mov	r0, r3
 8002d86:	f001 f965 	bl	8004054 <RCCEx_PLL3_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d8e:	e005      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	75fb      	strb	r3, [r7, #23]
      break;
 8002d94:	e002      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002db0:	4932      	ldr	r1, [pc, #200]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	658b      	str	r3, [r1, #88]	; 0x58
 8002db6:	e001      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d044      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002dce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dd2:	d01f      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dd8:	d805      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8002dde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de2:	d00e      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002de4:	e01f      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002de6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dea:	d01f      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002df0:	d01e      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002df2:	e018      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df4:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e00:	e017      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	3304      	adds	r3, #4
 8002e06:	2100      	movs	r1, #0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 f871 	bl	8003ef0 <RCCEx_PLL2_Config>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002e12:	e00e      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3324      	adds	r3, #36	; 0x24
 8002e18:	2100      	movs	r1, #0
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f001 f91a 	bl	8004054 <RCCEx_PLL3_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e24:	e005      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
      break;
 8002e2a:	e002      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002e2c:	bf00      	nop
 8002e2e:	e000      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e46:	490d      	ldr	r1, [pc, #52]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	658b      	str	r3, [r1, #88]	; 0x58
 8002e4c:	e001      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
 8002e50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d035      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e62:	2b10      	cmp	r3, #16
 8002e64:	d00c      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d802      	bhi.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01b      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002e6e:	e017      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002e70:	2b20      	cmp	r3, #32
 8002e72:	d00c      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002e74:	2b30      	cmp	r3, #48	; 0x30
 8002e76:	d018      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002e78:	e012      	b.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002e7a:	bf00      	nop
 8002e7c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e80:	4baf      	ldr	r3, [pc, #700]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	4aae      	ldr	r2, [pc, #696]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e8c:	e00e      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3304      	adds	r3, #4
 8002e92:	2102      	movs	r1, #2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 f82b 	bl	8003ef0 <RCCEx_PLL2_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002e9e:	e005      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ea4:	e002      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e000      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002eb2:	4ba3      	ldr	r3, [pc, #652]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebe:	49a0      	ldr	r1, [pc, #640]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ec4:	e001      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d042      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ede:	d01f      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee4:	d805      	bhi.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eee:	d00e      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002ef0:	e01f      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002ef2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ef6:	d01f      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002efc:	d01e      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8002efe:	e018      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f00:	4b8f      	ldr	r3, [pc, #572]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	4a8e      	ldr	r2, [pc, #568]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f0c:	e017      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ffeb 	bl	8003ef0 <RCCEx_PLL2_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f1e:	e00e      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3324      	adds	r3, #36	; 0x24
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f001 f894 	bl	8004054 <RCCEx_PLL3_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002f30:	e005      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
      break;
 8002f36:	e002      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002f38:	bf00      	nop
 8002f3a:	e000      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002f3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002f44:	4b7e      	ldr	r3, [pc, #504]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f50:	497b      	ldr	r1, [pc, #492]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	650b      	str	r3, [r1, #80]	; 0x50
 8002f56:	e001      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d042      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f70:	d01b      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002f72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f76:	d805      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d022      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f82:	e01b      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8002f84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f88:	d01d      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8002f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8e:	d01c      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002f90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f94:	d01b      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002f96:	e011      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 ffa6 	bl	8003ef0 <RCCEx_PLL2_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002fa8:	e012      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3324      	adds	r3, #36	; 0x24
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 f84f 	bl	8004054 <RCCEx_PLL3_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002fba:	e009      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc0:	e006      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002fc2:	bf00      	nop
 8002fc4:	e004      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002fd6:	4b5a      	ldr	r3, [pc, #360]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fda:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	4957      	ldr	r1, [pc, #348]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	650b      	str	r3, [r1, #80]	; 0x50
 8002fe8:	e001      	b.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
 8002fec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d044      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003004:	d01b      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300a:	d805      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d022      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003014:	d00a      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003016:	e01b      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301c:	d01d      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800301e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003022:	d01c      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003024:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003028:	d01b      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800302a:	e011      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f000 ff5c 	bl	8003ef0 <RCCEx_PLL2_Config>
 8003038:	4603      	mov	r3, r0
 800303a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800303c:	e012      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3324      	adds	r3, #36	; 0x24
 8003042:	2101      	movs	r1, #1
 8003044:	4618      	mov	r0, r3
 8003046:	f001 f805 	bl	8004054 <RCCEx_PLL3_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800304e:	e009      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	75fb      	strb	r3, [r7, #23]
      break;
 8003054:	e006      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003056:	bf00      	nop
 8003058:	e004      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800305a:	bf00      	nop
 800305c:	e002      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800305e:	bf00      	nop
 8003060:	e000      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003064:	7dfb      	ldrb	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800306a:	4b35      	ldr	r3, [pc, #212]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003078:	4931      	ldr	r1, [pc, #196]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800307a:	4313      	orrs	r3, r2
 800307c:	658b      	str	r3, [r1, #88]	; 0x58
 800307e:	e001      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	7dfb      	ldrb	r3, [r7, #23]
 8003082:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02d      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003094:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003098:	d005      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800309a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309e:	d009      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80030a4:	e00f      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a6:	4b26      	ldr	r3, [pc, #152]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	4a25      	ldr	r2, [pc, #148]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	2101      	movs	r1, #1
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 ff18 	bl	8003ef0 <RCCEx_PLL2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e0:	4917      	ldr	r1, [pc, #92]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	650b      	str	r3, [r1, #80]	; 0x50
 80030e6:	e001      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d035      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d81b      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003145 	.word	0x08003145
 800310c:	08003119 	.word	0x08003119
 8003110:	08003127 	.word	0x08003127
 8003114:	08003145 	.word	0x08003145
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800311e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003124:	e00f      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2102      	movs	r1, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fedf 	bl	8003ef0 <RCCEx_PLL2_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003136:	e006      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
      break;
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800313e:	bf00      	nop
 8003140:	58024400 	.word	0x58024400
      break;
 8003144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800314c:	4bba      	ldr	r3, [pc, #744]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800314e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003150:	f023 0203 	bic.w	r2, r3, #3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	49b7      	ldr	r1, [pc, #732]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800315e:	e001      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8086 	beq.w	800327e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003172:	4bb2      	ldr	r3, [pc, #712]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4ab1      	ldr	r2, [pc, #708]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800317e:	f7fd fb09 	bl	8000794 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003184:	e009      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fd fb05 	bl	8000794 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d902      	bls.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	75fb      	strb	r3, [r7, #23]
        break;
 8003198:	e005      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800319a:	4ba8      	ldr	r3, [pc, #672]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0ef      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d166      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80031ac:	4ba2      	ldr	r3, [pc, #648]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031b6:	4053      	eors	r3, r2
 80031b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d013      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c0:	4b9d      	ldr	r3, [pc, #628]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ca:	4b9b      	ldr	r3, [pc, #620]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	4a9a      	ldr	r2, [pc, #616]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031d6:	4b98      	ldr	r3, [pc, #608]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031da:	4a97      	ldr	r2, [pc, #604]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031e2:	4a95      	ldr	r2, [pc, #596]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031f2:	d115      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f4:	f7fd face 	bl	8000794 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031fa:	e00b      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fd faca 	bl	8000794 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d902      	bls.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	75fb      	strb	r3, [r7, #23]
            break;
 8003212:	e005      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003214:	4b88      	ldr	r3, [pc, #544]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ed      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d126      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800322c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003234:	d10d      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003236:	4b80      	ldr	r3, [pc, #512]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003244:	0919      	lsrs	r1, r3, #4
 8003246:	4b7e      	ldr	r3, [pc, #504]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003248:	400b      	ands	r3, r1
 800324a:	497b      	ldr	r1, [pc, #492]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800324c:	4313      	orrs	r3, r2
 800324e:	610b      	str	r3, [r1, #16]
 8003250:	e005      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003252:	4b79      	ldr	r3, [pc, #484]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	4a78      	ldr	r2, [pc, #480]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003258:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800325c:	6113      	str	r3, [r2, #16]
 800325e:	4b76      	ldr	r3, [pc, #472]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003260:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	4972      	ldr	r1, [pc, #456]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	670b      	str	r3, [r1, #112]	; 0x70
 8003272:	e004      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	75bb      	strb	r3, [r7, #22]
 8003278:	e001      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d07d      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800328e:	2b28      	cmp	r3, #40	; 0x28
 8003290:	d866      	bhi.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	08003367 	.word	0x08003367
 800329c:	08003361 	.word	0x08003361
 80032a0:	08003361 	.word	0x08003361
 80032a4:	08003361 	.word	0x08003361
 80032a8:	08003361 	.word	0x08003361
 80032ac:	08003361 	.word	0x08003361
 80032b0:	08003361 	.word	0x08003361
 80032b4:	08003361 	.word	0x08003361
 80032b8:	0800333d 	.word	0x0800333d
 80032bc:	08003361 	.word	0x08003361
 80032c0:	08003361 	.word	0x08003361
 80032c4:	08003361 	.word	0x08003361
 80032c8:	08003361 	.word	0x08003361
 80032cc:	08003361 	.word	0x08003361
 80032d0:	08003361 	.word	0x08003361
 80032d4:	08003361 	.word	0x08003361
 80032d8:	0800334f 	.word	0x0800334f
 80032dc:	08003361 	.word	0x08003361
 80032e0:	08003361 	.word	0x08003361
 80032e4:	08003361 	.word	0x08003361
 80032e8:	08003361 	.word	0x08003361
 80032ec:	08003361 	.word	0x08003361
 80032f0:	08003361 	.word	0x08003361
 80032f4:	08003361 	.word	0x08003361
 80032f8:	08003367 	.word	0x08003367
 80032fc:	08003361 	.word	0x08003361
 8003300:	08003361 	.word	0x08003361
 8003304:	08003361 	.word	0x08003361
 8003308:	08003361 	.word	0x08003361
 800330c:	08003361 	.word	0x08003361
 8003310:	08003361 	.word	0x08003361
 8003314:	08003361 	.word	0x08003361
 8003318:	08003367 	.word	0x08003367
 800331c:	08003361 	.word	0x08003361
 8003320:	08003361 	.word	0x08003361
 8003324:	08003361 	.word	0x08003361
 8003328:	08003361 	.word	0x08003361
 800332c:	08003361 	.word	0x08003361
 8003330:	08003361 	.word	0x08003361
 8003334:	08003361 	.word	0x08003361
 8003338:	08003367 	.word	0x08003367
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	2101      	movs	r1, #1
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fdd4 	bl	8003ef0 <RCCEx_PLL2_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800334c:	e00c      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3324      	adds	r3, #36	; 0x24
 8003352:	2101      	movs	r1, #1
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fe7d 	bl	8004054 <RCCEx_PLL3_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800335e:	e003      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	75fb      	strb	r3, [r7, #23]
      break;
 8003364:	e000      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8003366:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800336e:	4b32      	ldr	r3, [pc, #200]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003372:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337a:	492f      	ldr	r1, [pc, #188]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	654b      	str	r3, [r1, #84]	; 0x54
 8003380:	e001      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
 8003384:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d037      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003396:	2b05      	cmp	r3, #5
 8003398:	d820      	bhi.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x860>
 800339a:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800339c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a0:	080033e3 	.word	0x080033e3
 80033a4:	080033b9 	.word	0x080033b9
 80033a8:	080033cb 	.word	0x080033cb
 80033ac:	080033e3 	.word	0x080033e3
 80033b0:	080033e3 	.word	0x080033e3
 80033b4:	080033e3 	.word	0x080033e3
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	2101      	movs	r1, #1
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fd96 	bl	8003ef0 <RCCEx_PLL2_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033c8:	e00c      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	3324      	adds	r3, #36	; 0x24
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 fe3f 	bl	8004054 <RCCEx_PLL3_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80033da:	e003      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	75fb      	strb	r3, [r7, #23]
      break;
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80033e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033ea:	4b13      	ldr	r3, [pc, #76]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	f023 0207 	bic.w	r2, r3, #7
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	4910      	ldr	r1, [pc, #64]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	654b      	str	r3, [r1, #84]	; 0x54
 80033fc:	e001      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d040      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003414:	2b05      	cmp	r3, #5
 8003416:	d827      	bhi.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	0800346f 	.word	0x0800346f
 8003424:	08003445 	.word	0x08003445
 8003428:	08003457 	.word	0x08003457
 800342c:	0800346f 	.word	0x0800346f
 8003430:	0800346f 	.word	0x0800346f
 8003434:	0800346f 	.word	0x0800346f
 8003438:	58024400 	.word	0x58024400
 800343c:	58024800 	.word	0x58024800
 8003440:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3304      	adds	r3, #4
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fd50 	bl	8003ef0 <RCCEx_PLL2_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003454:	e00c      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3324      	adds	r3, #36	; 0x24
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f000 fdf9 	bl	8004054 <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003466:	e003      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
      break;
 800346c:	e000      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800346e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003470:	7dfb      	ldrb	r3, [r7, #23]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003476:	4bb3      	ldr	r3, [pc, #716]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347a:	f023 0207 	bic.w	r2, r3, #7
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	49af      	ldr	r1, [pc, #700]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003486:	4313      	orrs	r3, r2
 8003488:	658b      	str	r3, [r1, #88]	; 0x58
 800348a:	e001      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d044      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a6:	d01b      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80034a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ac:	d805      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d022      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80034b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b6:	d00a      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x952>
 80034b8:	e01b      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80034ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034be:	d01d      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x980>
 80034c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034c4:	d01c      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80034c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034ca:	d01b      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80034cc:	e011      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fd0b 	bl	8003ef0 <RCCEx_PLL2_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034de:	e012      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3324      	adds	r3, #36	; 0x24
 80034e4:	2102      	movs	r1, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fdb4 	bl	8004054 <RCCEx_PLL3_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80034f0:	e009      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
      break;
 80034f6:	e006      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80034f8:	bf00      	nop
 80034fa:	e004      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80034fc:	bf00      	nop
 80034fe:	e002      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8003504:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800350c:	4b8d      	ldr	r3, [pc, #564]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800351a:	498a      	ldr	r1, [pc, #552]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800351c:	4313      	orrs	r3, r2
 800351e:	654b      	str	r3, [r1, #84]	; 0x54
 8003520:	e001      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d044      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800353c:	d01b      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800353e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003542:	d805      	bhi.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003544:	2b00      	cmp	r3, #0
 8003546:	d022      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800354e:	e01b      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003554:	d01d      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003556:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800355a:	d01c      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800355c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003560:	d01b      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003562:	e011      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fcc0 	bl	8003ef0 <RCCEx_PLL2_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003574:	e012      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3324      	adds	r3, #36	; 0x24
 800357a:	2102      	movs	r1, #2
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fd69 	bl	8004054 <RCCEx_PLL3_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003586:	e009      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	75fb      	strb	r3, [r7, #23]
      break;
 800358c:	e006      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800358e:	bf00      	nop
 8003590:	e004      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003592:	bf00      	nop
 8003594:	e002      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800359a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035a2:	4b68      	ldr	r3, [pc, #416]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b0:	4964      	ldr	r1, [pc, #400]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	658b      	str	r3, [r1, #88]	; 0x58
 80035b6:	e001      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d044      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d2:	d01b      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80035d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035d8:	d805      	bhi.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d022      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80035de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035e2:	d00a      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80035e4:	e01b      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80035e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ea:	d01d      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80035ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80035f0:	d01c      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80035f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80035f6:	d01b      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80035f8:	e011      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fc75 	bl	8003ef0 <RCCEx_PLL2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800360a:	e012      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3324      	adds	r3, #36	; 0x24
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fd1e 	bl	8004054 <RCCEx_PLL3_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800361c:	e009      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
      break;
 8003622:	e006      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003624:	bf00      	nop
 8003626:	e004      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003628:	bf00      	nop
 800362a:	e002      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800362c:	bf00      	nop
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003638:	4b42      	ldr	r3, [pc, #264]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003646:	493f      	ldr	r1, [pc, #252]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003648:	4313      	orrs	r3, r2
 800364a:	658b      	str	r3, [r1, #88]	; 0x58
 800364c:	e001      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01b      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003668:	d10b      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3324      	adds	r3, #36	; 0x24
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fcef 	bl	8004054 <RCCEx_PLL3_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00c      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	75bb      	strb	r3, [r7, #22]
 8003680:	e009      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003682:	4b30      	ldr	r3, [pc, #192]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003686:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003690:	492c      	ldr	r1, [pc, #176]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003692:	4313      	orrs	r3, r2
 8003694:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01b      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ac:	d10b      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3324      	adds	r3, #36	; 0x24
 80036b2:	2102      	movs	r1, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fccd 	bl	8004054 <RCCEx_PLL3_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00c      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75bb      	strb	r3, [r7, #22]
 80036c4:	e009      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d4:	491b      	ldr	r1, [pc, #108]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d032      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80036ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f0:	d00d      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80036f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036f6:	d016      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d111      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	2100      	movs	r1, #0
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fbf4 	bl	8003ef0 <RCCEx_PLL2_Config>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800370c:	e00c      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3324      	adds	r3, #36	; 0x24
 8003712:	2102      	movs	r1, #2
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fc9d 	bl	8004054 <RCCEx_PLL3_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800371e:	e003      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	75fb      	strb	r3, [r7, #23]
      break;
 8003724:	e000      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8003726:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003728:	7dfb      	ldrb	r3, [r7, #23]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800373c:	4901      	ldr	r1, [pc, #4]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800373e:	4313      	orrs	r3, r2
 8003740:	658b      	str	r3, [r1, #88]	; 0x58
 8003742:	e003      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8003744:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003748:	7dfb      	ldrb	r3, [r7, #23]
 800374a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d02f      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800375e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003762:	d00c      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8003764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003768:	d015      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800376a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376e:	d10f      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003770:	4b79      	ldr	r3, [pc, #484]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	4a78      	ldr	r2, [pc, #480]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800377c:	e00c      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3324      	adds	r3, #36	; 0x24
 8003782:	2101      	movs	r1, #1
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fc65 	bl	8004054 <RCCEx_PLL3_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800378e:	e003      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	75fb      	strb	r3, [r7, #23]
      break;
 8003794:	e000      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8003796:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800379e:	4b6e      	ldr	r3, [pc, #440]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ac:	496a      	ldr	r1, [pc, #424]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	654b      	str	r3, [r1, #84]	; 0x54
 80037b2:	e001      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d029      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d007      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80037d2:	e00f      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d4:	4b60      	ldr	r3, [pc, #384]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	4a5f      	ldr	r2, [pc, #380]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80037da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037e0:	e00b      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	2102      	movs	r1, #2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fb81 	bl	8003ef0 <RCCEx_PLL2_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80037f2:	e002      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	75fb      	strb	r3, [r7, #23]
      break;
 80037f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003800:	4b55      	ldr	r3, [pc, #340]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380c:	4952      	ldr	r1, [pc, #328]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3324      	adds	r3, #36	; 0x24
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fc12 	bl	8004054 <RCCEx_PLL3_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d02f      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384e:	d00c      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8003850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003854:	d802      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d011      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800385a:	e00d      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d00f      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003866:	d00e      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8003868:	e006      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386a:	4b3b      	ldr	r3, [pc, #236]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	4a3a      	ldr	r2, [pc, #232]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003874:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003876:	e007      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	75fb      	strb	r3, [r7, #23]
      break;
 800387c:	e004      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800387e:	bf00      	nop
 8003880:	e002      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8003882:	bf00      	nop
 8003884:	e000      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8003886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800388e:	4b32      	ldr	r3, [pc, #200]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800389a:	492f      	ldr	r1, [pc, #188]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	654b      	str	r3, [r1, #84]	; 0x54
 80038a0:	e001      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038b2:	4b29      	ldr	r3, [pc, #164]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	4926      	ldr	r1, [pc, #152]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038d0:	4b21      	ldr	r3, [pc, #132]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038de:	491e      	ldr	r1, [pc, #120]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038f0:	4b19      	ldr	r3, [pc, #100]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fc:	4916      	ldr	r1, [pc, #88]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00d      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	4a11      	ldr	r2, [pc, #68]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003918:	6113      	str	r3, [r2, #16]
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003924:	490c      	ldr	r1, [pc, #48]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	da08      	bge.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800393e:	4906      	ldr	r1, [pc, #24]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003944:	7dbb      	ldrb	r3, [r7, #22]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
}
 8003950:	4618      	mov	r0, r3
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	58024400 	.word	0x58024400

0800395c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003960:	f7ff f8c4 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8003964:	4601      	mov	r1, r0
 8003966:	4b06      	ldr	r3, [pc, #24]	; (8003980 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003972:	5cd3      	ldrb	r3, [r2, r3]
 8003974:	f003 031f 	and.w	r3, r3, #31
 8003978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	58024400 	.word	0x58024400
 8003984:	08010e30 	.word	0x08010e30

08003988 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003990:	4b9d      	ldr	r3, [pc, #628]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 800399a:	4b9b      	ldr	r3, [pc, #620]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	0b1b      	lsrs	r3, r3, #12
 80039a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a4:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 80039a6:	4b98      	ldr	r3, [pc, #608]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80039b0:	4b95      	ldr	r3, [pc, #596]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b4:	08db      	lsrs	r3, r3, #3
 80039b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	fb02 f303 	mul.w	r3, r2, r3
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 810a 	beq.w	8003be8 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d05a      	beq.n	8003a90 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d302      	bcc.n	80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d078      	beq.n	8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 80039e2:	e099      	b.n	8003b18 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039e4:	4b88      	ldr	r3, [pc, #544]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0320 	and.w	r3, r3, #32
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d02d      	beq.n	8003a4c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039f0:	4b85      	ldr	r3, [pc, #532]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	08db      	lsrs	r3, r3, #3
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	4a84      	ldr	r2, [pc, #528]	; (8003c0c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003a00:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	ee07 3a90 	vmov	s15, r3
 8003a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b7b      	ldr	r3, [pc, #492]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003a4a:	e087      	b.n	8003b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c14 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8003a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5e:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a8e:	e065      	b.n	8003b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aa2:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ab6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ace:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ad2:	e043      	b.n	8003b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ade:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8003ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ae6:	4b48      	ldr	r3, [pc, #288]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003afa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b16:	e021      	b.n	8003b5c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8003b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b2a:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c10 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8003b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003b5c:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	0a5b      	lsrs	r3, r3, #9
 8003b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b82:	ee17 2a90 	vmov	r2, s15
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ba0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ba4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ba8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bb0:	ee17 2a90 	vmov	r2, s15
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003bb8:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	0e1b      	lsrs	r3, r3, #24
 8003bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bde:	ee17 2a90 	vmov	r2, s15
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003be6:	e008      	b.n	8003bfa <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	609a      	str	r2, [r3, #8]
}
 8003bfa:	bf00      	nop
 8003bfc:	3724      	adds	r7, #36	; 0x24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	58024400 	.word	0x58024400
 8003c0c:	03d09000 	.word	0x03d09000
 8003c10:	46000000 	.word	0x46000000
 8003c14:	4c742400 	.word	0x4c742400
 8003c18:	4a742400 	.word	0x4a742400
 8003c1c:	4af42400 	.word	0x4af42400

08003c20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b089      	sub	sp, #36	; 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c28:	4b9d      	ldr	r3, [pc, #628]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003c32:	4b9b      	ldr	r3, [pc, #620]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	0d1b      	lsrs	r3, r3, #20
 8003c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c3c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8003c3e:	4b98      	ldr	r3, [pc, #608]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003c48:	4b95      	ldr	r3, [pc, #596]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	08db      	lsrs	r3, r3, #3
 8003c4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	fb02 f303 	mul.w	r3, r2, r3
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 810a 	beq.w	8003e80 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d05a      	beq.n	8003d28 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d302      	bcc.n	8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d078      	beq.n	8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8003c7a:	e099      	b.n	8003db0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c7c:	4b88      	ldr	r3, [pc, #544]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0320 	and.w	r3, r3, #32
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d02d      	beq.n	8003ce4 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c88:	4b85      	ldr	r3, [pc, #532]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	08db      	lsrs	r3, r3, #3
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	4a84      	ldr	r2, [pc, #528]	; (8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
 8003c98:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	ee07 3a90 	vmov	s15, r3
 8003ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb2:	4b7b      	ldr	r3, [pc, #492]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003ce2:	e087      	b.n	8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf6:	4b6a      	ldr	r3, [pc, #424]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfe:	ee07 3a90 	vmov	s15, r3
 8003d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d26:	e065      	b.n	8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d3a:	4b59      	ldr	r3, [pc, #356]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d42:	ee07 3a90 	vmov	s15, r3
 8003d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d6a:	e043      	b.n	8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8003d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7e:	4b48      	ldr	r3, [pc, #288]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003daa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003dae:	e021      	b.n	8003df4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8003dbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dc2:	4b37      	ldr	r3, [pc, #220]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003dda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003de2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003de6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003df2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003df4:	4b2a      	ldr	r3, [pc, #168]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	0a5b      	lsrs	r3, r3, #9
 8003dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e1a:	ee17 2a90 	vmov	r2, s15
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003e22:	4b1f      	ldr	r3, [pc, #124]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	0c1b      	lsrs	r3, r3, #16
 8003e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e2c:	ee07 3a90 	vmov	s15, r3
 8003e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e48:	ee17 2a90 	vmov	r2, s15
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003e50:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	0e1b      	lsrs	r3, r3, #24
 8003e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e76:	ee17 2a90 	vmov	r2, s15
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e7e:	e008      	b.n	8003e92 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	609a      	str	r2, [r3, #8]
}
 8003e92:	bf00      	nop
 8003e94:	3724      	adds	r7, #36	; 0x24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	03d09000 	.word	0x03d09000
 8003ea8:	46000000 	.word	0x46000000
 8003eac:	4c742400 	.word	0x4c742400
 8003eb0:	4a742400 	.word	0x4a742400
 8003eb4:	4af42400 	.word	0x4af42400

08003eb8 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ebc:	f7fe fca4 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8003ec0:	4601      	mov	r1, r0
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	4a06      	ldr	r2, [pc, #24]	; (8003ee8 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8003ece:	5cd3      	ldrb	r3, [r2, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa21 f303 	lsr.w	r3, r1, r3
 8003ed8:	4a04      	ldr	r2, [pc, #16]	; (8003eec <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003eda:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003edc:	4b03      	ldr	r3, [pc, #12]	; (8003eec <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003ede:	681b      	ldr	r3, [r3, #0]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	58024400 	.word	0x58024400
 8003ee8:	08010e30 	.word	0x08010e30
 8003eec:	2400009c 	.word	0x2400009c

08003ef0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003efe:	4b53      	ldr	r3, [pc, #332]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d101      	bne.n	8003f0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e099      	b.n	8004042 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f0e:	4b4f      	ldr	r3, [pc, #316]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a4e      	ldr	r2, [pc, #312]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1a:	f7fc fc3b 	bl	8000794 <HAL_GetTick>
 8003f1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f22:	f7fc fc37 	bl	8000794 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e086      	b.n	8004042 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f34:	4b45      	ldr	r3, [pc, #276]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	031b      	lsls	r3, r3, #12
 8003f4e:	493f      	ldr	r1, [pc, #252]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	628b      	str	r3, [r1, #40]	; 0x28
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	025b      	lsls	r3, r3, #9
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	041b      	lsls	r3, r3, #16
 8003f72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	061b      	lsls	r3, r3, #24
 8003f80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f84:	4931      	ldr	r1, [pc, #196]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f8a:	4b30      	ldr	r3, [pc, #192]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	492d      	ldr	r1, [pc, #180]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	f023 0220 	bic.w	r2, r3, #32
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	4928      	ldr	r1, [pc, #160]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fae:	4b27      	ldr	r3, [pc, #156]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	4a26      	ldr	r2, [pc, #152]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	f023 0310 	bic.w	r3, r3, #16
 8003fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <RCCEx_PLL2_Config+0x160>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	69d2      	ldr	r2, [r2, #28]
 8003fc6:	00d2      	lsls	r2, r2, #3
 8003fc8:	4920      	ldr	r1, [pc, #128]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fce:	4b1f      	ldr	r3, [pc, #124]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	4a1e      	ldr	r2, [pc, #120]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003fd4:	f043 0310 	orr.w	r3, r3, #16
 8003fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003fe6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fec:	e00f      	b.n	800400e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d106      	bne.n	8004002 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	4a14      	ldr	r2, [pc, #80]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8003ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004000:	e005      	b.n	800400e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004002:	4b12      	ldr	r3, [pc, #72]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	4a11      	ldr	r2, [pc, #68]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8004008:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800400c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800400e:	4b0f      	ldr	r3, [pc, #60]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a0e      	ldr	r2, [pc, #56]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8004014:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401a:	f7fc fbbb 	bl	8000794 <HAL_GetTick>
 800401e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004020:	e008      	b.n	8004034 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004022:	f7fc fbb7 	bl	8000794 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e006      	b.n	8004042 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <RCCEx_PLL2_Config+0x15c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004040:	7bfb      	ldrb	r3, [r7, #15]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	58024400 	.word	0x58024400
 8004050:	ffff0007 	.word	0xffff0007

08004054 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004062:	4b53      	ldr	r3, [pc, #332]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b03      	cmp	r3, #3
 800406c:	d101      	bne.n	8004072 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e099      	b.n	80041a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004072:	4b4f      	ldr	r3, [pc, #316]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a4e      	ldr	r2, [pc, #312]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407e:	f7fc fb89 	bl	8000794 <HAL_GetTick>
 8004082:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004084:	e008      	b.n	8004098 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004086:	f7fc fb85 	bl	8000794 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e086      	b.n	80041a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004098:	4b45      	ldr	r3, [pc, #276]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040a4:	4b42      	ldr	r3, [pc, #264]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	051b      	lsls	r3, r3, #20
 80040b2:	493f      	ldr	r1, [pc, #252]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	628b      	str	r3, [r1, #40]	; 0x28
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	3b01      	subs	r3, #1
 80040be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	025b      	lsls	r3, r3, #9
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040e8:	4931      	ldr	r1, [pc, #196]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	492d      	ldr	r1, [pc, #180]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004100:	4b2b      	ldr	r3, [pc, #172]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	4928      	ldr	r1, [pc, #160]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 800410e:	4313      	orrs	r3, r2
 8004110:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004112:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	4a26      	ldr	r2, [pc, #152]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800411c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800411e:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004120:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <RCCEx_PLL3_Config+0x160>)
 8004124:	4013      	ands	r3, r2
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	69d2      	ldr	r2, [r2, #28]
 800412a:	00d2      	lsls	r2, r2, #3
 800412c:	4920      	ldr	r1, [pc, #128]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 800412e:	4313      	orrs	r3, r2
 8004130:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004132:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800413c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004144:	4b1a      	ldr	r3, [pc, #104]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 800414a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800414e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004150:	e00f      	b.n	8004172 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d106      	bne.n	8004166 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004158:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 800415a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 800415e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004164:	e005      	b.n	8004172 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004166:	4b12      	ldr	r3, [pc, #72]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 800416c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004170:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004172:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a0e      	ldr	r2, [pc, #56]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417e:	f7fc fb09 	bl	8000794 <HAL_GetTick>
 8004182:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004184:	e008      	b.n	8004198 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004186:	f7fc fb05 	bl	8000794 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e006      	b.n	80041a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <RCCEx_PLL3_Config+0x15c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0f0      	beq.n	8004186 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	58024400 	.word	0x58024400
 80041b4:	ffff0007 	.word	0xffff0007

080041b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e01d      	b.n	8004206 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f008 fd8e 	bl	800cd00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f000 f986 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_TIM_Base_Start_IT+0x50>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b06      	cmp	r3, #6
 8004238:	d00b      	beq.n	8004252 <HAL_TIM_Base_Start_IT+0x42>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d007      	beq.n	8004252 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	00010007 	.word	0x00010007

08004264 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b02      	cmp	r3, #2
 8004278:	d122      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	2b02      	cmp	r3, #2
 8004286:	d11b      	bne.n	80042c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f06f 0202 	mvn.w	r2, #2
 8004290:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f90f 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 80042ac:	e005      	b.n	80042ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f901 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f912 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f003 0304 	and.w	r3, r3, #4
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d122      	bne.n	8004314 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d11b      	bne.n	8004314 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0204 	mvn.w	r2, #4
 80042e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2202      	movs	r2, #2
 80042ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8e5 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8d7 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f8e8 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b08      	cmp	r3, #8
 8004320:	d122      	bne.n	8004368 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b08      	cmp	r3, #8
 800432e:	d11b      	bne.n	8004368 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0208 	mvn.w	r2, #8
 8004338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2204      	movs	r2, #4
 800433e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8bb 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f8ad 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f8be 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b10      	cmp	r3, #16
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b10      	cmp	r3, #16
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0210 	mvn.w	r2, #16
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2208      	movs	r2, #8
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f891 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f883 	bl	80044b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f894 	bl	80044de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d10e      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d107      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0201 	mvn.w	r2, #1
 80043e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f85d 	bl	80044a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f2:	2b80      	cmp	r3, #128	; 0x80
 80043f4:	d10e      	bne.n	8004414 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004400:	2b80      	cmp	r3, #128	; 0x80
 8004402:	d107      	bne.n	8004414 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f97a 	bl	8004708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004422:	d10e      	bne.n	8004442 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b80      	cmp	r3, #128	; 0x80
 8004430:	d107      	bne.n	8004442 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800443a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f96d 	bl	800471c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d10e      	bne.n	800446e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445a:	2b40      	cmp	r3, #64	; 0x40
 800445c:	d107      	bne.n	800446e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f842 	bl	80044f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b20      	cmp	r3, #32
 800447a:	d10e      	bne.n	800449a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b20      	cmp	r3, #32
 8004488:	d107      	bne.n	800449a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f06f 0220 	mvn.w	r2, #32
 8004492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f92d 	bl	80046f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a40      	ldr	r2, [pc, #256]	; (800461c <TIM_Base_SetConfig+0x114>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d013      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004526:	d00f      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a3d      	ldr	r2, [pc, #244]	; (8004620 <TIM_Base_SetConfig+0x118>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00b      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a3c      	ldr	r2, [pc, #240]	; (8004624 <TIM_Base_SetConfig+0x11c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d007      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a3b      	ldr	r2, [pc, #236]	; (8004628 <TIM_Base_SetConfig+0x120>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3a      	ldr	r2, [pc, #232]	; (800462c <TIM_Base_SetConfig+0x124>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d108      	bne.n	800455a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800454e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2f      	ldr	r2, [pc, #188]	; (800461c <TIM_Base_SetConfig+0x114>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01f      	beq.n	80045a2 <TIM_Base_SetConfig+0x9a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d01b      	beq.n	80045a2 <TIM_Base_SetConfig+0x9a>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a2c      	ldr	r2, [pc, #176]	; (8004620 <TIM_Base_SetConfig+0x118>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d017      	beq.n	80045a2 <TIM_Base_SetConfig+0x9a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <TIM_Base_SetConfig+0x11c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d013      	beq.n	80045a2 <TIM_Base_SetConfig+0x9a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2a      	ldr	r2, [pc, #168]	; (8004628 <TIM_Base_SetConfig+0x120>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d00f      	beq.n	80045a2 <TIM_Base_SetConfig+0x9a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a29      	ldr	r2, [pc, #164]	; (800462c <TIM_Base_SetConfig+0x124>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00b      	beq.n	80045a2 <TIM_Base_SetConfig+0x9a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a28      	ldr	r2, [pc, #160]	; (8004630 <TIM_Base_SetConfig+0x128>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <TIM_Base_SetConfig+0x9a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a27      	ldr	r2, [pc, #156]	; (8004634 <TIM_Base_SetConfig+0x12c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d003      	beq.n	80045a2 <TIM_Base_SetConfig+0x9a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a26      	ldr	r2, [pc, #152]	; (8004638 <TIM_Base_SetConfig+0x130>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d108      	bne.n	80045b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a10      	ldr	r2, [pc, #64]	; (800461c <TIM_Base_SetConfig+0x114>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00f      	beq.n	8004600 <TIM_Base_SetConfig+0xf8>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a12      	ldr	r2, [pc, #72]	; (800462c <TIM_Base_SetConfig+0x124>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00b      	beq.n	8004600 <TIM_Base_SetConfig+0xf8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a11      	ldr	r2, [pc, #68]	; (8004630 <TIM_Base_SetConfig+0x128>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d007      	beq.n	8004600 <TIM_Base_SetConfig+0xf8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a10      	ldr	r2, [pc, #64]	; (8004634 <TIM_Base_SetConfig+0x12c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d003      	beq.n	8004600 <TIM_Base_SetConfig+0xf8>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a0f      	ldr	r2, [pc, #60]	; (8004638 <TIM_Base_SetConfig+0x130>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d103      	bne.n	8004608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	615a      	str	r2, [r3, #20]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40010400 	.word	0x40010400
 8004630:	40014000 	.word	0x40014000
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800

0800463c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e045      	b.n	80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1c      	ldr	r2, [pc, #112]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d108      	bne.n	800469a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800468e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046b2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	40010000 	.word	0x40010000
 80046f0:	40010400 	.word	0x40010400

080046f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e042      	b.n	80047c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f008 fafb 	bl	800cd50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2224      	movs	r2, #36	; 0x24
 800475e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 fba8 	bl	8004ec8 <UART_SetConfig>
 8004778:	4603      	mov	r3, r0
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e022      	b.n	80047c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f002 fd16 	bl	80071bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800479e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047ae:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0201 	orr.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f002 fd9d 	bl	8007300 <UART_CheckIdleState>
 80047c6:	4603      	mov	r3, r0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08a      	sub	sp, #40	; 0x28
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4613      	mov	r3, r2
 80047de:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	f040 8083 	bne.w	80048f2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <HAL_UART_Transmit+0x28>
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e07b      	b.n	80048f4 <HAL_UART_Transmit+0x124>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_UART_Transmit+0x3a>
 8004806:	2302      	movs	r3, #2
 8004808:	e074      	b.n	80048f4 <HAL_UART_Transmit+0x124>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2221      	movs	r2, #33	; 0x21
 800481e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004822:	f7fb ffb7 	bl	8000794 <HAL_GetTick>
 8004826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	d108      	bne.n	8004854 <HAL_UART_Transmit+0x84>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	e003      	b.n	800485c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004858:	2300      	movs	r3, #0
 800485a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800485c:	e02c      	b.n	80048b8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2200      	movs	r2, #0
 8004866:	2180      	movs	r1, #128	; 0x80
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f002 fd91 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e03d      	b.n	80048f4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10b      	bne.n	8004896 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	3302      	adds	r3, #2
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	e007      	b.n	80048a6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	3301      	adds	r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1cc      	bne.n	800485e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2200      	movs	r2, #0
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f002 fd5e 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e00a      	b.n	80048f4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004910:	2b20      	cmp	r3, #32
 8004912:	f040 80bc 	bne.w	8004a8e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_UART_Receive_IT+0x26>
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e0b4      	b.n	8004a90 <HAL_UART_Receive_IT+0x194>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800492c:	2b01      	cmp	r3, #1
 800492e:	d101      	bne.n	8004934 <HAL_UART_Receive_IT+0x38>
 8004930:	2302      	movs	r3, #2
 8004932:	e0ad      	b.n	8004a90 <HAL_UART_Receive_IT+0x194>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	88fa      	ldrh	r2, [r7, #6]
 800494e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004960:	d10e      	bne.n	8004980 <HAL_UART_Receive_IT+0x84>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <HAL_UART_Receive_IT+0x7a>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004970:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004974:	e02d      	b.n	80049d2 <HAL_UART_Receive_IT+0xd6>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	22ff      	movs	r2, #255	; 0xff
 800497a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800497e:	e028      	b.n	80049d2 <HAL_UART_Receive_IT+0xd6>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10d      	bne.n	80049a4 <HAL_UART_Receive_IT+0xa8>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d104      	bne.n	800499a <HAL_UART_Receive_IT+0x9e>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	22ff      	movs	r2, #255	; 0xff
 8004994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004998:	e01b      	b.n	80049d2 <HAL_UART_Receive_IT+0xd6>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	227f      	movs	r2, #127	; 0x7f
 800499e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049a2:	e016      	b.n	80049d2 <HAL_UART_Receive_IT+0xd6>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ac:	d10d      	bne.n	80049ca <HAL_UART_Receive_IT+0xce>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <HAL_UART_Receive_IT+0xc4>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	227f      	movs	r2, #127	; 0x7f
 80049ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049be:	e008      	b.n	80049d2 <HAL_UART_Receive_IT+0xd6>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	223f      	movs	r2, #63	; 0x3f
 80049c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80049c8:	e003      	b.n	80049d2 <HAL_UART_Receive_IT+0xd6>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2222      	movs	r2, #34	; 0x22
 80049de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fa:	d12a      	bne.n	8004a52 <HAL_UART_Receive_IT+0x156>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a02:	88fa      	ldrh	r2, [r7, #6]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d324      	bcc.n	8004a52 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a10:	d107      	bne.n	8004a22 <HAL_UART_Receive_IT+0x126>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <HAL_UART_Receive_IT+0x1a0>)
 8004a1e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a20:	e002      	b.n	8004a28 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <HAL_UART_Receive_IT+0x1a4>)
 8004a26:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	e01b      	b.n	8004a8a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5a:	d107      	bne.n	8004a6c <HAL_UART_Receive_IT+0x170>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a0f      	ldr	r2, [pc, #60]	; (8004aa4 <HAL_UART_Receive_IT+0x1a8>)
 8004a68:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a6a:	e002      	b.n	8004a72 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a0e      	ldr	r2, [pc, #56]	; (8004aa8 <HAL_UART_Receive_IT+0x1ac>)
 8004a70:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004a88:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e000      	b.n	8004a90 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
  }
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	08007851 	.word	0x08007851
 8004aa0:	08007749 	.word	0x08007749
 8004aa4:	0800769f 	.word	0x0800769f
 8004aa8:	080075f5 	.word	0x080075f5

08004aac <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ac0:	2b20      	cmp	r3, #32
 8004ac2:	d168      	bne.n	8004b96 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_UART_Transmit_DMA+0x24>
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e061      	b.n	8004b98 <HAL_UART_Transmit_DMA+0xec>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_UART_Transmit_DMA+0x36>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e05a      	b.n	8004b98 <HAL_UART_Transmit_DMA+0xec>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2221      	movs	r2, #33	; 0x21
 8004b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02c      	beq.n	8004b72 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <HAL_UART_Transmit_DMA+0xf4>)
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b24:	4a1f      	ldr	r2, [pc, #124]	; (8004ba4 <HAL_UART_Transmit_DMA+0xf8>)
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ba8 <HAL_UART_Transmit_DMA+0xfc>)
 8004b2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b34:	2200      	movs	r2, #0
 8004b36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b40:	4619      	mov	r1, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3328      	adds	r3, #40	; 0x28
 8004b48:	461a      	mov	r2, r3
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	f7fb ff6c 	bl	8000a28 <HAL_DMA_Start_IT>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00d      	beq.n	8004b72 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2210      	movs	r2, #16
 8004b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e012      	b.n	8004b98 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2240      	movs	r2, #64	; 0x40
 8004b78:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b90:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	080074a9 	.word	0x080074a9
 8004ba4:	080074f9 	.word	0x080074f9
 8004ba8:	08007515 	.word	0x08007515

08004bac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d118      	bne.n	8004c0c <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d013      	beq.n	8004c0c <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d104      	bne.n	8004bf8 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d009      	beq.n	8004c0c <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 812e 	beq.w	8004e5e <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
      }
      return;
 8004c0a:	e128      	b.n	8004e5e <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80d1 	beq.w	8004db6 <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4b96      	ldr	r3, [pc, #600]	; (8004e70 <HAL_UART_IRQHandler+0x2c4>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d105      	bne.n	8004c2a <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80c6 	beq.w	8004db6 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d010      	beq.n	8004c56 <HAL_UART_IRQHandler+0xaa>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2201      	movs	r2, #1
 8004c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	f043 0201 	orr.w	r2, r3, #1
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d010      	beq.n	8004c82 <HAL_UART_IRQHandler+0xd6>
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00b      	beq.n	8004c82 <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c78:	f043 0204 	orr.w	r2, r3, #4
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d010      	beq.n	8004cae <HAL_UART_IRQHandler+0x102>
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca4:	f043 0202 	orr.w	r2, r3, #2
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d104      	bne.n	8004ccc <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <HAL_UART_IRQHandler+0x2c4>)
 8004cc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cda:	f043 0208 	orr.w	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80b9 	beq.w	8004e62 <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d011      	beq.n	8004d1e <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d30:	2b40      	cmp	r3, #64	; 0x40
 8004d32:	d004      	beq.n	8004d3e <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d031      	beq.n	8004da2 <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f002 fb8e 	bl	8007460 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d123      	bne.n	8004d9a <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d60:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d013      	beq.n	8004d92 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d6e:	4a41      	ldr	r2, [pc, #260]	; (8004e74 <HAL_UART_IRQHandler+0x2c8>)
 8004d70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fc f832 	bl	8000de0 <HAL_DMA_Abort_IT>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d017      	beq.n	8004db2 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	e00f      	b.n	8004db2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 f88e 	bl	8004eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	e00b      	b.n	8004db2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f88a 	bl	8004eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da0:	e007      	b.n	8004db2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f886 	bl	8004eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004db0:	e057      	b.n	8004e62 <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db2:	bf00      	nop
    return;
 8004db4:	e055      	b.n	8004e62 <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00d      	beq.n	8004ddc <HAL_UART_IRQHandler+0x230>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f002 fdbf 	bl	8007958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dda:	e045      	b.n	8004e68 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d012      	beq.n	8004e0c <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d031      	beq.n	8004e66 <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
    }
    return;
 8004e0a:	e02c      	b.n	8004e66 <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_UART_IRQHandler+0x27c>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f002 fbcd 	bl	80075c0 <UART_EndTransmit_IT>
    return;
 8004e26:	e01f      	b.n	8004e68 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_UART_IRQHandler+0x298>
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d003      	beq.n	8004e44 <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f002 fd9f 	bl	8007980 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e42:	e011      	b.n	8004e68 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00c      	beq.n	8004e68 <HAL_UART_IRQHandler+0x2bc>
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da09      	bge.n	8004e68 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f002 fd89 	bl	800796c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e5a:	bf00      	nop
 8004e5c:	e004      	b.n	8004e68 <HAL_UART_IRQHandler+0x2bc>
      return;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <HAL_UART_IRQHandler+0x2bc>
    return;
 8004e66:	bf00      	nop
  }
}
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	10000001 	.word	0x10000001
 8004e74:	08007595 	.word	0x08007595

08004e78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004ecc:	b08e      	sub	sp, #56	; 0x38
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004efe:	4313      	orrs	r3, r2
 8004f00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4bc1      	ldr	r3, [pc, #772]	; (8005210 <UART_SetConfig+0x348>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f12:	430b      	orrs	r3, r1
 8004f14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4ab7      	ldr	r2, [pc, #732]	; (8005214 <UART_SetConfig+0x34c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f42:	4313      	orrs	r3, r2
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	4bb2      	ldr	r3, [pc, #712]	; (8005218 <UART_SetConfig+0x350>)
 8004f4e:	4013      	ands	r3, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f56:	430b      	orrs	r3, r1
 8004f58:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f023 010f 	bic.w	r1, r3, #15
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4aa9      	ldr	r2, [pc, #676]	; (800521c <UART_SetConfig+0x354>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d177      	bne.n	800506a <UART_SetConfig+0x1a2>
 8004f7a:	4ba9      	ldr	r3, [pc, #676]	; (8005220 <UART_SetConfig+0x358>)
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f82:	2b28      	cmp	r3, #40	; 0x28
 8004f84:	d86c      	bhi.n	8005060 <UART_SetConfig+0x198>
 8004f86:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <UART_SetConfig+0xc4>)
 8004f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8c:	08005031 	.word	0x08005031
 8004f90:	08005061 	.word	0x08005061
 8004f94:	08005061 	.word	0x08005061
 8004f98:	08005061 	.word	0x08005061
 8004f9c:	08005061 	.word	0x08005061
 8004fa0:	08005061 	.word	0x08005061
 8004fa4:	08005061 	.word	0x08005061
 8004fa8:	08005061 	.word	0x08005061
 8004fac:	08005039 	.word	0x08005039
 8004fb0:	08005061 	.word	0x08005061
 8004fb4:	08005061 	.word	0x08005061
 8004fb8:	08005061 	.word	0x08005061
 8004fbc:	08005061 	.word	0x08005061
 8004fc0:	08005061 	.word	0x08005061
 8004fc4:	08005061 	.word	0x08005061
 8004fc8:	08005061 	.word	0x08005061
 8004fcc:	08005041 	.word	0x08005041
 8004fd0:	08005061 	.word	0x08005061
 8004fd4:	08005061 	.word	0x08005061
 8004fd8:	08005061 	.word	0x08005061
 8004fdc:	08005061 	.word	0x08005061
 8004fe0:	08005061 	.word	0x08005061
 8004fe4:	08005061 	.word	0x08005061
 8004fe8:	08005061 	.word	0x08005061
 8004fec:	08005049 	.word	0x08005049
 8004ff0:	08005061 	.word	0x08005061
 8004ff4:	08005061 	.word	0x08005061
 8004ff8:	08005061 	.word	0x08005061
 8004ffc:	08005061 	.word	0x08005061
 8005000:	08005061 	.word	0x08005061
 8005004:	08005061 	.word	0x08005061
 8005008:	08005061 	.word	0x08005061
 800500c:	08005051 	.word	0x08005051
 8005010:	08005061 	.word	0x08005061
 8005014:	08005061 	.word	0x08005061
 8005018:	08005061 	.word	0x08005061
 800501c:	08005061 	.word	0x08005061
 8005020:	08005061 	.word	0x08005061
 8005024:	08005061 	.word	0x08005061
 8005028:	08005061 	.word	0x08005061
 800502c:	08005059 	.word	0x08005059
 8005030:	2301      	movs	r3, #1
 8005032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005036:	e233      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005038:	2304      	movs	r3, #4
 800503a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503e:	e22f      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005040:	2308      	movs	r3, #8
 8005042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005046:	e22b      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005048:	2310      	movs	r3, #16
 800504a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504e:	e227      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005050:	2320      	movs	r3, #32
 8005052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005056:	e223      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005058:	2340      	movs	r3, #64	; 0x40
 800505a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800505e:	e21f      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005066:	bf00      	nop
 8005068:	e21a      	b.n	80054a0 <UART_SetConfig+0x5d8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a6d      	ldr	r2, [pc, #436]	; (8005224 <UART_SetConfig+0x35c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d132      	bne.n	80050da <UART_SetConfig+0x212>
 8005074:	4b6a      	ldr	r3, [pc, #424]	; (8005220 <UART_SetConfig+0x358>)
 8005076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005078:	f003 0307 	and.w	r3, r3, #7
 800507c:	2b05      	cmp	r3, #5
 800507e:	d827      	bhi.n	80050d0 <UART_SetConfig+0x208>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <UART_SetConfig+0x1c0>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050a1 	.word	0x080050a1
 800508c:	080050a9 	.word	0x080050a9
 8005090:	080050b1 	.word	0x080050b1
 8005094:	080050b9 	.word	0x080050b9
 8005098:	080050c1 	.word	0x080050c1
 800509c:	080050c9 	.word	0x080050c9
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050a6:	e1fb      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80050a8:	2304      	movs	r3, #4
 80050aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ae:	e1f7      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80050b0:	2308      	movs	r3, #8
 80050b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050b6:	e1f3      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050be:	e1ef      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80050c0:	2320      	movs	r3, #32
 80050c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050c6:	e1eb      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80050c8:	2340      	movs	r3, #64	; 0x40
 80050ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050ce:	e1e7      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80050d0:	2380      	movs	r3, #128	; 0x80
 80050d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80050d6:	bf00      	nop
 80050d8:	e1e2      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a52      	ldr	r2, [pc, #328]	; (8005228 <UART_SetConfig+0x360>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d132      	bne.n	800514a <UART_SetConfig+0x282>
 80050e4:	4b4e      	ldr	r3, [pc, #312]	; (8005220 <UART_SetConfig+0x358>)
 80050e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	2b05      	cmp	r3, #5
 80050ee:	d827      	bhi.n	8005140 <UART_SetConfig+0x278>
 80050f0:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <UART_SetConfig+0x230>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	08005111 	.word	0x08005111
 80050fc:	08005119 	.word	0x08005119
 8005100:	08005121 	.word	0x08005121
 8005104:	08005129 	.word	0x08005129
 8005108:	08005131 	.word	0x08005131
 800510c:	08005139 	.word	0x08005139
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005116:	e1c3      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005118:	2304      	movs	r3, #4
 800511a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800511e:	e1bf      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005120:	2308      	movs	r3, #8
 8005122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005126:	e1bb      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005128:	2310      	movs	r3, #16
 800512a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800512e:	e1b7      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005130:	2320      	movs	r3, #32
 8005132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005136:	e1b3      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005138:	2340      	movs	r3, #64	; 0x40
 800513a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800513e:	e1af      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005146:	bf00      	nop
 8005148:	e1aa      	b.n	80054a0 <UART_SetConfig+0x5d8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a37      	ldr	r2, [pc, #220]	; (800522c <UART_SetConfig+0x364>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d132      	bne.n	80051ba <UART_SetConfig+0x2f2>
 8005154:	4b32      	ldr	r3, [pc, #200]	; (8005220 <UART_SetConfig+0x358>)
 8005156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	2b05      	cmp	r3, #5
 800515e:	d827      	bhi.n	80051b0 <UART_SetConfig+0x2e8>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <UART_SetConfig+0x2a0>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	08005181 	.word	0x08005181
 800516c:	08005189 	.word	0x08005189
 8005170:	08005191 	.word	0x08005191
 8005174:	08005199 	.word	0x08005199
 8005178:	080051a1 	.word	0x080051a1
 800517c:	080051a9 	.word	0x080051a9
 8005180:	2300      	movs	r3, #0
 8005182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005186:	e18b      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005188:	2304      	movs	r3, #4
 800518a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800518e:	e187      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005190:	2308      	movs	r3, #8
 8005192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005196:	e183      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005198:	2310      	movs	r3, #16
 800519a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800519e:	e17f      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80051a0:	2320      	movs	r3, #32
 80051a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051a6:	e17b      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80051a8:	2340      	movs	r3, #64	; 0x40
 80051aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051ae:	e177      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051b6:	bf00      	nop
 80051b8:	e172      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1c      	ldr	r2, [pc, #112]	; (8005230 <UART_SetConfig+0x368>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d144      	bne.n	800524e <UART_SetConfig+0x386>
 80051c4:	4b16      	ldr	r3, [pc, #88]	; (8005220 <UART_SetConfig+0x358>)
 80051c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	2b05      	cmp	r3, #5
 80051ce:	d839      	bhi.n	8005244 <UART_SetConfig+0x37c>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x310>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051f1 	.word	0x080051f1
 80051dc:	080051f9 	.word	0x080051f9
 80051e0:	08005201 	.word	0x08005201
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005235 	.word	0x08005235
 80051ec:	0800523d 	.word	0x0800523d
 80051f0:	2300      	movs	r3, #0
 80051f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051f6:	e153      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80051f8:	2304      	movs	r3, #4
 80051fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80051fe:	e14f      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005200:	2308      	movs	r3, #8
 8005202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005206:	e14b      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005208:	2310      	movs	r3, #16
 800520a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800520e:	e147      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005210:	cfff69f3 	.word	0xcfff69f3
 8005214:	58000c00 	.word	0x58000c00
 8005218:	11fff4ff 	.word	0x11fff4ff
 800521c:	40011000 	.word	0x40011000
 8005220:	58024400 	.word	0x58024400
 8005224:	40004400 	.word	0x40004400
 8005228:	40004800 	.word	0x40004800
 800522c:	40004c00 	.word	0x40004c00
 8005230:	40005000 	.word	0x40005000
 8005234:	2320      	movs	r3, #32
 8005236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800523a:	e131      	b.n	80054a0 <UART_SetConfig+0x5d8>
 800523c:	2340      	movs	r3, #64	; 0x40
 800523e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005242:	e12d      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800524a:	bf00      	nop
 800524c:	e128      	b.n	80054a0 <UART_SetConfig+0x5d8>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4ac3      	ldr	r2, [pc, #780]	; (8005560 <UART_SetConfig+0x698>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d178      	bne.n	800534a <UART_SetConfig+0x482>
 8005258:	4bc2      	ldr	r3, [pc, #776]	; (8005564 <UART_SetConfig+0x69c>)
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005260:	2b28      	cmp	r3, #40	; 0x28
 8005262:	d86d      	bhi.n	8005340 <UART_SetConfig+0x478>
 8005264:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0x3a4>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	08005311 	.word	0x08005311
 8005270:	08005341 	.word	0x08005341
 8005274:	08005341 	.word	0x08005341
 8005278:	08005341 	.word	0x08005341
 800527c:	08005341 	.word	0x08005341
 8005280:	08005341 	.word	0x08005341
 8005284:	08005341 	.word	0x08005341
 8005288:	08005341 	.word	0x08005341
 800528c:	08005319 	.word	0x08005319
 8005290:	08005341 	.word	0x08005341
 8005294:	08005341 	.word	0x08005341
 8005298:	08005341 	.word	0x08005341
 800529c:	08005341 	.word	0x08005341
 80052a0:	08005341 	.word	0x08005341
 80052a4:	08005341 	.word	0x08005341
 80052a8:	08005341 	.word	0x08005341
 80052ac:	08005321 	.word	0x08005321
 80052b0:	08005341 	.word	0x08005341
 80052b4:	08005341 	.word	0x08005341
 80052b8:	08005341 	.word	0x08005341
 80052bc:	08005341 	.word	0x08005341
 80052c0:	08005341 	.word	0x08005341
 80052c4:	08005341 	.word	0x08005341
 80052c8:	08005341 	.word	0x08005341
 80052cc:	08005329 	.word	0x08005329
 80052d0:	08005341 	.word	0x08005341
 80052d4:	08005341 	.word	0x08005341
 80052d8:	08005341 	.word	0x08005341
 80052dc:	08005341 	.word	0x08005341
 80052e0:	08005341 	.word	0x08005341
 80052e4:	08005341 	.word	0x08005341
 80052e8:	08005341 	.word	0x08005341
 80052ec:	08005331 	.word	0x08005331
 80052f0:	08005341 	.word	0x08005341
 80052f4:	08005341 	.word	0x08005341
 80052f8:	08005341 	.word	0x08005341
 80052fc:	08005341 	.word	0x08005341
 8005300:	08005341 	.word	0x08005341
 8005304:	08005341 	.word	0x08005341
 8005308:	08005341 	.word	0x08005341
 800530c:	08005339 	.word	0x08005339
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005316:	e0c3      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005318:	2304      	movs	r3, #4
 800531a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800531e:	e0bf      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005320:	2308      	movs	r3, #8
 8005322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005326:	e0bb      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005328:	2310      	movs	r3, #16
 800532a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800532e:	e0b7      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005330:	2320      	movs	r3, #32
 8005332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005336:	e0b3      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005338:	2340      	movs	r3, #64	; 0x40
 800533a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800533e:	e0af      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005346:	bf00      	nop
 8005348:	e0aa      	b.n	80054a0 <UART_SetConfig+0x5d8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a86      	ldr	r2, [pc, #536]	; (8005568 <UART_SetConfig+0x6a0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d132      	bne.n	80053ba <UART_SetConfig+0x4f2>
 8005354:	4b83      	ldr	r3, [pc, #524]	; (8005564 <UART_SetConfig+0x69c>)
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	2b05      	cmp	r3, #5
 800535e:	d827      	bhi.n	80053b0 <UART_SetConfig+0x4e8>
 8005360:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <UART_SetConfig+0x4a0>)
 8005362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005366:	bf00      	nop
 8005368:	08005381 	.word	0x08005381
 800536c:	08005389 	.word	0x08005389
 8005370:	08005391 	.word	0x08005391
 8005374:	08005399 	.word	0x08005399
 8005378:	080053a1 	.word	0x080053a1
 800537c:	080053a9 	.word	0x080053a9
 8005380:	2300      	movs	r3, #0
 8005382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005386:	e08b      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005388:	2304      	movs	r3, #4
 800538a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800538e:	e087      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005390:	2308      	movs	r3, #8
 8005392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005396:	e083      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005398:	2310      	movs	r3, #16
 800539a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800539e:	e07f      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80053a0:	2320      	movs	r3, #32
 80053a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053a6:	e07b      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80053a8:	2340      	movs	r3, #64	; 0x40
 80053aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053ae:	e077      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80053b0:	2380      	movs	r3, #128	; 0x80
 80053b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053b6:	bf00      	nop
 80053b8:	e072      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a6b      	ldr	r2, [pc, #428]	; (800556c <UART_SetConfig+0x6a4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d132      	bne.n	800542a <UART_SetConfig+0x562>
 80053c4:	4b67      	ldr	r3, [pc, #412]	; (8005564 <UART_SetConfig+0x69c>)
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	2b05      	cmp	r3, #5
 80053ce:	d827      	bhi.n	8005420 <UART_SetConfig+0x558>
 80053d0:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <UART_SetConfig+0x510>)
 80053d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d6:	bf00      	nop
 80053d8:	080053f1 	.word	0x080053f1
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	08005401 	.word	0x08005401
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005419 	.word	0x08005419
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053f6:	e053      	b.n	80054a0 <UART_SetConfig+0x5d8>
 80053f8:	2304      	movs	r3, #4
 80053fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80053fe:	e04f      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005400:	2308      	movs	r3, #8
 8005402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005406:	e04b      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005408:	2310      	movs	r3, #16
 800540a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800540e:	e047      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005410:	2320      	movs	r3, #32
 8005412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005416:	e043      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005418:	2340      	movs	r3, #64	; 0x40
 800541a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800541e:	e03f      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005426:	bf00      	nop
 8005428:	e03a      	b.n	80054a0 <UART_SetConfig+0x5d8>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a50      	ldr	r2, [pc, #320]	; (8005570 <UART_SetConfig+0x6a8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d132      	bne.n	800549a <UART_SetConfig+0x5d2>
 8005434:	4b4b      	ldr	r3, [pc, #300]	; (8005564 <UART_SetConfig+0x69c>)
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	2b05      	cmp	r3, #5
 800543e:	d827      	bhi.n	8005490 <UART_SetConfig+0x5c8>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0x580>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	08005461 	.word	0x08005461
 800544c:	08005469 	.word	0x08005469
 8005450:	08005471 	.word	0x08005471
 8005454:	08005479 	.word	0x08005479
 8005458:	08005481 	.word	0x08005481
 800545c:	08005489 	.word	0x08005489
 8005460:	2302      	movs	r3, #2
 8005462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005466:	e01b      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005468:	2304      	movs	r3, #4
 800546a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546e:	e017      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005470:	2308      	movs	r3, #8
 8005472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005476:	e013      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547e:	e00f      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005480:	2320      	movs	r3, #32
 8005482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005486:	e00b      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005488:	2340      	movs	r3, #64	; 0x40
 800548a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548e:	e007      	b.n	80054a0 <UART_SetConfig+0x5d8>
 8005490:	2380      	movs	r3, #128	; 0x80
 8005492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005496:	bf00      	nop
 8005498:	e002      	b.n	80054a0 <UART_SetConfig+0x5d8>
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a32      	ldr	r2, [pc, #200]	; (8005570 <UART_SetConfig+0x6a8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	f040 86f7 	bne.w	800629a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	f000 80c0 	beq.w	8005636 <UART_SetConfig+0x76e>
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	dc04      	bgt.n	80054c4 <UART_SetConfig+0x5fc>
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d00c      	beq.n	80054d8 <UART_SetConfig+0x610>
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d065      	beq.n	800558e <UART_SetConfig+0x6c6>
 80054c2:	e27a      	b.n	80059ba <UART_SetConfig+0xaf2>
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	f000 81b0 	beq.w	800582a <UART_SetConfig+0x962>
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	f000 821e 	beq.w	800590c <UART_SetConfig+0xa44>
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	f000 8104 	beq.w	80056de <UART_SetConfig+0x816>
 80054d6:	e270      	b.n	80059ba <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80054d8:	f7fe fa40 	bl	800395c <HAL_RCCEx_GetD3PCLK1Freq>
 80054dc:	4602      	mov	r2, r0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04e      	beq.n	8005584 <UART_SetConfig+0x6bc>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d048      	beq.n	8005580 <UART_SetConfig+0x6b8>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d042      	beq.n	800557c <UART_SetConfig+0x6b4>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	2b03      	cmp	r3, #3
 80054fc:	d03c      	beq.n	8005578 <UART_SetConfig+0x6b0>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	2b04      	cmp	r3, #4
 8005504:	d036      	beq.n	8005574 <UART_SetConfig+0x6ac>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	2b05      	cmp	r3, #5
 800550c:	d026      	beq.n	800555c <UART_SetConfig+0x694>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2b06      	cmp	r3, #6
 8005514:	d020      	beq.n	8005558 <UART_SetConfig+0x690>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2b07      	cmp	r3, #7
 800551c:	d01a      	beq.n	8005554 <UART_SetConfig+0x68c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	2b08      	cmp	r3, #8
 8005524:	d014      	beq.n	8005550 <UART_SetConfig+0x688>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b09      	cmp	r3, #9
 800552c:	d00e      	beq.n	800554c <UART_SetConfig+0x684>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	2b0a      	cmp	r3, #10
 8005534:	d008      	beq.n	8005548 <UART_SetConfig+0x680>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	2b0b      	cmp	r3, #11
 800553c:	d102      	bne.n	8005544 <UART_SetConfig+0x67c>
 800553e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005542:	e020      	b.n	8005586 <UART_SetConfig+0x6be>
 8005544:	2301      	movs	r3, #1
 8005546:	e01e      	b.n	8005586 <UART_SetConfig+0x6be>
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	e01c      	b.n	8005586 <UART_SetConfig+0x6be>
 800554c:	2340      	movs	r3, #64	; 0x40
 800554e:	e01a      	b.n	8005586 <UART_SetConfig+0x6be>
 8005550:	2320      	movs	r3, #32
 8005552:	e018      	b.n	8005586 <UART_SetConfig+0x6be>
 8005554:	2310      	movs	r3, #16
 8005556:	e016      	b.n	8005586 <UART_SetConfig+0x6be>
 8005558:	230c      	movs	r3, #12
 800555a:	e014      	b.n	8005586 <UART_SetConfig+0x6be>
 800555c:	230a      	movs	r3, #10
 800555e:	e012      	b.n	8005586 <UART_SetConfig+0x6be>
 8005560:	40011400 	.word	0x40011400
 8005564:	58024400 	.word	0x58024400
 8005568:	40007800 	.word	0x40007800
 800556c:	40007c00 	.word	0x40007c00
 8005570:	58000c00 	.word	0x58000c00
 8005574:	2308      	movs	r3, #8
 8005576:	e006      	b.n	8005586 <UART_SetConfig+0x6be>
 8005578:	2306      	movs	r3, #6
 800557a:	e004      	b.n	8005586 <UART_SetConfig+0x6be>
 800557c:	2304      	movs	r3, #4
 800557e:	e002      	b.n	8005586 <UART_SetConfig+0x6be>
 8005580:	2302      	movs	r3, #2
 8005582:	e000      	b.n	8005586 <UART_SetConfig+0x6be>
 8005584:	2301      	movs	r3, #1
 8005586:	fbb2 f3f3 	udiv	r3, r2, r3
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800558c:	e219      	b.n	80059c2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800558e:	f107 0314 	add.w	r3, r7, #20
 8005592:	4618      	mov	r0, r3
 8005594:	f7fe f9f8 	bl	8003988 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d044      	beq.n	800562c <UART_SetConfig+0x764>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d03e      	beq.n	8005628 <UART_SetConfig+0x760>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d038      	beq.n	8005624 <UART_SetConfig+0x75c>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d032      	beq.n	8005620 <UART_SetConfig+0x758>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d02c      	beq.n	800561c <UART_SetConfig+0x754>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d026      	beq.n	8005618 <UART_SetConfig+0x750>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d020      	beq.n	8005614 <UART_SetConfig+0x74c>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b07      	cmp	r3, #7
 80055d8:	d01a      	beq.n	8005610 <UART_SetConfig+0x748>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d014      	beq.n	800560c <UART_SetConfig+0x744>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b09      	cmp	r3, #9
 80055e8:	d00e      	beq.n	8005608 <UART_SetConfig+0x740>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b0a      	cmp	r3, #10
 80055f0:	d008      	beq.n	8005604 <UART_SetConfig+0x73c>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b0b      	cmp	r3, #11
 80055f8:	d102      	bne.n	8005600 <UART_SetConfig+0x738>
 80055fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055fe:	e016      	b.n	800562e <UART_SetConfig+0x766>
 8005600:	2301      	movs	r3, #1
 8005602:	e014      	b.n	800562e <UART_SetConfig+0x766>
 8005604:	2380      	movs	r3, #128	; 0x80
 8005606:	e012      	b.n	800562e <UART_SetConfig+0x766>
 8005608:	2340      	movs	r3, #64	; 0x40
 800560a:	e010      	b.n	800562e <UART_SetConfig+0x766>
 800560c:	2320      	movs	r3, #32
 800560e:	e00e      	b.n	800562e <UART_SetConfig+0x766>
 8005610:	2310      	movs	r3, #16
 8005612:	e00c      	b.n	800562e <UART_SetConfig+0x766>
 8005614:	230c      	movs	r3, #12
 8005616:	e00a      	b.n	800562e <UART_SetConfig+0x766>
 8005618:	230a      	movs	r3, #10
 800561a:	e008      	b.n	800562e <UART_SetConfig+0x766>
 800561c:	2308      	movs	r3, #8
 800561e:	e006      	b.n	800562e <UART_SetConfig+0x766>
 8005620:	2306      	movs	r3, #6
 8005622:	e004      	b.n	800562e <UART_SetConfig+0x766>
 8005624:	2304      	movs	r3, #4
 8005626:	e002      	b.n	800562e <UART_SetConfig+0x766>
 8005628:	2302      	movs	r3, #2
 800562a:	e000      	b.n	800562e <UART_SetConfig+0x766>
 800562c:	2301      	movs	r3, #1
 800562e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005634:	e1c5      	b.n	80059c2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005636:	f107 0308 	add.w	r3, r7, #8
 800563a:	4618      	mov	r0, r3
 800563c:	f7fe faf0 	bl	8003c20 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d044      	beq.n	80056d4 <UART_SetConfig+0x80c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	2b01      	cmp	r3, #1
 8005650:	d03e      	beq.n	80056d0 <UART_SetConfig+0x808>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	2b02      	cmp	r3, #2
 8005658:	d038      	beq.n	80056cc <UART_SetConfig+0x804>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	2b03      	cmp	r3, #3
 8005660:	d032      	beq.n	80056c8 <UART_SetConfig+0x800>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	2b04      	cmp	r3, #4
 8005668:	d02c      	beq.n	80056c4 <UART_SetConfig+0x7fc>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2b05      	cmp	r3, #5
 8005670:	d026      	beq.n	80056c0 <UART_SetConfig+0x7f8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	2b06      	cmp	r3, #6
 8005678:	d020      	beq.n	80056bc <UART_SetConfig+0x7f4>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	2b07      	cmp	r3, #7
 8005680:	d01a      	beq.n	80056b8 <UART_SetConfig+0x7f0>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b08      	cmp	r3, #8
 8005688:	d014      	beq.n	80056b4 <UART_SetConfig+0x7ec>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	2b09      	cmp	r3, #9
 8005690:	d00e      	beq.n	80056b0 <UART_SetConfig+0x7e8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b0a      	cmp	r3, #10
 8005698:	d008      	beq.n	80056ac <UART_SetConfig+0x7e4>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	2b0b      	cmp	r3, #11
 80056a0:	d102      	bne.n	80056a8 <UART_SetConfig+0x7e0>
 80056a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056a6:	e016      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e014      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	e012      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056b0:	2340      	movs	r3, #64	; 0x40
 80056b2:	e010      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056b4:	2320      	movs	r3, #32
 80056b6:	e00e      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056b8:	2310      	movs	r3, #16
 80056ba:	e00c      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056bc:	230c      	movs	r3, #12
 80056be:	e00a      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056c0:	230a      	movs	r3, #10
 80056c2:	e008      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056c4:	2308      	movs	r3, #8
 80056c6:	e006      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056c8:	2306      	movs	r3, #6
 80056ca:	e004      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056cc:	2304      	movs	r3, #4
 80056ce:	e002      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056d0:	2302      	movs	r3, #2
 80056d2:	e000      	b.n	80056d6 <UART_SetConfig+0x80e>
 80056d4:	2301      	movs	r3, #1
 80056d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056dc:	e171      	b.n	80059c2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056de:	4b7a      	ldr	r3, [pc, #488]	; (80058c8 <UART_SetConfig+0xa00>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0320 	and.w	r3, r3, #32
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d054      	beq.n	8005794 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80056ea:	4b77      	ldr	r3, [pc, #476]	; (80058c8 <UART_SetConfig+0xa00>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	08db      	lsrs	r3, r3, #3
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	4a75      	ldr	r2, [pc, #468]	; (80058cc <UART_SetConfig+0xa04>)
 80056f6:	40da      	lsrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d044      	beq.n	800578a <UART_SetConfig+0x8c2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b01      	cmp	r3, #1
 8005706:	d03e      	beq.n	8005786 <UART_SetConfig+0x8be>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	2b02      	cmp	r3, #2
 800570e:	d038      	beq.n	8005782 <UART_SetConfig+0x8ba>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	2b03      	cmp	r3, #3
 8005716:	d032      	beq.n	800577e <UART_SetConfig+0x8b6>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	2b04      	cmp	r3, #4
 800571e:	d02c      	beq.n	800577a <UART_SetConfig+0x8b2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	2b05      	cmp	r3, #5
 8005726:	d026      	beq.n	8005776 <UART_SetConfig+0x8ae>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	2b06      	cmp	r3, #6
 800572e:	d020      	beq.n	8005772 <UART_SetConfig+0x8aa>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2b07      	cmp	r3, #7
 8005736:	d01a      	beq.n	800576e <UART_SetConfig+0x8a6>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b08      	cmp	r3, #8
 800573e:	d014      	beq.n	800576a <UART_SetConfig+0x8a2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	2b09      	cmp	r3, #9
 8005746:	d00e      	beq.n	8005766 <UART_SetConfig+0x89e>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	2b0a      	cmp	r3, #10
 800574e:	d008      	beq.n	8005762 <UART_SetConfig+0x89a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	2b0b      	cmp	r3, #11
 8005756:	d102      	bne.n	800575e <UART_SetConfig+0x896>
 8005758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800575c:	e016      	b.n	800578c <UART_SetConfig+0x8c4>
 800575e:	2301      	movs	r3, #1
 8005760:	e014      	b.n	800578c <UART_SetConfig+0x8c4>
 8005762:	2380      	movs	r3, #128	; 0x80
 8005764:	e012      	b.n	800578c <UART_SetConfig+0x8c4>
 8005766:	2340      	movs	r3, #64	; 0x40
 8005768:	e010      	b.n	800578c <UART_SetConfig+0x8c4>
 800576a:	2320      	movs	r3, #32
 800576c:	e00e      	b.n	800578c <UART_SetConfig+0x8c4>
 800576e:	2310      	movs	r3, #16
 8005770:	e00c      	b.n	800578c <UART_SetConfig+0x8c4>
 8005772:	230c      	movs	r3, #12
 8005774:	e00a      	b.n	800578c <UART_SetConfig+0x8c4>
 8005776:	230a      	movs	r3, #10
 8005778:	e008      	b.n	800578c <UART_SetConfig+0x8c4>
 800577a:	2308      	movs	r3, #8
 800577c:	e006      	b.n	800578c <UART_SetConfig+0x8c4>
 800577e:	2306      	movs	r3, #6
 8005780:	e004      	b.n	800578c <UART_SetConfig+0x8c4>
 8005782:	2304      	movs	r3, #4
 8005784:	e002      	b.n	800578c <UART_SetConfig+0x8c4>
 8005786:	2302      	movs	r3, #2
 8005788:	e000      	b.n	800578c <UART_SetConfig+0x8c4>
 800578a:	2301      	movs	r3, #1
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8005792:	e116      	b.n	80059c2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d043      	beq.n	8005824 <UART_SetConfig+0x95c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d03d      	beq.n	8005820 <UART_SetConfig+0x958>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d037      	beq.n	800581c <UART_SetConfig+0x954>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	d031      	beq.n	8005818 <UART_SetConfig+0x950>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d02b      	beq.n	8005814 <UART_SetConfig+0x94c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d025      	beq.n	8005810 <UART_SetConfig+0x948>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2b06      	cmp	r3, #6
 80057ca:	d01f      	beq.n	800580c <UART_SetConfig+0x944>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	2b07      	cmp	r3, #7
 80057d2:	d019      	beq.n	8005808 <UART_SetConfig+0x940>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d013      	beq.n	8005804 <UART_SetConfig+0x93c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e0:	2b09      	cmp	r3, #9
 80057e2:	d00d      	beq.n	8005800 <UART_SetConfig+0x938>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2b0a      	cmp	r3, #10
 80057ea:	d007      	beq.n	80057fc <UART_SetConfig+0x934>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b0b      	cmp	r3, #11
 80057f2:	d101      	bne.n	80057f8 <UART_SetConfig+0x930>
 80057f4:	4b36      	ldr	r3, [pc, #216]	; (80058d0 <UART_SetConfig+0xa08>)
 80057f6:	e016      	b.n	8005826 <UART_SetConfig+0x95e>
 80057f8:	4b34      	ldr	r3, [pc, #208]	; (80058cc <UART_SetConfig+0xa04>)
 80057fa:	e014      	b.n	8005826 <UART_SetConfig+0x95e>
 80057fc:	4b35      	ldr	r3, [pc, #212]	; (80058d4 <UART_SetConfig+0xa0c>)
 80057fe:	e012      	b.n	8005826 <UART_SetConfig+0x95e>
 8005800:	4b35      	ldr	r3, [pc, #212]	; (80058d8 <UART_SetConfig+0xa10>)
 8005802:	e010      	b.n	8005826 <UART_SetConfig+0x95e>
 8005804:	4b35      	ldr	r3, [pc, #212]	; (80058dc <UART_SetConfig+0xa14>)
 8005806:	e00e      	b.n	8005826 <UART_SetConfig+0x95e>
 8005808:	4b35      	ldr	r3, [pc, #212]	; (80058e0 <UART_SetConfig+0xa18>)
 800580a:	e00c      	b.n	8005826 <UART_SetConfig+0x95e>
 800580c:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <UART_SetConfig+0xa1c>)
 800580e:	e00a      	b.n	8005826 <UART_SetConfig+0x95e>
 8005810:	4b35      	ldr	r3, [pc, #212]	; (80058e8 <UART_SetConfig+0xa20>)
 8005812:	e008      	b.n	8005826 <UART_SetConfig+0x95e>
 8005814:	4b35      	ldr	r3, [pc, #212]	; (80058ec <UART_SetConfig+0xa24>)
 8005816:	e006      	b.n	8005826 <UART_SetConfig+0x95e>
 8005818:	4b35      	ldr	r3, [pc, #212]	; (80058f0 <UART_SetConfig+0xa28>)
 800581a:	e004      	b.n	8005826 <UART_SetConfig+0x95e>
 800581c:	4b35      	ldr	r3, [pc, #212]	; (80058f4 <UART_SetConfig+0xa2c>)
 800581e:	e002      	b.n	8005826 <UART_SetConfig+0x95e>
 8005820:	4b35      	ldr	r3, [pc, #212]	; (80058f8 <UART_SetConfig+0xa30>)
 8005822:	e000      	b.n	8005826 <UART_SetConfig+0x95e>
 8005824:	4b29      	ldr	r3, [pc, #164]	; (80058cc <UART_SetConfig+0xa04>)
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005828:	e0cb      	b.n	80059c2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	2b00      	cmp	r3, #0
 8005830:	d046      	beq.n	80058c0 <UART_SetConfig+0x9f8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005836:	2b01      	cmp	r3, #1
 8005838:	d040      	beq.n	80058bc <UART_SetConfig+0x9f4>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	2b02      	cmp	r3, #2
 8005840:	d03a      	beq.n	80058b8 <UART_SetConfig+0x9f0>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	2b03      	cmp	r3, #3
 8005848:	d034      	beq.n	80058b4 <UART_SetConfig+0x9ec>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	2b04      	cmp	r3, #4
 8005850:	d02e      	beq.n	80058b0 <UART_SetConfig+0x9e8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2b05      	cmp	r3, #5
 8005858:	d028      	beq.n	80058ac <UART_SetConfig+0x9e4>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	2b06      	cmp	r3, #6
 8005860:	d022      	beq.n	80058a8 <UART_SetConfig+0x9e0>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2b07      	cmp	r3, #7
 8005868:	d01c      	beq.n	80058a4 <UART_SetConfig+0x9dc>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2b08      	cmp	r3, #8
 8005870:	d016      	beq.n	80058a0 <UART_SetConfig+0x9d8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b09      	cmp	r3, #9
 8005878:	d00f      	beq.n	800589a <UART_SetConfig+0x9d2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b0a      	cmp	r3, #10
 8005880:	d008      	beq.n	8005894 <UART_SetConfig+0x9cc>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b0b      	cmp	r3, #11
 8005888:	d102      	bne.n	8005890 <UART_SetConfig+0x9c8>
 800588a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800588e:	e018      	b.n	80058c2 <UART_SetConfig+0x9fa>
 8005890:	4b13      	ldr	r3, [pc, #76]	; (80058e0 <UART_SetConfig+0xa18>)
 8005892:	e016      	b.n	80058c2 <UART_SetConfig+0x9fa>
 8005894:	f647 2312 	movw	r3, #31250	; 0x7a12
 8005898:	e013      	b.n	80058c2 <UART_SetConfig+0x9fa>
 800589a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800589e:	e010      	b.n	80058c2 <UART_SetConfig+0x9fa>
 80058a0:	4b16      	ldr	r3, [pc, #88]	; (80058fc <UART_SetConfig+0xa34>)
 80058a2:	e00e      	b.n	80058c2 <UART_SetConfig+0x9fa>
 80058a4:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <UART_SetConfig+0xa08>)
 80058a6:	e00c      	b.n	80058c2 <UART_SetConfig+0x9fa>
 80058a8:	4b15      	ldr	r3, [pc, #84]	; (8005900 <UART_SetConfig+0xa38>)
 80058aa:	e00a      	b.n	80058c2 <UART_SetConfig+0x9fa>
 80058ac:	4b15      	ldr	r3, [pc, #84]	; (8005904 <UART_SetConfig+0xa3c>)
 80058ae:	e008      	b.n	80058c2 <UART_SetConfig+0x9fa>
 80058b0:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <UART_SetConfig+0xa0c>)
 80058b2:	e006      	b.n	80058c2 <UART_SetConfig+0x9fa>
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <UART_SetConfig+0xa40>)
 80058b6:	e004      	b.n	80058c2 <UART_SetConfig+0x9fa>
 80058b8:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <UART_SetConfig+0xa10>)
 80058ba:	e002      	b.n	80058c2 <UART_SetConfig+0x9fa>
 80058bc:	4b07      	ldr	r3, [pc, #28]	; (80058dc <UART_SetConfig+0xa14>)
 80058be:	e000      	b.n	80058c2 <UART_SetConfig+0x9fa>
 80058c0:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <UART_SetConfig+0xa18>)
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058c4:	e07d      	b.n	80059c2 <UART_SetConfig+0xafa>
 80058c6:	bf00      	nop
 80058c8:	58024400 	.word	0x58024400
 80058cc:	03d09000 	.word	0x03d09000
 80058d0:	0003d090 	.word	0x0003d090
 80058d4:	0007a120 	.word	0x0007a120
 80058d8:	000f4240 	.word	0x000f4240
 80058dc:	001e8480 	.word	0x001e8480
 80058e0:	003d0900 	.word	0x003d0900
 80058e4:	00516155 	.word	0x00516155
 80058e8:	0061a800 	.word	0x0061a800
 80058ec:	007a1200 	.word	0x007a1200
 80058f0:	00a2c2aa 	.word	0x00a2c2aa
 80058f4:	00f42400 	.word	0x00f42400
 80058f8:	01e84800 	.word	0x01e84800
 80058fc:	0001e848 	.word	0x0001e848
 8005900:	00051615 	.word	0x00051615
 8005904:	00061a80 	.word	0x00061a80
 8005908:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2b00      	cmp	r3, #0
 8005912:	d04e      	beq.n	80059b2 <UART_SetConfig+0xaea>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	2b01      	cmp	r3, #1
 800591a:	d047      	beq.n	80059ac <UART_SetConfig+0xae4>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	2b02      	cmp	r3, #2
 8005922:	d040      	beq.n	80059a6 <UART_SetConfig+0xade>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	2b03      	cmp	r3, #3
 800592a:	d039      	beq.n	80059a0 <UART_SetConfig+0xad8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	2b04      	cmp	r3, #4
 8005932:	d032      	beq.n	800599a <UART_SetConfig+0xad2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	2b05      	cmp	r3, #5
 800593a:	d02b      	beq.n	8005994 <UART_SetConfig+0xacc>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005940:	2b06      	cmp	r3, #6
 8005942:	d024      	beq.n	800598e <UART_SetConfig+0xac6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	2b07      	cmp	r3, #7
 800594a:	d01d      	beq.n	8005988 <UART_SetConfig+0xac0>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	2b08      	cmp	r3, #8
 8005952:	d016      	beq.n	8005982 <UART_SetConfig+0xaba>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	2b09      	cmp	r3, #9
 800595a:	d00f      	beq.n	800597c <UART_SetConfig+0xab4>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2b0a      	cmp	r3, #10
 8005962:	d008      	beq.n	8005976 <UART_SetConfig+0xaae>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	2b0b      	cmp	r3, #11
 800596a:	d101      	bne.n	8005970 <UART_SetConfig+0xaa8>
 800596c:	2380      	movs	r3, #128	; 0x80
 800596e:	e022      	b.n	80059b6 <UART_SetConfig+0xaee>
 8005970:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005974:	e01f      	b.n	80059b6 <UART_SetConfig+0xaee>
 8005976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800597a:	e01c      	b.n	80059b6 <UART_SetConfig+0xaee>
 800597c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005980:	e019      	b.n	80059b6 <UART_SetConfig+0xaee>
 8005982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005986:	e016      	b.n	80059b6 <UART_SetConfig+0xaee>
 8005988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800598c:	e013      	b.n	80059b6 <UART_SetConfig+0xaee>
 800598e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8005992:	e010      	b.n	80059b6 <UART_SetConfig+0xaee>
 8005994:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005998:	e00d      	b.n	80059b6 <UART_SetConfig+0xaee>
 800599a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800599e:	e00a      	b.n	80059b6 <UART_SetConfig+0xaee>
 80059a0:	f241 5355 	movw	r3, #5461	; 0x1555
 80059a4:	e007      	b.n	80059b6 <UART_SetConfig+0xaee>
 80059a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059aa:	e004      	b.n	80059b6 <UART_SetConfig+0xaee>
 80059ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059b0:	e001      	b.n	80059b6 <UART_SetConfig+0xaee>
 80059b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059b8:	e003      	b.n	80059c2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 80059c0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f001 83e4 	beq.w	8007192 <UART_SetConfig+0x22ca>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	4413      	add	r3, r2
 80059d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d305      	bcc.n	80059e6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d904      	bls.n	80059f0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ec:	f001 bbd1 	b.w	8007192 <UART_SetConfig+0x22ca>
      }
      else
      {
        switch (clocksource)
 80059f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	f000 8153 	beq.w	8005ca0 <UART_SetConfig+0xdd8>
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	dc06      	bgt.n	8005a0c <UART_SetConfig+0xb44>
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d00f      	beq.n	8005a22 <UART_SetConfig+0xb5a>
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	f000 80ab 	beq.w	8005b5e <UART_SetConfig+0xc96>
 8005a08:	f000 bc30 	b.w	800626c <UART_SetConfig+0x13a4>
 8005a0c:	2b20      	cmp	r3, #32
 8005a0e:	f000 832d 	beq.w	800606c <UART_SetConfig+0x11a4>
 8005a12:	2b40      	cmp	r3, #64	; 0x40
 8005a14:	f000 83a5 	beq.w	8006162 <UART_SetConfig+0x129a>
 8005a18:	2b10      	cmp	r3, #16
 8005a1a:	f000 81e2 	beq.w	8005de2 <UART_SetConfig+0xf1a>
 8005a1e:	f000 bc25 	b.w	800626c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a22:	f7fd ff9b 	bl	800395c <HAL_RCCEx_GetD3PCLK1Freq>
 8005a26:	4603      	mov	r3, r0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d067      	beq.n	8005b06 <UART_SetConfig+0xc3e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d05e      	beq.n	8005afc <UART_SetConfig+0xc34>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d055      	beq.n	8005af2 <UART_SetConfig+0xc2a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d04c      	beq.n	8005ae8 <UART_SetConfig+0xc20>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d043      	beq.n	8005ade <UART_SetConfig+0xc16>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b05      	cmp	r3, #5
 8005a5c:	d03a      	beq.n	8005ad4 <UART_SetConfig+0xc0c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	2b06      	cmp	r3, #6
 8005a64:	d031      	beq.n	8005aca <UART_SetConfig+0xc02>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	2b07      	cmp	r3, #7
 8005a6c:	d028      	beq.n	8005ac0 <UART_SetConfig+0xbf8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d01f      	beq.n	8005ab6 <UART_SetConfig+0xbee>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d016      	beq.n	8005aac <UART_SetConfig+0xbe4>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b0a      	cmp	r3, #10
 8005a84:	d00d      	beq.n	8005aa2 <UART_SetConfig+0xbda>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	2b0b      	cmp	r3, #11
 8005a8c:	d104      	bne.n	8005a98 <UART_SetConfig+0xbd0>
 8005a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a92:	f04f 0400 	mov.w	r4, #0
 8005a96:	e03a      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005a98:	f04f 0301 	mov.w	r3, #1
 8005a9c:	f04f 0400 	mov.w	r4, #0
 8005aa0:	e035      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005aa2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005aa6:	f04f 0400 	mov.w	r4, #0
 8005aaa:	e030      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005aac:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005ab0:	f04f 0400 	mov.w	r4, #0
 8005ab4:	e02b      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005ab6:	f04f 0320 	mov.w	r3, #32
 8005aba:	f04f 0400 	mov.w	r4, #0
 8005abe:	e026      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005ac0:	f04f 0310 	mov.w	r3, #16
 8005ac4:	f04f 0400 	mov.w	r4, #0
 8005ac8:	e021      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005aca:	f04f 030c 	mov.w	r3, #12
 8005ace:	f04f 0400 	mov.w	r4, #0
 8005ad2:	e01c      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005ad4:	f04f 030a 	mov.w	r3, #10
 8005ad8:	f04f 0400 	mov.w	r4, #0
 8005adc:	e017      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005ade:	f04f 0308 	mov.w	r3, #8
 8005ae2:	f04f 0400 	mov.w	r4, #0
 8005ae6:	e012      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005ae8:	f04f 0306 	mov.w	r3, #6
 8005aec:	f04f 0400 	mov.w	r4, #0
 8005af0:	e00d      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005af2:	f04f 0304 	mov.w	r3, #4
 8005af6:	f04f 0400 	mov.w	r4, #0
 8005afa:	e008      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005afc:	f04f 0302 	mov.w	r3, #2
 8005b00:	f04f 0400 	mov.w	r4, #0
 8005b04:	e003      	b.n	8005b0e <UART_SetConfig+0xc46>
 8005b06:	f04f 0301 	mov.w	r3, #1
 8005b0a:	f04f 0400 	mov.w	r4, #0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	4623      	mov	r3, r4
 8005b12:	f7fa fc3d 	bl	8000390 <__aeabi_uldivmod>
 8005b16:	4603      	mov	r3, r0
 8005b18:	460c      	mov	r4, r1
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	f04f 0400 	mov.w	r4, #0
 8005b26:	0214      	lsls	r4, r2, #8
 8005b28:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b2c:	020b      	lsls	r3, r1, #8
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6852      	ldr	r2, [r2, #4]
 8005b32:	0852      	lsrs	r2, r2, #1
 8005b34:	4611      	mov	r1, r2
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	eb13 0b01 	adds.w	fp, r3, r1
 8005b3e:	eb44 0c02 	adc.w	ip, r4, r2
 8005b42:	4658      	mov	r0, fp
 8005b44:	4661      	mov	r1, ip
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f04f 0400 	mov.w	r4, #0
 8005b4e:	461a      	mov	r2, r3
 8005b50:	4623      	mov	r3, r4
 8005b52:	f7fa fc1d 	bl	8000390 <__aeabi_uldivmod>
 8005b56:	4603      	mov	r3, r0
 8005b58:	460c      	mov	r4, r1
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005b5c:	e38a      	b.n	8006274 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b5e:	f107 0314 	add.w	r3, r7, #20
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fd ff10 	bl	8003988 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d067      	beq.n	8005c48 <UART_SetConfig+0xd80>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d05e      	beq.n	8005c3e <UART_SetConfig+0xd76>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d055      	beq.n	8005c34 <UART_SetConfig+0xd6c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d04c      	beq.n	8005c2a <UART_SetConfig+0xd62>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d043      	beq.n	8005c20 <UART_SetConfig+0xd58>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b05      	cmp	r3, #5
 8005b9e:	d03a      	beq.n	8005c16 <UART_SetConfig+0xd4e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b06      	cmp	r3, #6
 8005ba6:	d031      	beq.n	8005c0c <UART_SetConfig+0xd44>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b07      	cmp	r3, #7
 8005bae:	d028      	beq.n	8005c02 <UART_SetConfig+0xd3a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d01f      	beq.n	8005bf8 <UART_SetConfig+0xd30>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	2b09      	cmp	r3, #9
 8005bbe:	d016      	beq.n	8005bee <UART_SetConfig+0xd26>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	2b0a      	cmp	r3, #10
 8005bc6:	d00d      	beq.n	8005be4 <UART_SetConfig+0xd1c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bcc:	2b0b      	cmp	r3, #11
 8005bce:	d104      	bne.n	8005bda <UART_SetConfig+0xd12>
 8005bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bd4:	f04f 0400 	mov.w	r4, #0
 8005bd8:	e03a      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005bda:	f04f 0301 	mov.w	r3, #1
 8005bde:	f04f 0400 	mov.w	r4, #0
 8005be2:	e035      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005be4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005be8:	f04f 0400 	mov.w	r4, #0
 8005bec:	e030      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005bee:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005bf2:	f04f 0400 	mov.w	r4, #0
 8005bf6:	e02b      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005bf8:	f04f 0320 	mov.w	r3, #32
 8005bfc:	f04f 0400 	mov.w	r4, #0
 8005c00:	e026      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005c02:	f04f 0310 	mov.w	r3, #16
 8005c06:	f04f 0400 	mov.w	r4, #0
 8005c0a:	e021      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005c0c:	f04f 030c 	mov.w	r3, #12
 8005c10:	f04f 0400 	mov.w	r4, #0
 8005c14:	e01c      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005c16:	f04f 030a 	mov.w	r3, #10
 8005c1a:	f04f 0400 	mov.w	r4, #0
 8005c1e:	e017      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005c20:	f04f 0308 	mov.w	r3, #8
 8005c24:	f04f 0400 	mov.w	r4, #0
 8005c28:	e012      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005c2a:	f04f 0306 	mov.w	r3, #6
 8005c2e:	f04f 0400 	mov.w	r4, #0
 8005c32:	e00d      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005c34:	f04f 0304 	mov.w	r3, #4
 8005c38:	f04f 0400 	mov.w	r4, #0
 8005c3c:	e008      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005c3e:	f04f 0302 	mov.w	r3, #2
 8005c42:	f04f 0400 	mov.w	r4, #0
 8005c46:	e003      	b.n	8005c50 <UART_SetConfig+0xd88>
 8005c48:	f04f 0301 	mov.w	r3, #1
 8005c4c:	f04f 0400 	mov.w	r4, #0
 8005c50:	461a      	mov	r2, r3
 8005c52:	4623      	mov	r3, r4
 8005c54:	f7fa fb9c 	bl	8000390 <__aeabi_uldivmod>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4622      	mov	r2, r4
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	f04f 0400 	mov.w	r4, #0
 8005c68:	0214      	lsls	r4, r2, #8
 8005c6a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005c6e:	020b      	lsls	r3, r1, #8
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6852      	ldr	r2, [r2, #4]
 8005c74:	0852      	lsrs	r2, r2, #1
 8005c76:	4611      	mov	r1, r2
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	eb13 0b01 	adds.w	fp, r3, r1
 8005c80:	eb44 0c02 	adc.w	ip, r4, r2
 8005c84:	4658      	mov	r0, fp
 8005c86:	4661      	mov	r1, ip
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f04f 0400 	mov.w	r4, #0
 8005c90:	461a      	mov	r2, r3
 8005c92:	4623      	mov	r3, r4
 8005c94:	f7fa fb7c 	bl	8000390 <__aeabi_uldivmod>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005c9e:	e2e9      	b.n	8006274 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ca0:	f107 0308 	add.w	r3, r7, #8
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fd ffbb 	bl	8003c20 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f04f 0100 	mov.w	r1, #0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d067      	beq.n	8005d8a <UART_SetConfig+0xec2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d05e      	beq.n	8005d80 <UART_SetConfig+0xeb8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d055      	beq.n	8005d76 <UART_SetConfig+0xeae>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d04c      	beq.n	8005d6c <UART_SetConfig+0xea4>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d043      	beq.n	8005d62 <UART_SetConfig+0xe9a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d03a      	beq.n	8005d58 <UART_SetConfig+0xe90>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce6:	2b06      	cmp	r3, #6
 8005ce8:	d031      	beq.n	8005d4e <UART_SetConfig+0xe86>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	2b07      	cmp	r3, #7
 8005cf0:	d028      	beq.n	8005d44 <UART_SetConfig+0xe7c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	2b08      	cmp	r3, #8
 8005cf8:	d01f      	beq.n	8005d3a <UART_SetConfig+0xe72>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfe:	2b09      	cmp	r3, #9
 8005d00:	d016      	beq.n	8005d30 <UART_SetConfig+0xe68>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d06:	2b0a      	cmp	r3, #10
 8005d08:	d00d      	beq.n	8005d26 <UART_SetConfig+0xe5e>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	2b0b      	cmp	r3, #11
 8005d10:	d104      	bne.n	8005d1c <UART_SetConfig+0xe54>
 8005d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d16:	f04f 0400 	mov.w	r4, #0
 8005d1a:	e03a      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d1c:	f04f 0301 	mov.w	r3, #1
 8005d20:	f04f 0400 	mov.w	r4, #0
 8005d24:	e035      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d26:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005d2a:	f04f 0400 	mov.w	r4, #0
 8005d2e:	e030      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d30:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005d34:	f04f 0400 	mov.w	r4, #0
 8005d38:	e02b      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d3a:	f04f 0320 	mov.w	r3, #32
 8005d3e:	f04f 0400 	mov.w	r4, #0
 8005d42:	e026      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d44:	f04f 0310 	mov.w	r3, #16
 8005d48:	f04f 0400 	mov.w	r4, #0
 8005d4c:	e021      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d4e:	f04f 030c 	mov.w	r3, #12
 8005d52:	f04f 0400 	mov.w	r4, #0
 8005d56:	e01c      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d58:	f04f 030a 	mov.w	r3, #10
 8005d5c:	f04f 0400 	mov.w	r4, #0
 8005d60:	e017      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d62:	f04f 0308 	mov.w	r3, #8
 8005d66:	f04f 0400 	mov.w	r4, #0
 8005d6a:	e012      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d6c:	f04f 0306 	mov.w	r3, #6
 8005d70:	f04f 0400 	mov.w	r4, #0
 8005d74:	e00d      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d76:	f04f 0304 	mov.w	r3, #4
 8005d7a:	f04f 0400 	mov.w	r4, #0
 8005d7e:	e008      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d80:	f04f 0302 	mov.w	r3, #2
 8005d84:	f04f 0400 	mov.w	r4, #0
 8005d88:	e003      	b.n	8005d92 <UART_SetConfig+0xeca>
 8005d8a:	f04f 0301 	mov.w	r3, #1
 8005d8e:	f04f 0400 	mov.w	r4, #0
 8005d92:	461a      	mov	r2, r3
 8005d94:	4623      	mov	r3, r4
 8005d96:	f7fa fafb 	bl	8000390 <__aeabi_uldivmod>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4622      	mov	r2, r4
 8005da2:	f04f 0300 	mov.w	r3, #0
 8005da6:	f04f 0400 	mov.w	r4, #0
 8005daa:	0214      	lsls	r4, r2, #8
 8005dac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005db0:	020b      	lsls	r3, r1, #8
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6852      	ldr	r2, [r2, #4]
 8005db6:	0852      	lsrs	r2, r2, #1
 8005db8:	4611      	mov	r1, r2
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	eb13 0b01 	adds.w	fp, r3, r1
 8005dc2:	eb44 0c02 	adc.w	ip, r4, r2
 8005dc6:	4658      	mov	r0, fp
 8005dc8:	4661      	mov	r1, ip
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f04f 0400 	mov.w	r4, #0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4623      	mov	r3, r4
 8005dd6:	f7fa fadb 	bl	8000390 <__aeabi_uldivmod>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8005de0:	e248      	b.n	8006274 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005de2:	4b97      	ldr	r3, [pc, #604]	; (8006040 <UART_SetConfig+0x1178>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f000 80a3 	beq.w	8005f36 <UART_SetConfig+0x106e>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005df0:	4b93      	ldr	r3, [pc, #588]	; (8006040 <UART_SetConfig+0x1178>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	08db      	lsrs	r3, r3, #3
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	4a92      	ldr	r2, [pc, #584]	; (8006044 <UART_SetConfig+0x117c>)
 8005dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005e00:	4618      	mov	r0, r3
 8005e02:	f04f 0100 	mov.w	r1, #0
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d067      	beq.n	8005ede <UART_SetConfig+0x1016>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d05e      	beq.n	8005ed4 <UART_SetConfig+0x100c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d055      	beq.n	8005eca <UART_SetConfig+0x1002>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d04c      	beq.n	8005ec0 <UART_SetConfig+0xff8>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d043      	beq.n	8005eb6 <UART_SetConfig+0xfee>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d03a      	beq.n	8005eac <UART_SetConfig+0xfe4>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	d031      	beq.n	8005ea2 <UART_SetConfig+0xfda>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	2b07      	cmp	r3, #7
 8005e44:	d028      	beq.n	8005e98 <UART_SetConfig+0xfd0>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d01f      	beq.n	8005e8e <UART_SetConfig+0xfc6>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	2b09      	cmp	r3, #9
 8005e54:	d016      	beq.n	8005e84 <UART_SetConfig+0xfbc>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	2b0a      	cmp	r3, #10
 8005e5c:	d00d      	beq.n	8005e7a <UART_SetConfig+0xfb2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2b0b      	cmp	r3, #11
 8005e64:	d104      	bne.n	8005e70 <UART_SetConfig+0xfa8>
 8005e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e6a:	f04f 0400 	mov.w	r4, #0
 8005e6e:	e03a      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005e70:	f04f 0301 	mov.w	r3, #1
 8005e74:	f04f 0400 	mov.w	r4, #0
 8005e78:	e035      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005e7a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005e7e:	f04f 0400 	mov.w	r4, #0
 8005e82:	e030      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005e84:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005e88:	f04f 0400 	mov.w	r4, #0
 8005e8c:	e02b      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005e8e:	f04f 0320 	mov.w	r3, #32
 8005e92:	f04f 0400 	mov.w	r4, #0
 8005e96:	e026      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005e98:	f04f 0310 	mov.w	r3, #16
 8005e9c:	f04f 0400 	mov.w	r4, #0
 8005ea0:	e021      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005ea2:	f04f 030c 	mov.w	r3, #12
 8005ea6:	f04f 0400 	mov.w	r4, #0
 8005eaa:	e01c      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005eac:	f04f 030a 	mov.w	r3, #10
 8005eb0:	f04f 0400 	mov.w	r4, #0
 8005eb4:	e017      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005eb6:	f04f 0308 	mov.w	r3, #8
 8005eba:	f04f 0400 	mov.w	r4, #0
 8005ebe:	e012      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005ec0:	f04f 0306 	mov.w	r3, #6
 8005ec4:	f04f 0400 	mov.w	r4, #0
 8005ec8:	e00d      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005eca:	f04f 0304 	mov.w	r3, #4
 8005ece:	f04f 0400 	mov.w	r4, #0
 8005ed2:	e008      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005ed4:	f04f 0302 	mov.w	r3, #2
 8005ed8:	f04f 0400 	mov.w	r4, #0
 8005edc:	e003      	b.n	8005ee6 <UART_SetConfig+0x101e>
 8005ede:	f04f 0301 	mov.w	r3, #1
 8005ee2:	f04f 0400 	mov.w	r4, #0
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	4623      	mov	r3, r4
 8005eea:	f7fa fa51 	bl	8000390 <__aeabi_uldivmod>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4622      	mov	r2, r4
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	f04f 0400 	mov.w	r4, #0
 8005efe:	0214      	lsls	r4, r2, #8
 8005f00:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f04:	020b      	lsls	r3, r1, #8
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6852      	ldr	r2, [r2, #4]
 8005f0a:	0852      	lsrs	r2, r2, #1
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	eb13 0b01 	adds.w	fp, r3, r1
 8005f16:	eb44 0c02 	adc.w	ip, r4, r2
 8005f1a:	4658      	mov	r0, fp
 8005f1c:	4661      	mov	r1, ip
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f04f 0400 	mov.w	r4, #0
 8005f26:	461a      	mov	r2, r3
 8005f28:	4623      	mov	r3, r4
 8005f2a:	f7fa fa31 	bl	8000390 <__aeabi_uldivmod>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8005f34:	e19e      	b.n	8006274 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d05b      	beq.n	8005ff6 <UART_SetConfig+0x112e>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d053      	beq.n	8005fee <UART_SetConfig+0x1126>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d04b      	beq.n	8005fe6 <UART_SetConfig+0x111e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	2b03      	cmp	r3, #3
 8005f54:	d043      	beq.n	8005fde <UART_SetConfig+0x1116>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d03b      	beq.n	8005fd6 <UART_SetConfig+0x110e>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	2b05      	cmp	r3, #5
 8005f64:	d033      	beq.n	8005fce <UART_SetConfig+0x1106>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	2b06      	cmp	r3, #6
 8005f6c:	d02b      	beq.n	8005fc6 <UART_SetConfig+0x10fe>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	2b07      	cmp	r3, #7
 8005f74:	d023      	beq.n	8005fbe <UART_SetConfig+0x10f6>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d01b      	beq.n	8005fb6 <UART_SetConfig+0x10ee>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	2b09      	cmp	r3, #9
 8005f84:	d013      	beq.n	8005fae <UART_SetConfig+0x10e6>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	2b0a      	cmp	r3, #10
 8005f8c:	d00b      	beq.n	8005fa6 <UART_SetConfig+0x10de>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	2b0b      	cmp	r3, #11
 8005f94:	d103      	bne.n	8005f9e <UART_SetConfig+0x10d6>
 8005f96:	4b2b      	ldr	r3, [pc, #172]	; (8006044 <UART_SetConfig+0x117c>)
 8005f98:	f04f 0400 	mov.w	r4, #0
 8005f9c:	e02e      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005f9e:	4b2a      	ldr	r3, [pc, #168]	; (8006048 <UART_SetConfig+0x1180>)
 8005fa0:	f04f 0403 	mov.w	r4, #3
 8005fa4:	e02a      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fa6:	4b29      	ldr	r3, [pc, #164]	; (800604c <UART_SetConfig+0x1184>)
 8005fa8:	f04f 0400 	mov.w	r4, #0
 8005fac:	e026      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fae:	4b28      	ldr	r3, [pc, #160]	; (8006050 <UART_SetConfig+0x1188>)
 8005fb0:	f04f 0400 	mov.w	r4, #0
 8005fb4:	e022      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fb6:	4b27      	ldr	r3, [pc, #156]	; (8006054 <UART_SetConfig+0x118c>)
 8005fb8:	f04f 0400 	mov.w	r4, #0
 8005fbc:	e01e      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fbe:	4b26      	ldr	r3, [pc, #152]	; (8006058 <UART_SetConfig+0x1190>)
 8005fc0:	f04f 0400 	mov.w	r4, #0
 8005fc4:	e01a      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fc6:	a41a      	add	r4, pc, #104	; (adr r4, 8006030 <UART_SetConfig+0x1168>)
 8005fc8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005fcc:	e016      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fce:	4b23      	ldr	r3, [pc, #140]	; (800605c <UART_SetConfig+0x1194>)
 8005fd0:	f04f 0400 	mov.w	r4, #0
 8005fd4:	e012      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fd6:	4b22      	ldr	r3, [pc, #136]	; (8006060 <UART_SetConfig+0x1198>)
 8005fd8:	f04f 0400 	mov.w	r4, #0
 8005fdc:	e00e      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fde:	a416      	add	r4, pc, #88	; (adr r4, 8006038 <UART_SetConfig+0x1170>)
 8005fe0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005fe4:	e00a      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fe6:	4b1f      	ldr	r3, [pc, #124]	; (8006064 <UART_SetConfig+0x119c>)
 8005fe8:	f04f 0400 	mov.w	r4, #0
 8005fec:	e006      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005fee:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <UART_SetConfig+0x11a0>)
 8005ff0:	f04f 0401 	mov.w	r4, #1
 8005ff4:	e002      	b.n	8005ffc <UART_SetConfig+0x1134>
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <UART_SetConfig+0x1180>)
 8005ff8:	f04f 0403 	mov.w	r4, #3
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6852      	ldr	r2, [r2, #4]
 8006000:	0852      	lsrs	r2, r2, #1
 8006002:	4611      	mov	r1, r2
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	eb13 0b01 	adds.w	fp, r3, r1
 800600c:	eb44 0c02 	adc.w	ip, r4, r2
 8006010:	4658      	mov	r0, fp
 8006012:	4661      	mov	r1, ip
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f04f 0400 	mov.w	r4, #0
 800601c:	461a      	mov	r2, r3
 800601e:	4623      	mov	r3, r4
 8006020:	f7fa f9b6 	bl	8000390 <__aeabi_uldivmod>
 8006024:	4603      	mov	r3, r0
 8006026:	460c      	mov	r4, r1
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800602a:	e123      	b.n	8006274 <UART_SetConfig+0x13ac>
 800602c:	f3af 8000 	nop.w
 8006030:	51615500 	.word	0x51615500
 8006034:	00000000 	.word	0x00000000
 8006038:	a2c2aa00 	.word	0xa2c2aa00
 800603c:	00000000 	.word	0x00000000
 8006040:	58024400 	.word	0x58024400
 8006044:	03d09000 	.word	0x03d09000
 8006048:	d0900000 	.word	0xd0900000
 800604c:	07a12000 	.word	0x07a12000
 8006050:	0f424000 	.word	0x0f424000
 8006054:	1e848000 	.word	0x1e848000
 8006058:	3d090000 	.word	0x3d090000
 800605c:	61a80000 	.word	0x61a80000
 8006060:	7a120000 	.word	0x7a120000
 8006064:	f4240000 	.word	0xf4240000
 8006068:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	d05b      	beq.n	800612c <UART_SetConfig+0x1264>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	2b01      	cmp	r3, #1
 800607a:	d053      	beq.n	8006124 <UART_SetConfig+0x125c>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006080:	2b02      	cmp	r3, #2
 8006082:	d04b      	beq.n	800611c <UART_SetConfig+0x1254>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	2b03      	cmp	r3, #3
 800608a:	d043      	beq.n	8006114 <UART_SetConfig+0x124c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006090:	2b04      	cmp	r3, #4
 8006092:	d03b      	beq.n	800610c <UART_SetConfig+0x1244>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	2b05      	cmp	r3, #5
 800609a:	d033      	beq.n	8006104 <UART_SetConfig+0x123c>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	2b06      	cmp	r3, #6
 80060a2:	d02b      	beq.n	80060fc <UART_SetConfig+0x1234>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b07      	cmp	r3, #7
 80060aa:	d023      	beq.n	80060f4 <UART_SetConfig+0x122c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d01b      	beq.n	80060ec <UART_SetConfig+0x1224>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b8:	2b09      	cmp	r3, #9
 80060ba:	d013      	beq.n	80060e4 <UART_SetConfig+0x121c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c0:	2b0a      	cmp	r3, #10
 80060c2:	d00b      	beq.n	80060dc <UART_SetConfig+0x1214>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	2b0b      	cmp	r3, #11
 80060ca:	d103      	bne.n	80060d4 <UART_SetConfig+0x120c>
 80060cc:	4bc0      	ldr	r3, [pc, #768]	; (80063d0 <UART_SetConfig+0x1508>)
 80060ce:	f04f 0400 	mov.w	r4, #0
 80060d2:	e02e      	b.n	8006132 <UART_SetConfig+0x126a>
 80060d4:	4bbf      	ldr	r3, [pc, #764]	; (80063d4 <UART_SetConfig+0x150c>)
 80060d6:	f04f 0400 	mov.w	r4, #0
 80060da:	e02a      	b.n	8006132 <UART_SetConfig+0x126a>
 80060dc:	4bbe      	ldr	r3, [pc, #760]	; (80063d8 <UART_SetConfig+0x1510>)
 80060de:	f04f 0400 	mov.w	r4, #0
 80060e2:	e026      	b.n	8006132 <UART_SetConfig+0x126a>
 80060e4:	4bbd      	ldr	r3, [pc, #756]	; (80063dc <UART_SetConfig+0x1514>)
 80060e6:	f04f 0400 	mov.w	r4, #0
 80060ea:	e022      	b.n	8006132 <UART_SetConfig+0x126a>
 80060ec:	4bbc      	ldr	r3, [pc, #752]	; (80063e0 <UART_SetConfig+0x1518>)
 80060ee:	f04f 0400 	mov.w	r4, #0
 80060f2:	e01e      	b.n	8006132 <UART_SetConfig+0x126a>
 80060f4:	4bbb      	ldr	r3, [pc, #748]	; (80063e4 <UART_SetConfig+0x151c>)
 80060f6:	f04f 0400 	mov.w	r4, #0
 80060fa:	e01a      	b.n	8006132 <UART_SetConfig+0x126a>
 80060fc:	a4b0      	add	r4, pc, #704	; (adr r4, 80063c0 <UART_SetConfig+0x14f8>)
 80060fe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006102:	e016      	b.n	8006132 <UART_SetConfig+0x126a>
 8006104:	4bb8      	ldr	r3, [pc, #736]	; (80063e8 <UART_SetConfig+0x1520>)
 8006106:	f04f 0400 	mov.w	r4, #0
 800610a:	e012      	b.n	8006132 <UART_SetConfig+0x126a>
 800610c:	4bb7      	ldr	r3, [pc, #732]	; (80063ec <UART_SetConfig+0x1524>)
 800610e:	f04f 0400 	mov.w	r4, #0
 8006112:	e00e      	b.n	8006132 <UART_SetConfig+0x126a>
 8006114:	a4ac      	add	r4, pc, #688	; (adr r4, 80063c8 <UART_SetConfig+0x1500>)
 8006116:	e9d4 3400 	ldrd	r3, r4, [r4]
 800611a:	e00a      	b.n	8006132 <UART_SetConfig+0x126a>
 800611c:	4bb4      	ldr	r3, [pc, #720]	; (80063f0 <UART_SetConfig+0x1528>)
 800611e:	f04f 0400 	mov.w	r4, #0
 8006122:	e006      	b.n	8006132 <UART_SetConfig+0x126a>
 8006124:	4bb3      	ldr	r3, [pc, #716]	; (80063f4 <UART_SetConfig+0x152c>)
 8006126:	f04f 0400 	mov.w	r4, #0
 800612a:	e002      	b.n	8006132 <UART_SetConfig+0x126a>
 800612c:	4ba9      	ldr	r3, [pc, #676]	; (80063d4 <UART_SetConfig+0x150c>)
 800612e:	f04f 0400 	mov.w	r4, #0
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6852      	ldr	r2, [r2, #4]
 8006136:	0852      	lsrs	r2, r2, #1
 8006138:	4611      	mov	r1, r2
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	eb13 0b01 	adds.w	fp, r3, r1
 8006142:	eb44 0c02 	adc.w	ip, r4, r2
 8006146:	4658      	mov	r0, fp
 8006148:	4661      	mov	r1, ip
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f04f 0400 	mov.w	r4, #0
 8006152:	461a      	mov	r2, r3
 8006154:	4623      	mov	r3, r4
 8006156:	f7fa f91b 	bl	8000390 <__aeabi_uldivmod>
 800615a:	4603      	mov	r3, r0
 800615c:	460c      	mov	r4, r1
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8006160:	e088      	b.n	8006274 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	d064      	beq.n	8006234 <UART_SetConfig+0x136c>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	2b01      	cmp	r3, #1
 8006170:	d05b      	beq.n	800622a <UART_SetConfig+0x1362>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006176:	2b02      	cmp	r3, #2
 8006178:	d052      	beq.n	8006220 <UART_SetConfig+0x1358>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	2b03      	cmp	r3, #3
 8006180:	d04a      	beq.n	8006218 <UART_SetConfig+0x1350>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b04      	cmp	r3, #4
 8006188:	d041      	beq.n	800620e <UART_SetConfig+0x1346>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2b05      	cmp	r3, #5
 8006190:	d039      	beq.n	8006206 <UART_SetConfig+0x133e>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b06      	cmp	r3, #6
 8006198:	d031      	beq.n	80061fe <UART_SetConfig+0x1336>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b07      	cmp	r3, #7
 80061a0:	d028      	beq.n	80061f4 <UART_SetConfig+0x132c>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	2b08      	cmp	r3, #8
 80061a8:	d01f      	beq.n	80061ea <UART_SetConfig+0x1322>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b09      	cmp	r3, #9
 80061b0:	d016      	beq.n	80061e0 <UART_SetConfig+0x1318>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2b0a      	cmp	r3, #10
 80061b8:	d00d      	beq.n	80061d6 <UART_SetConfig+0x130e>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b0b      	cmp	r3, #11
 80061c0:	d104      	bne.n	80061cc <UART_SetConfig+0x1304>
 80061c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061c6:	f04f 0400 	mov.w	r4, #0
 80061ca:	e037      	b.n	800623c <UART_SetConfig+0x1374>
 80061cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80061d0:	f04f 0400 	mov.w	r4, #0
 80061d4:	e032      	b.n	800623c <UART_SetConfig+0x1374>
 80061d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80061da:	f04f 0400 	mov.w	r4, #0
 80061de:	e02d      	b.n	800623c <UART_SetConfig+0x1374>
 80061e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061e4:	f04f 0400 	mov.w	r4, #0
 80061e8:	e028      	b.n	800623c <UART_SetConfig+0x1374>
 80061ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80061ee:	f04f 0400 	mov.w	r4, #0
 80061f2:	e023      	b.n	800623c <UART_SetConfig+0x1374>
 80061f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80061f8:	f04f 0400 	mov.w	r4, #0
 80061fc:	e01e      	b.n	800623c <UART_SetConfig+0x1374>
 80061fe:	4b7e      	ldr	r3, [pc, #504]	; (80063f8 <UART_SetConfig+0x1530>)
 8006200:	f04f 0400 	mov.w	r4, #0
 8006204:	e01a      	b.n	800623c <UART_SetConfig+0x1374>
 8006206:	4b7d      	ldr	r3, [pc, #500]	; (80063fc <UART_SetConfig+0x1534>)
 8006208:	f04f 0400 	mov.w	r4, #0
 800620c:	e016      	b.n	800623c <UART_SetConfig+0x1374>
 800620e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006212:	f04f 0400 	mov.w	r4, #0
 8006216:	e011      	b.n	800623c <UART_SetConfig+0x1374>
 8006218:	4b79      	ldr	r3, [pc, #484]	; (8006400 <UART_SetConfig+0x1538>)
 800621a:	f04f 0400 	mov.w	r4, #0
 800621e:	e00d      	b.n	800623c <UART_SetConfig+0x1374>
 8006220:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006224:	f04f 0400 	mov.w	r4, #0
 8006228:	e008      	b.n	800623c <UART_SetConfig+0x1374>
 800622a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800622e:	f04f 0400 	mov.w	r4, #0
 8006232:	e003      	b.n	800623c <UART_SetConfig+0x1374>
 8006234:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006238:	f04f 0400 	mov.w	r4, #0
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6852      	ldr	r2, [r2, #4]
 8006240:	0852      	lsrs	r2, r2, #1
 8006242:	4611      	mov	r1, r2
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	eb13 0b01 	adds.w	fp, r3, r1
 800624c:	eb44 0c02 	adc.w	ip, r4, r2
 8006250:	4658      	mov	r0, fp
 8006252:	4661      	mov	r1, ip
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f04f 0400 	mov.w	r4, #0
 800625c:	461a      	mov	r2, r3
 800625e:	4623      	mov	r3, r4
 8006260:	f7fa f896 	bl	8000390 <__aeabi_uldivmod>
 8006264:	4603      	mov	r3, r0
 8006266:	460c      	mov	r4, r1
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 800626a:	e003      	b.n	8006274 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8006272:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800627a:	d309      	bcc.n	8006290 <UART_SetConfig+0x13c8>
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006282:	d205      	bcs.n	8006290 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800628a:	60da      	str	r2, [r3, #12]
 800628c:	f000 bf81 	b.w	8007192 <UART_SetConfig+0x22ca>
        }
        else
        {
          ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006296:	f000 bf7c 	b.w	8007192 <UART_SetConfig+0x22ca>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a2:	f040 83d8 	bne.w	8006a56 <UART_SetConfig+0x1b8e>
  {
    switch (clocksource)
 80062a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	f200 83b1 	bhi.w	8006a12 <UART_SetConfig+0x1b4a>
 80062b0:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x13f0>)
 80062b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b6:	bf00      	nop
 80062b8:	08006405 	.word	0x08006405
 80062bc:	080064bb 	.word	0x080064bb
 80062c0:	08006a13 	.word	0x08006a13
 80062c4:	08006a13 	.word	0x08006a13
 80062c8:	08006571 	.word	0x08006571
 80062cc:	08006a13 	.word	0x08006a13
 80062d0:	08006a13 	.word	0x08006a13
 80062d4:	08006a13 	.word	0x08006a13
 80062d8:	0800662d 	.word	0x0800662d
 80062dc:	08006a13 	.word	0x08006a13
 80062e0:	08006a13 	.word	0x08006a13
 80062e4:	08006a13 	.word	0x08006a13
 80062e8:	08006a13 	.word	0x08006a13
 80062ec:	08006a13 	.word	0x08006a13
 80062f0:	08006a13 	.word	0x08006a13
 80062f4:	08006a13 	.word	0x08006a13
 80062f8:	080066e9 	.word	0x080066e9
 80062fc:	08006a13 	.word	0x08006a13
 8006300:	08006a13 	.word	0x08006a13
 8006304:	08006a13 	.word	0x08006a13
 8006308:	08006a13 	.word	0x08006a13
 800630c:	08006a13 	.word	0x08006a13
 8006310:	08006a13 	.word	0x08006a13
 8006314:	08006a13 	.word	0x08006a13
 8006318:	08006a13 	.word	0x08006a13
 800631c:	08006a13 	.word	0x08006a13
 8006320:	08006a13 	.word	0x08006a13
 8006324:	08006a13 	.word	0x08006a13
 8006328:	08006a13 	.word	0x08006a13
 800632c:	08006a13 	.word	0x08006a13
 8006330:	08006a13 	.word	0x08006a13
 8006334:	08006a13 	.word	0x08006a13
 8006338:	0800685b 	.word	0x0800685b
 800633c:	08006a13 	.word	0x08006a13
 8006340:	08006a13 	.word	0x08006a13
 8006344:	08006a13 	.word	0x08006a13
 8006348:	08006a13 	.word	0x08006a13
 800634c:	08006a13 	.word	0x08006a13
 8006350:	08006a13 	.word	0x08006a13
 8006354:	08006a13 	.word	0x08006a13
 8006358:	08006a13 	.word	0x08006a13
 800635c:	08006a13 	.word	0x08006a13
 8006360:	08006a13 	.word	0x08006a13
 8006364:	08006a13 	.word	0x08006a13
 8006368:	08006a13 	.word	0x08006a13
 800636c:	08006a13 	.word	0x08006a13
 8006370:	08006a13 	.word	0x08006a13
 8006374:	08006a13 	.word	0x08006a13
 8006378:	08006a13 	.word	0x08006a13
 800637c:	08006a13 	.word	0x08006a13
 8006380:	08006a13 	.word	0x08006a13
 8006384:	08006a13 	.word	0x08006a13
 8006388:	08006a13 	.word	0x08006a13
 800638c:	08006a13 	.word	0x08006a13
 8006390:	08006a13 	.word	0x08006a13
 8006394:	08006a13 	.word	0x08006a13
 8006398:	08006a13 	.word	0x08006a13
 800639c:	08006a13 	.word	0x08006a13
 80063a0:	08006a13 	.word	0x08006a13
 80063a4:	08006a13 	.word	0x08006a13
 80063a8:	08006a13 	.word	0x08006a13
 80063ac:	08006a13 	.word	0x08006a13
 80063b0:	08006a13 	.word	0x08006a13
 80063b4:	08006a13 	.word	0x08006a13
 80063b8:	08006951 	.word	0x08006951
 80063bc:	f3af 8000 	nop.w
 80063c0:	05161500 	.word	0x05161500
 80063c4:	00000000 	.word	0x00000000
 80063c8:	0a2c2a00 	.word	0x0a2c2a00
 80063cc:	00000000 	.word	0x00000000
 80063d0:	003d0900 	.word	0x003d0900
 80063d4:	3d090000 	.word	0x3d090000
 80063d8:	007a1200 	.word	0x007a1200
 80063dc:	00f42400 	.word	0x00f42400
 80063e0:	01e84800 	.word	0x01e84800
 80063e4:	03d09000 	.word	0x03d09000
 80063e8:	061a8000 	.word	0x061a8000
 80063ec:	07a12000 	.word	0x07a12000
 80063f0:	0f424000 	.word	0x0f424000
 80063f4:	1e848000 	.word	0x1e848000
 80063f8:	000aaa00 	.word	0x000aaa00
 80063fc:	000ccc00 	.word	0x000ccc00
 8006400:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006404:	f7fc fb8e 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8006408:	4602      	mov	r2, r0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	d044      	beq.n	800649c <UART_SetConfig+0x15d4>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	2b01      	cmp	r3, #1
 8006418:	d03e      	beq.n	8006498 <UART_SetConfig+0x15d0>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	2b02      	cmp	r3, #2
 8006420:	d038      	beq.n	8006494 <UART_SetConfig+0x15cc>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006426:	2b03      	cmp	r3, #3
 8006428:	d032      	beq.n	8006490 <UART_SetConfig+0x15c8>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	2b04      	cmp	r3, #4
 8006430:	d02c      	beq.n	800648c <UART_SetConfig+0x15c4>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006436:	2b05      	cmp	r3, #5
 8006438:	d026      	beq.n	8006488 <UART_SetConfig+0x15c0>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	2b06      	cmp	r3, #6
 8006440:	d020      	beq.n	8006484 <UART_SetConfig+0x15bc>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	2b07      	cmp	r3, #7
 8006448:	d01a      	beq.n	8006480 <UART_SetConfig+0x15b8>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b08      	cmp	r3, #8
 8006450:	d014      	beq.n	800647c <UART_SetConfig+0x15b4>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	2b09      	cmp	r3, #9
 8006458:	d00e      	beq.n	8006478 <UART_SetConfig+0x15b0>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	2b0a      	cmp	r3, #10
 8006460:	d008      	beq.n	8006474 <UART_SetConfig+0x15ac>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	2b0b      	cmp	r3, #11
 8006468:	d102      	bne.n	8006470 <UART_SetConfig+0x15a8>
 800646a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800646e:	e016      	b.n	800649e <UART_SetConfig+0x15d6>
 8006470:	2301      	movs	r3, #1
 8006472:	e014      	b.n	800649e <UART_SetConfig+0x15d6>
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	e012      	b.n	800649e <UART_SetConfig+0x15d6>
 8006478:	2340      	movs	r3, #64	; 0x40
 800647a:	e010      	b.n	800649e <UART_SetConfig+0x15d6>
 800647c:	2320      	movs	r3, #32
 800647e:	e00e      	b.n	800649e <UART_SetConfig+0x15d6>
 8006480:	2310      	movs	r3, #16
 8006482:	e00c      	b.n	800649e <UART_SetConfig+0x15d6>
 8006484:	230c      	movs	r3, #12
 8006486:	e00a      	b.n	800649e <UART_SetConfig+0x15d6>
 8006488:	230a      	movs	r3, #10
 800648a:	e008      	b.n	800649e <UART_SetConfig+0x15d6>
 800648c:	2308      	movs	r3, #8
 800648e:	e006      	b.n	800649e <UART_SetConfig+0x15d6>
 8006490:	2306      	movs	r3, #6
 8006492:	e004      	b.n	800649e <UART_SetConfig+0x15d6>
 8006494:	2304      	movs	r3, #4
 8006496:	e002      	b.n	800649e <UART_SetConfig+0x15d6>
 8006498:	2302      	movs	r3, #2
 800649a:	e000      	b.n	800649e <UART_SetConfig+0x15d6>
 800649c:	2301      	movs	r3, #1
 800649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a2:	005a      	lsls	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	441a      	add	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064b8:	e2af      	b.n	8006a1a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ba:	f7fc fb49 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 80064be:	4602      	mov	r2, r0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d044      	beq.n	8006552 <UART_SetConfig+0x168a>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d03e      	beq.n	800654e <UART_SetConfig+0x1686>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	2b02      	cmp	r3, #2
 80064d6:	d038      	beq.n	800654a <UART_SetConfig+0x1682>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d032      	beq.n	8006546 <UART_SetConfig+0x167e>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e4:	2b04      	cmp	r3, #4
 80064e6:	d02c      	beq.n	8006542 <UART_SetConfig+0x167a>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	2b05      	cmp	r3, #5
 80064ee:	d026      	beq.n	800653e <UART_SetConfig+0x1676>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	2b06      	cmp	r3, #6
 80064f6:	d020      	beq.n	800653a <UART_SetConfig+0x1672>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	2b07      	cmp	r3, #7
 80064fe:	d01a      	beq.n	8006536 <UART_SetConfig+0x166e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	2b08      	cmp	r3, #8
 8006506:	d014      	beq.n	8006532 <UART_SetConfig+0x166a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650c:	2b09      	cmp	r3, #9
 800650e:	d00e      	beq.n	800652e <UART_SetConfig+0x1666>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006514:	2b0a      	cmp	r3, #10
 8006516:	d008      	beq.n	800652a <UART_SetConfig+0x1662>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b0b      	cmp	r3, #11
 800651e:	d102      	bne.n	8006526 <UART_SetConfig+0x165e>
 8006520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006524:	e016      	b.n	8006554 <UART_SetConfig+0x168c>
 8006526:	2301      	movs	r3, #1
 8006528:	e014      	b.n	8006554 <UART_SetConfig+0x168c>
 800652a:	2380      	movs	r3, #128	; 0x80
 800652c:	e012      	b.n	8006554 <UART_SetConfig+0x168c>
 800652e:	2340      	movs	r3, #64	; 0x40
 8006530:	e010      	b.n	8006554 <UART_SetConfig+0x168c>
 8006532:	2320      	movs	r3, #32
 8006534:	e00e      	b.n	8006554 <UART_SetConfig+0x168c>
 8006536:	2310      	movs	r3, #16
 8006538:	e00c      	b.n	8006554 <UART_SetConfig+0x168c>
 800653a:	230c      	movs	r3, #12
 800653c:	e00a      	b.n	8006554 <UART_SetConfig+0x168c>
 800653e:	230a      	movs	r3, #10
 8006540:	e008      	b.n	8006554 <UART_SetConfig+0x168c>
 8006542:	2308      	movs	r3, #8
 8006544:	e006      	b.n	8006554 <UART_SetConfig+0x168c>
 8006546:	2306      	movs	r3, #6
 8006548:	e004      	b.n	8006554 <UART_SetConfig+0x168c>
 800654a:	2304      	movs	r3, #4
 800654c:	e002      	b.n	8006554 <UART_SetConfig+0x168c>
 800654e:	2302      	movs	r3, #2
 8006550:	e000      	b.n	8006554 <UART_SetConfig+0x168c>
 8006552:	2301      	movs	r3, #1
 8006554:	fbb2 f3f3 	udiv	r3, r2, r3
 8006558:	005a      	lsls	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	085b      	lsrs	r3, r3, #1
 8006560:	441a      	add	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	fbb2 f3f3 	udiv	r3, r2, r3
 800656a:	b29b      	uxth	r3, r3
 800656c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800656e:	e254      	b.n	8006a1a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	4618      	mov	r0, r3
 8006576:	f7fd fa07 	bl	8003988 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	d044      	beq.n	800660e <UART_SetConfig+0x1746>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b01      	cmp	r3, #1
 800658a:	d03e      	beq.n	800660a <UART_SetConfig+0x1742>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	2b02      	cmp	r3, #2
 8006592:	d038      	beq.n	8006606 <UART_SetConfig+0x173e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2b03      	cmp	r3, #3
 800659a:	d032      	beq.n	8006602 <UART_SetConfig+0x173a>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d02c      	beq.n	80065fe <UART_SetConfig+0x1736>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	d026      	beq.n	80065fa <UART_SetConfig+0x1732>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	2b06      	cmp	r3, #6
 80065b2:	d020      	beq.n	80065f6 <UART_SetConfig+0x172e>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b07      	cmp	r3, #7
 80065ba:	d01a      	beq.n	80065f2 <UART_SetConfig+0x172a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d014      	beq.n	80065ee <UART_SetConfig+0x1726>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b09      	cmp	r3, #9
 80065ca:	d00e      	beq.n	80065ea <UART_SetConfig+0x1722>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b0a      	cmp	r3, #10
 80065d2:	d008      	beq.n	80065e6 <UART_SetConfig+0x171e>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	2b0b      	cmp	r3, #11
 80065da:	d102      	bne.n	80065e2 <UART_SetConfig+0x171a>
 80065dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065e0:	e016      	b.n	8006610 <UART_SetConfig+0x1748>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e014      	b.n	8006610 <UART_SetConfig+0x1748>
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	e012      	b.n	8006610 <UART_SetConfig+0x1748>
 80065ea:	2340      	movs	r3, #64	; 0x40
 80065ec:	e010      	b.n	8006610 <UART_SetConfig+0x1748>
 80065ee:	2320      	movs	r3, #32
 80065f0:	e00e      	b.n	8006610 <UART_SetConfig+0x1748>
 80065f2:	2310      	movs	r3, #16
 80065f4:	e00c      	b.n	8006610 <UART_SetConfig+0x1748>
 80065f6:	230c      	movs	r3, #12
 80065f8:	e00a      	b.n	8006610 <UART_SetConfig+0x1748>
 80065fa:	230a      	movs	r3, #10
 80065fc:	e008      	b.n	8006610 <UART_SetConfig+0x1748>
 80065fe:	2308      	movs	r3, #8
 8006600:	e006      	b.n	8006610 <UART_SetConfig+0x1748>
 8006602:	2306      	movs	r3, #6
 8006604:	e004      	b.n	8006610 <UART_SetConfig+0x1748>
 8006606:	2304      	movs	r3, #4
 8006608:	e002      	b.n	8006610 <UART_SetConfig+0x1748>
 800660a:	2302      	movs	r3, #2
 800660c:	e000      	b.n	8006610 <UART_SetConfig+0x1748>
 800660e:	2301      	movs	r3, #1
 8006610:	fbb2 f3f3 	udiv	r3, r2, r3
 8006614:	005a      	lsls	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	085b      	lsrs	r3, r3, #1
 800661c:	441a      	add	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	fbb2 f3f3 	udiv	r3, r2, r3
 8006626:	b29b      	uxth	r3, r3
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800662a:	e1f6      	b.n	8006a1a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800662c:	f107 0308 	add.w	r3, r7, #8
 8006630:	4618      	mov	r0, r3
 8006632:	f7fd faf5 	bl	8003c20 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d044      	beq.n	80066ca <UART_SetConfig+0x1802>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	2b01      	cmp	r3, #1
 8006646:	d03e      	beq.n	80066c6 <UART_SetConfig+0x17fe>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	2b02      	cmp	r3, #2
 800664e:	d038      	beq.n	80066c2 <UART_SetConfig+0x17fa>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2b03      	cmp	r3, #3
 8006656:	d032      	beq.n	80066be <UART_SetConfig+0x17f6>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	2b04      	cmp	r3, #4
 800665e:	d02c      	beq.n	80066ba <UART_SetConfig+0x17f2>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	2b05      	cmp	r3, #5
 8006666:	d026      	beq.n	80066b6 <UART_SetConfig+0x17ee>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	2b06      	cmp	r3, #6
 800666e:	d020      	beq.n	80066b2 <UART_SetConfig+0x17ea>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	2b07      	cmp	r3, #7
 8006676:	d01a      	beq.n	80066ae <UART_SetConfig+0x17e6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	2b08      	cmp	r3, #8
 800667e:	d014      	beq.n	80066aa <UART_SetConfig+0x17e2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	2b09      	cmp	r3, #9
 8006686:	d00e      	beq.n	80066a6 <UART_SetConfig+0x17de>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	2b0a      	cmp	r3, #10
 800668e:	d008      	beq.n	80066a2 <UART_SetConfig+0x17da>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	2b0b      	cmp	r3, #11
 8006696:	d102      	bne.n	800669e <UART_SetConfig+0x17d6>
 8006698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800669c:	e016      	b.n	80066cc <UART_SetConfig+0x1804>
 800669e:	2301      	movs	r3, #1
 80066a0:	e014      	b.n	80066cc <UART_SetConfig+0x1804>
 80066a2:	2380      	movs	r3, #128	; 0x80
 80066a4:	e012      	b.n	80066cc <UART_SetConfig+0x1804>
 80066a6:	2340      	movs	r3, #64	; 0x40
 80066a8:	e010      	b.n	80066cc <UART_SetConfig+0x1804>
 80066aa:	2320      	movs	r3, #32
 80066ac:	e00e      	b.n	80066cc <UART_SetConfig+0x1804>
 80066ae:	2310      	movs	r3, #16
 80066b0:	e00c      	b.n	80066cc <UART_SetConfig+0x1804>
 80066b2:	230c      	movs	r3, #12
 80066b4:	e00a      	b.n	80066cc <UART_SetConfig+0x1804>
 80066b6:	230a      	movs	r3, #10
 80066b8:	e008      	b.n	80066cc <UART_SetConfig+0x1804>
 80066ba:	2308      	movs	r3, #8
 80066bc:	e006      	b.n	80066cc <UART_SetConfig+0x1804>
 80066be:	2306      	movs	r3, #6
 80066c0:	e004      	b.n	80066cc <UART_SetConfig+0x1804>
 80066c2:	2304      	movs	r3, #4
 80066c4:	e002      	b.n	80066cc <UART_SetConfig+0x1804>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e000      	b.n	80066cc <UART_SetConfig+0x1804>
 80066ca:	2301      	movs	r3, #1
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	005a      	lsls	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	441a      	add	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066e6:	e198      	b.n	8006a1a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066e8:	4b87      	ldr	r3, [pc, #540]	; (8006908 <UART_SetConfig+0x1a40>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d05e      	beq.n	80067b2 <UART_SetConfig+0x18ea>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066f4:	4b84      	ldr	r3, [pc, #528]	; (8006908 <UART_SetConfig+0x1a40>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	08db      	lsrs	r3, r3, #3
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	4a83      	ldr	r2, [pc, #524]	; (800690c <UART_SetConfig+0x1a44>)
 8006700:	40da      	lsrs	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d044      	beq.n	8006794 <UART_SetConfig+0x18cc>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	2b01      	cmp	r3, #1
 8006710:	d03e      	beq.n	8006790 <UART_SetConfig+0x18c8>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	2b02      	cmp	r3, #2
 8006718:	d038      	beq.n	800678c <UART_SetConfig+0x18c4>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	2b03      	cmp	r3, #3
 8006720:	d032      	beq.n	8006788 <UART_SetConfig+0x18c0>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	2b04      	cmp	r3, #4
 8006728:	d02c      	beq.n	8006784 <UART_SetConfig+0x18bc>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	2b05      	cmp	r3, #5
 8006730:	d026      	beq.n	8006780 <UART_SetConfig+0x18b8>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	2b06      	cmp	r3, #6
 8006738:	d020      	beq.n	800677c <UART_SetConfig+0x18b4>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	2b07      	cmp	r3, #7
 8006740:	d01a      	beq.n	8006778 <UART_SetConfig+0x18b0>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	2b08      	cmp	r3, #8
 8006748:	d014      	beq.n	8006774 <UART_SetConfig+0x18ac>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	2b09      	cmp	r3, #9
 8006750:	d00e      	beq.n	8006770 <UART_SetConfig+0x18a8>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	2b0a      	cmp	r3, #10
 8006758:	d008      	beq.n	800676c <UART_SetConfig+0x18a4>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	2b0b      	cmp	r3, #11
 8006760:	d102      	bne.n	8006768 <UART_SetConfig+0x18a0>
 8006762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006766:	e016      	b.n	8006796 <UART_SetConfig+0x18ce>
 8006768:	2301      	movs	r3, #1
 800676a:	e014      	b.n	8006796 <UART_SetConfig+0x18ce>
 800676c:	2380      	movs	r3, #128	; 0x80
 800676e:	e012      	b.n	8006796 <UART_SetConfig+0x18ce>
 8006770:	2340      	movs	r3, #64	; 0x40
 8006772:	e010      	b.n	8006796 <UART_SetConfig+0x18ce>
 8006774:	2320      	movs	r3, #32
 8006776:	e00e      	b.n	8006796 <UART_SetConfig+0x18ce>
 8006778:	2310      	movs	r3, #16
 800677a:	e00c      	b.n	8006796 <UART_SetConfig+0x18ce>
 800677c:	230c      	movs	r3, #12
 800677e:	e00a      	b.n	8006796 <UART_SetConfig+0x18ce>
 8006780:	230a      	movs	r3, #10
 8006782:	e008      	b.n	8006796 <UART_SetConfig+0x18ce>
 8006784:	2308      	movs	r3, #8
 8006786:	e006      	b.n	8006796 <UART_SetConfig+0x18ce>
 8006788:	2306      	movs	r3, #6
 800678a:	e004      	b.n	8006796 <UART_SetConfig+0x18ce>
 800678c:	2304      	movs	r3, #4
 800678e:	e002      	b.n	8006796 <UART_SetConfig+0x18ce>
 8006790:	2302      	movs	r3, #2
 8006792:	e000      	b.n	8006796 <UART_SetConfig+0x18ce>
 8006794:	2301      	movs	r3, #1
 8006796:	fbb2 f3f3 	udiv	r3, r2, r3
 800679a:	005a      	lsls	r2, r3, #1
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	441a      	add	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80067b0:	e133      	b.n	8006a1a <UART_SetConfig+0x1b52>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d043      	beq.n	8006842 <UART_SetConfig+0x197a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d03d      	beq.n	800683e <UART_SetConfig+0x1976>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d037      	beq.n	800683a <UART_SetConfig+0x1972>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2b03      	cmp	r3, #3
 80067d0:	d031      	beq.n	8006836 <UART_SetConfig+0x196e>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d02b      	beq.n	8006832 <UART_SetConfig+0x196a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d025      	beq.n	800682e <UART_SetConfig+0x1966>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	2b06      	cmp	r3, #6
 80067e8:	d01f      	beq.n	800682a <UART_SetConfig+0x1962>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	2b07      	cmp	r3, #7
 80067f0:	d019      	beq.n	8006826 <UART_SetConfig+0x195e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f6:	2b08      	cmp	r3, #8
 80067f8:	d013      	beq.n	8006822 <UART_SetConfig+0x195a>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b09      	cmp	r3, #9
 8006800:	d00d      	beq.n	800681e <UART_SetConfig+0x1956>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	2b0a      	cmp	r3, #10
 8006808:	d007      	beq.n	800681a <UART_SetConfig+0x1952>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	2b0b      	cmp	r3, #11
 8006810:	d101      	bne.n	8006816 <UART_SetConfig+0x194e>
 8006812:	4b3f      	ldr	r3, [pc, #252]	; (8006910 <UART_SetConfig+0x1a48>)
 8006814:	e016      	b.n	8006844 <UART_SetConfig+0x197c>
 8006816:	4b3f      	ldr	r3, [pc, #252]	; (8006914 <UART_SetConfig+0x1a4c>)
 8006818:	e014      	b.n	8006844 <UART_SetConfig+0x197c>
 800681a:	4b3f      	ldr	r3, [pc, #252]	; (8006918 <UART_SetConfig+0x1a50>)
 800681c:	e012      	b.n	8006844 <UART_SetConfig+0x197c>
 800681e:	4b3f      	ldr	r3, [pc, #252]	; (800691c <UART_SetConfig+0x1a54>)
 8006820:	e010      	b.n	8006844 <UART_SetConfig+0x197c>
 8006822:	4b3f      	ldr	r3, [pc, #252]	; (8006920 <UART_SetConfig+0x1a58>)
 8006824:	e00e      	b.n	8006844 <UART_SetConfig+0x197c>
 8006826:	4b3f      	ldr	r3, [pc, #252]	; (8006924 <UART_SetConfig+0x1a5c>)
 8006828:	e00c      	b.n	8006844 <UART_SetConfig+0x197c>
 800682a:	4b3f      	ldr	r3, [pc, #252]	; (8006928 <UART_SetConfig+0x1a60>)
 800682c:	e00a      	b.n	8006844 <UART_SetConfig+0x197c>
 800682e:	4b3f      	ldr	r3, [pc, #252]	; (800692c <UART_SetConfig+0x1a64>)
 8006830:	e008      	b.n	8006844 <UART_SetConfig+0x197c>
 8006832:	4b3f      	ldr	r3, [pc, #252]	; (8006930 <UART_SetConfig+0x1a68>)
 8006834:	e006      	b.n	8006844 <UART_SetConfig+0x197c>
 8006836:	4b3f      	ldr	r3, [pc, #252]	; (8006934 <UART_SetConfig+0x1a6c>)
 8006838:	e004      	b.n	8006844 <UART_SetConfig+0x197c>
 800683a:	4b3f      	ldr	r3, [pc, #252]	; (8006938 <UART_SetConfig+0x1a70>)
 800683c:	e002      	b.n	8006844 <UART_SetConfig+0x197c>
 800683e:	4b33      	ldr	r3, [pc, #204]	; (800690c <UART_SetConfig+0x1a44>)
 8006840:	e000      	b.n	8006844 <UART_SetConfig+0x197c>
 8006842:	4b34      	ldr	r3, [pc, #208]	; (8006914 <UART_SetConfig+0x1a4c>)
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6852      	ldr	r2, [r2, #4]
 8006848:	0852      	lsrs	r2, r2, #1
 800684a:	441a      	add	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	fbb2 f3f3 	udiv	r3, r2, r3
 8006854:	b29b      	uxth	r3, r3
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006858:	e0df      	b.n	8006a1a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d045      	beq.n	80068ee <UART_SetConfig+0x1a26>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2b01      	cmp	r3, #1
 8006868:	d03f      	beq.n	80068ea <UART_SetConfig+0x1a22>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	2b02      	cmp	r3, #2
 8006870:	d039      	beq.n	80068e6 <UART_SetConfig+0x1a1e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006876:	2b03      	cmp	r3, #3
 8006878:	d033      	beq.n	80068e2 <UART_SetConfig+0x1a1a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2b04      	cmp	r3, #4
 8006880:	d02d      	beq.n	80068de <UART_SetConfig+0x1a16>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	2b05      	cmp	r3, #5
 8006888:	d027      	beq.n	80068da <UART_SetConfig+0x1a12>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	2b06      	cmp	r3, #6
 8006890:	d021      	beq.n	80068d6 <UART_SetConfig+0x1a0e>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006896:	2b07      	cmp	r3, #7
 8006898:	d01b      	beq.n	80068d2 <UART_SetConfig+0x1a0a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d015      	beq.n	80068ce <UART_SetConfig+0x1a06>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	2b09      	cmp	r3, #9
 80068a8:	d00f      	beq.n	80068ca <UART_SetConfig+0x1a02>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	2b0a      	cmp	r3, #10
 80068b0:	d008      	beq.n	80068c4 <UART_SetConfig+0x19fc>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	2b0b      	cmp	r3, #11
 80068b8:	d102      	bne.n	80068c0 <UART_SetConfig+0x19f8>
 80068ba:	f647 2312 	movw	r3, #31250	; 0x7a12
 80068be:	e017      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068c0:	4b18      	ldr	r3, [pc, #96]	; (8006924 <UART_SetConfig+0x1a5c>)
 80068c2:	e015      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80068c8:	e012      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068ca:	4b1c      	ldr	r3, [pc, #112]	; (800693c <UART_SetConfig+0x1a74>)
 80068cc:	e010      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068ce:	4b1c      	ldr	r3, [pc, #112]	; (8006940 <UART_SetConfig+0x1a78>)
 80068d0:	e00e      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068d2:	4b0f      	ldr	r3, [pc, #60]	; (8006910 <UART_SetConfig+0x1a48>)
 80068d4:	e00c      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068d6:	4b1b      	ldr	r3, [pc, #108]	; (8006944 <UART_SetConfig+0x1a7c>)
 80068d8:	e00a      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <UART_SetConfig+0x1a80>)
 80068dc:	e008      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068de:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <UART_SetConfig+0x1a50>)
 80068e0:	e006      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068e2:	4b1a      	ldr	r3, [pc, #104]	; (800694c <UART_SetConfig+0x1a84>)
 80068e4:	e004      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068e6:	4b0d      	ldr	r3, [pc, #52]	; (800691c <UART_SetConfig+0x1a54>)
 80068e8:	e002      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068ea:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <UART_SetConfig+0x1a58>)
 80068ec:	e000      	b.n	80068f0 <UART_SetConfig+0x1a28>
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <UART_SetConfig+0x1a5c>)
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	6852      	ldr	r2, [r2, #4]
 80068f4:	0852      	lsrs	r2, r2, #1
 80068f6:	441a      	add	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006900:	b29b      	uxth	r3, r3
 8006902:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006904:	e089      	b.n	8006a1a <UART_SetConfig+0x1b52>
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	03d09000 	.word	0x03d09000
 8006910:	0007a120 	.word	0x0007a120
 8006914:	07a12000 	.word	0x07a12000
 8006918:	000f4240 	.word	0x000f4240
 800691c:	001e8480 	.word	0x001e8480
 8006920:	003d0900 	.word	0x003d0900
 8006924:	007a1200 	.word	0x007a1200
 8006928:	00a2c2aa 	.word	0x00a2c2aa
 800692c:	00c35000 	.word	0x00c35000
 8006930:	00f42400 	.word	0x00f42400
 8006934:	01458554 	.word	0x01458554
 8006938:	01e84800 	.word	0x01e84800
 800693c:	0001e848 	.word	0x0001e848
 8006940:	0003d090 	.word	0x0003d090
 8006944:	000a2c2a 	.word	0x000a2c2a
 8006948:	000c3500 	.word	0x000c3500
 800694c:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d04f      	beq.n	80069f8 <UART_SetConfig+0x1b30>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	2b01      	cmp	r3, #1
 800695e:	d048      	beq.n	80069f2 <UART_SetConfig+0x1b2a>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	2b02      	cmp	r3, #2
 8006966:	d041      	beq.n	80069ec <UART_SetConfig+0x1b24>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	2b03      	cmp	r3, #3
 800696e:	d03a      	beq.n	80069e6 <UART_SetConfig+0x1b1e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	2b04      	cmp	r3, #4
 8006976:	d033      	beq.n	80069e0 <UART_SetConfig+0x1b18>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b05      	cmp	r3, #5
 800697e:	d02c      	beq.n	80069da <UART_SetConfig+0x1b12>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	2b06      	cmp	r3, #6
 8006986:	d025      	beq.n	80069d4 <UART_SetConfig+0x1b0c>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	2b07      	cmp	r3, #7
 800698e:	d01e      	beq.n	80069ce <UART_SetConfig+0x1b06>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	2b08      	cmp	r3, #8
 8006996:	d017      	beq.n	80069c8 <UART_SetConfig+0x1b00>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	2b09      	cmp	r3, #9
 800699e:	d010      	beq.n	80069c2 <UART_SetConfig+0x1afa>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	2b0a      	cmp	r3, #10
 80069a6:	d009      	beq.n	80069bc <UART_SetConfig+0x1af4>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	2b0b      	cmp	r3, #11
 80069ae:	d102      	bne.n	80069b6 <UART_SetConfig+0x1aee>
 80069b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069b4:	e022      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069ba:	e01f      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069c0:	e01c      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069c6:	e019      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069cc:	e016      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069d2:	e013      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069d4:	f241 5354 	movw	r3, #5460	; 0x1554
 80069d8:	e010      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069da:	f641 1398 	movw	r3, #6552	; 0x1998
 80069de:	e00d      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069e4:	e00a      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069e6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80069ea:	e007      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069f0:	e004      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069f6:	e001      	b.n	80069fc <UART_SetConfig+0x1b34>
 80069f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6852      	ldr	r2, [r2, #4]
 8006a00:	0852      	lsrs	r2, r2, #1
 8006a02:	441a      	add	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006a10:	e003      	b.n	8006a1a <UART_SetConfig+0x1b52>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8006a18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	2b0f      	cmp	r3, #15
 8006a1e:	d916      	bls.n	8006a4e <UART_SetConfig+0x1b86>
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a26:	d212      	bcs.n	8006a4e <UART_SetConfig+0x1b86>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f023 030f 	bic.w	r3, r3, #15
 8006a30:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a40:	4313      	orrs	r3, r2
 8006a42:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a4a:	60da      	str	r2, [r3, #12]
 8006a4c:	e3a1      	b.n	8007192 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a54:	e39d      	b.n	8007192 <UART_SetConfig+0x22ca>
    }
  }
  else
  {
    switch (clocksource)
 8006a56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	f200 8386 	bhi.w	800716c <UART_SetConfig+0x22a4>
 8006a60:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <UART_SetConfig+0x1ba0>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006b6d 	.word	0x08006b6d
 8006a6c:	08006c21 	.word	0x08006c21
 8006a70:	0800716d 	.word	0x0800716d
 8006a74:	0800716d 	.word	0x0800716d
 8006a78:	08006cd5 	.word	0x08006cd5
 8006a7c:	0800716d 	.word	0x0800716d
 8006a80:	0800716d 	.word	0x0800716d
 8006a84:	0800716d 	.word	0x0800716d
 8006a88:	08006d8f 	.word	0x08006d8f
 8006a8c:	0800716d 	.word	0x0800716d
 8006a90:	0800716d 	.word	0x0800716d
 8006a94:	0800716d 	.word	0x0800716d
 8006a98:	0800716d 	.word	0x0800716d
 8006a9c:	0800716d 	.word	0x0800716d
 8006aa0:	0800716d 	.word	0x0800716d
 8006aa4:	0800716d 	.word	0x0800716d
 8006aa8:	08006e49 	.word	0x08006e49
 8006aac:	0800716d 	.word	0x0800716d
 8006ab0:	0800716d 	.word	0x0800716d
 8006ab4:	0800716d 	.word	0x0800716d
 8006ab8:	0800716d 	.word	0x0800716d
 8006abc:	0800716d 	.word	0x0800716d
 8006ac0:	0800716d 	.word	0x0800716d
 8006ac4:	0800716d 	.word	0x0800716d
 8006ac8:	0800716d 	.word	0x0800716d
 8006acc:	0800716d 	.word	0x0800716d
 8006ad0:	0800716d 	.word	0x0800716d
 8006ad4:	0800716d 	.word	0x0800716d
 8006ad8:	0800716d 	.word	0x0800716d
 8006adc:	0800716d 	.word	0x0800716d
 8006ae0:	0800716d 	.word	0x0800716d
 8006ae4:	0800716d 	.word	0x0800716d
 8006ae8:	08006fb9 	.word	0x08006fb9
 8006aec:	0800716d 	.word	0x0800716d
 8006af0:	0800716d 	.word	0x0800716d
 8006af4:	0800716d 	.word	0x0800716d
 8006af8:	0800716d 	.word	0x0800716d
 8006afc:	0800716d 	.word	0x0800716d
 8006b00:	0800716d 	.word	0x0800716d
 8006b04:	0800716d 	.word	0x0800716d
 8006b08:	0800716d 	.word	0x0800716d
 8006b0c:	0800716d 	.word	0x0800716d
 8006b10:	0800716d 	.word	0x0800716d
 8006b14:	0800716d 	.word	0x0800716d
 8006b18:	0800716d 	.word	0x0800716d
 8006b1c:	0800716d 	.word	0x0800716d
 8006b20:	0800716d 	.word	0x0800716d
 8006b24:	0800716d 	.word	0x0800716d
 8006b28:	0800716d 	.word	0x0800716d
 8006b2c:	0800716d 	.word	0x0800716d
 8006b30:	0800716d 	.word	0x0800716d
 8006b34:	0800716d 	.word	0x0800716d
 8006b38:	0800716d 	.word	0x0800716d
 8006b3c:	0800716d 	.word	0x0800716d
 8006b40:	0800716d 	.word	0x0800716d
 8006b44:	0800716d 	.word	0x0800716d
 8006b48:	0800716d 	.word	0x0800716d
 8006b4c:	0800716d 	.word	0x0800716d
 8006b50:	0800716d 	.word	0x0800716d
 8006b54:	0800716d 	.word	0x0800716d
 8006b58:	0800716d 	.word	0x0800716d
 8006b5c:	0800716d 	.word	0x0800716d
 8006b60:	0800716d 	.word	0x0800716d
 8006b64:	0800716d 	.word	0x0800716d
 8006b68:	080070ad 	.word	0x080070ad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b6c:	f7fb ffda 	bl	8002b24 <HAL_RCC_GetPCLK1Freq>
 8006b70:	4602      	mov	r2, r0
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d044      	beq.n	8006c04 <UART_SetConfig+0x1d3c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d03e      	beq.n	8006c00 <UART_SetConfig+0x1d38>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d038      	beq.n	8006bfc <UART_SetConfig+0x1d34>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d032      	beq.n	8006bf8 <UART_SetConfig+0x1d30>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d02c      	beq.n	8006bf4 <UART_SetConfig+0x1d2c>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	2b05      	cmp	r3, #5
 8006ba0:	d026      	beq.n	8006bf0 <UART_SetConfig+0x1d28>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b06      	cmp	r3, #6
 8006ba8:	d020      	beq.n	8006bec <UART_SetConfig+0x1d24>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	2b07      	cmp	r3, #7
 8006bb0:	d01a      	beq.n	8006be8 <UART_SetConfig+0x1d20>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d014      	beq.n	8006be4 <UART_SetConfig+0x1d1c>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b09      	cmp	r3, #9
 8006bc0:	d00e      	beq.n	8006be0 <UART_SetConfig+0x1d18>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	2b0a      	cmp	r3, #10
 8006bc8:	d008      	beq.n	8006bdc <UART_SetConfig+0x1d14>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bce:	2b0b      	cmp	r3, #11
 8006bd0:	d102      	bne.n	8006bd8 <UART_SetConfig+0x1d10>
 8006bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bd6:	e016      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e014      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	e012      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006be0:	2340      	movs	r3, #64	; 0x40
 8006be2:	e010      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006be4:	2320      	movs	r3, #32
 8006be6:	e00e      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006be8:	2310      	movs	r3, #16
 8006bea:	e00c      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006bec:	230c      	movs	r3, #12
 8006bee:	e00a      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006bf0:	230a      	movs	r3, #10
 8006bf2:	e008      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	e006      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006bf8:	2306      	movs	r3, #6
 8006bfa:	e004      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	e002      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e000      	b.n	8006c06 <UART_SetConfig+0x1d3e>
 8006c04:	2301      	movs	r3, #1
 8006c06:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	085b      	lsrs	r3, r3, #1
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c1e:	e2a9      	b.n	8007174 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_D2PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c20:	f7fb ff96 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 8006c24:	4602      	mov	r2, r0
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d044      	beq.n	8006cb8 <UART_SetConfig+0x1df0>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d03e      	beq.n	8006cb4 <UART_SetConfig+0x1dec>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d038      	beq.n	8006cb0 <UART_SetConfig+0x1de8>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d032      	beq.n	8006cac <UART_SetConfig+0x1de4>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	d02c      	beq.n	8006ca8 <UART_SetConfig+0x1de0>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	2b05      	cmp	r3, #5
 8006c54:	d026      	beq.n	8006ca4 <UART_SetConfig+0x1ddc>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d020      	beq.n	8006ca0 <UART_SetConfig+0x1dd8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	2b07      	cmp	r3, #7
 8006c64:	d01a      	beq.n	8006c9c <UART_SetConfig+0x1dd4>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d014      	beq.n	8006c98 <UART_SetConfig+0x1dd0>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	2b09      	cmp	r3, #9
 8006c74:	d00e      	beq.n	8006c94 <UART_SetConfig+0x1dcc>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	2b0a      	cmp	r3, #10
 8006c7c:	d008      	beq.n	8006c90 <UART_SetConfig+0x1dc8>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b0b      	cmp	r3, #11
 8006c84:	d102      	bne.n	8006c8c <UART_SetConfig+0x1dc4>
 8006c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c8a:	e016      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e014      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006c90:	2380      	movs	r3, #128	; 0x80
 8006c92:	e012      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006c94:	2340      	movs	r3, #64	; 0x40
 8006c96:	e010      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006c98:	2320      	movs	r3, #32
 8006c9a:	e00e      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006c9c:	2310      	movs	r3, #16
 8006c9e:	e00c      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006ca0:	230c      	movs	r3, #12
 8006ca2:	e00a      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006ca4:	230a      	movs	r3, #10
 8006ca6:	e008      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006ca8:	2308      	movs	r3, #8
 8006caa:	e006      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006cac:	2306      	movs	r3, #6
 8006cae:	e004      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	e002      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e000      	b.n	8006cba <UART_SetConfig+0x1df2>
 8006cb8:	2301      	movs	r3, #1
 8006cba:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	441a      	add	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006cd2:	e24f      	b.n	8007174 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cd4:	f107 0314 	add.w	r3, r7, #20
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fc fe55 	bl	8003988 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d044      	beq.n	8006d72 <UART_SetConfig+0x1eaa>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d03e      	beq.n	8006d6e <UART_SetConfig+0x1ea6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d038      	beq.n	8006d6a <UART_SetConfig+0x1ea2>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d032      	beq.n	8006d66 <UART_SetConfig+0x1e9e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d02c      	beq.n	8006d62 <UART_SetConfig+0x1e9a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	2b05      	cmp	r3, #5
 8006d0e:	d026      	beq.n	8006d5e <UART_SetConfig+0x1e96>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d14:	2b06      	cmp	r3, #6
 8006d16:	d020      	beq.n	8006d5a <UART_SetConfig+0x1e92>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1c:	2b07      	cmp	r3, #7
 8006d1e:	d01a      	beq.n	8006d56 <UART_SetConfig+0x1e8e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d014      	beq.n	8006d52 <UART_SetConfig+0x1e8a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	2b09      	cmp	r3, #9
 8006d2e:	d00e      	beq.n	8006d4e <UART_SetConfig+0x1e86>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	2b0a      	cmp	r3, #10
 8006d36:	d008      	beq.n	8006d4a <UART_SetConfig+0x1e82>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	2b0b      	cmp	r3, #11
 8006d3e:	d102      	bne.n	8006d46 <UART_SetConfig+0x1e7e>
 8006d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d44:	e016      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e014      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d4a:	2380      	movs	r3, #128	; 0x80
 8006d4c:	e012      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d4e:	2340      	movs	r3, #64	; 0x40
 8006d50:	e010      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d52:	2320      	movs	r3, #32
 8006d54:	e00e      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d56:	2310      	movs	r3, #16
 8006d58:	e00c      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d5a:	230c      	movs	r3, #12
 8006d5c:	e00a      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d5e:	230a      	movs	r3, #10
 8006d60:	e008      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d62:	2308      	movs	r3, #8
 8006d64:	e006      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d66:	2306      	movs	r3, #6
 8006d68:	e004      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d6a:	2304      	movs	r3, #4
 8006d6c:	e002      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e000      	b.n	8006d74 <UART_SetConfig+0x1eac>
 8006d72:	2301      	movs	r3, #1
 8006d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	441a      	add	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d8c:	e1f2      	b.n	8007174 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d8e:	f107 0308 	add.w	r3, r7, #8
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fc ff44 	bl	8003c20 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d044      	beq.n	8006e2c <UART_SetConfig+0x1f64>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d03e      	beq.n	8006e28 <UART_SetConfig+0x1f60>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d038      	beq.n	8006e24 <UART_SetConfig+0x1f5c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d032      	beq.n	8006e20 <UART_SetConfig+0x1f58>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d02c      	beq.n	8006e1c <UART_SetConfig+0x1f54>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	2b05      	cmp	r3, #5
 8006dc8:	d026      	beq.n	8006e18 <UART_SetConfig+0x1f50>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dce:	2b06      	cmp	r3, #6
 8006dd0:	d020      	beq.n	8006e14 <UART_SetConfig+0x1f4c>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	2b07      	cmp	r3, #7
 8006dd8:	d01a      	beq.n	8006e10 <UART_SetConfig+0x1f48>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d014      	beq.n	8006e0c <UART_SetConfig+0x1f44>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	2b09      	cmp	r3, #9
 8006de8:	d00e      	beq.n	8006e08 <UART_SetConfig+0x1f40>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	2b0a      	cmp	r3, #10
 8006df0:	d008      	beq.n	8006e04 <UART_SetConfig+0x1f3c>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	2b0b      	cmp	r3, #11
 8006df8:	d102      	bne.n	8006e00 <UART_SetConfig+0x1f38>
 8006dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dfe:	e016      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e014      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e04:	2380      	movs	r3, #128	; 0x80
 8006e06:	e012      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e08:	2340      	movs	r3, #64	; 0x40
 8006e0a:	e010      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e0c:	2320      	movs	r3, #32
 8006e0e:	e00e      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e10:	2310      	movs	r3, #16
 8006e12:	e00c      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e14:	230c      	movs	r3, #12
 8006e16:	e00a      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e18:	230a      	movs	r3, #10
 8006e1a:	e008      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e1c:	2308      	movs	r3, #8
 8006e1e:	e006      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e20:	2306      	movs	r3, #6
 8006e22:	e004      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e24:	2304      	movs	r3, #4
 8006e26:	e002      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e28:	2302      	movs	r3, #2
 8006e2a:	e000      	b.n	8006e2e <UART_SetConfig+0x1f66>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	085b      	lsrs	r3, r3, #1
 8006e38:	441a      	add	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e46:	e195      	b.n	8007174 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e48:	4b87      	ldr	r3, [pc, #540]	; (8007068 <UART_SetConfig+0x21a0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0320 	and.w	r3, r3, #32
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d05d      	beq.n	8006f10 <UART_SetConfig+0x2048>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e54:	4b84      	ldr	r3, [pc, #528]	; (8007068 <UART_SetConfig+0x21a0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	08db      	lsrs	r3, r3, #3
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	4a83      	ldr	r2, [pc, #524]	; (800706c <UART_SetConfig+0x21a4>)
 8006e60:	40da      	lsrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d044      	beq.n	8006ef4 <UART_SetConfig+0x202c>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d03e      	beq.n	8006ef0 <UART_SetConfig+0x2028>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d038      	beq.n	8006eec <UART_SetConfig+0x2024>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d032      	beq.n	8006ee8 <UART_SetConfig+0x2020>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d02c      	beq.n	8006ee4 <UART_SetConfig+0x201c>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	2b05      	cmp	r3, #5
 8006e90:	d026      	beq.n	8006ee0 <UART_SetConfig+0x2018>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2b06      	cmp	r3, #6
 8006e98:	d020      	beq.n	8006edc <UART_SetConfig+0x2014>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	2b07      	cmp	r3, #7
 8006ea0:	d01a      	beq.n	8006ed8 <UART_SetConfig+0x2010>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d014      	beq.n	8006ed4 <UART_SetConfig+0x200c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2b09      	cmp	r3, #9
 8006eb0:	d00e      	beq.n	8006ed0 <UART_SetConfig+0x2008>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	2b0a      	cmp	r3, #10
 8006eb8:	d008      	beq.n	8006ecc <UART_SetConfig+0x2004>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	2b0b      	cmp	r3, #11
 8006ec0:	d102      	bne.n	8006ec8 <UART_SetConfig+0x2000>
 8006ec2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ec6:	e016      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e014      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ecc:	2380      	movs	r3, #128	; 0x80
 8006ece:	e012      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ed0:	2340      	movs	r3, #64	; 0x40
 8006ed2:	e010      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ed4:	2320      	movs	r3, #32
 8006ed6:	e00e      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ed8:	2310      	movs	r3, #16
 8006eda:	e00c      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006edc:	230c      	movs	r3, #12
 8006ede:	e00a      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ee0:	230a      	movs	r3, #10
 8006ee2:	e008      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	e006      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ee8:	2306      	movs	r3, #6
 8006eea:	e004      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006eec:	2304      	movs	r3, #4
 8006eee:	e002      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e000      	b.n	8006ef6 <UART_SetConfig+0x202e>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	085b      	lsrs	r3, r3, #1
 8006f00:	441a      	add	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006f0e:	e131      	b.n	8007174 <UART_SetConfig+0x22ac>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d043      	beq.n	8006fa0 <UART_SetConfig+0x20d8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d03d      	beq.n	8006f9c <UART_SetConfig+0x20d4>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d037      	beq.n	8006f98 <UART_SetConfig+0x20d0>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d031      	beq.n	8006f94 <UART_SetConfig+0x20cc>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d02b      	beq.n	8006f90 <UART_SetConfig+0x20c8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	2b05      	cmp	r3, #5
 8006f3e:	d025      	beq.n	8006f8c <UART_SetConfig+0x20c4>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f44:	2b06      	cmp	r3, #6
 8006f46:	d01f      	beq.n	8006f88 <UART_SetConfig+0x20c0>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	2b07      	cmp	r3, #7
 8006f4e:	d019      	beq.n	8006f84 <UART_SetConfig+0x20bc>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d013      	beq.n	8006f80 <UART_SetConfig+0x20b8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	2b09      	cmp	r3, #9
 8006f5e:	d00d      	beq.n	8006f7c <UART_SetConfig+0x20b4>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f64:	2b0a      	cmp	r3, #10
 8006f66:	d007      	beq.n	8006f78 <UART_SetConfig+0x20b0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	2b0b      	cmp	r3, #11
 8006f6e:	d101      	bne.n	8006f74 <UART_SetConfig+0x20ac>
 8006f70:	4b3f      	ldr	r3, [pc, #252]	; (8007070 <UART_SetConfig+0x21a8>)
 8006f72:	e016      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f74:	4b3d      	ldr	r3, [pc, #244]	; (800706c <UART_SetConfig+0x21a4>)
 8006f76:	e014      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f78:	4b3e      	ldr	r3, [pc, #248]	; (8007074 <UART_SetConfig+0x21ac>)
 8006f7a:	e012      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f7c:	4b3e      	ldr	r3, [pc, #248]	; (8007078 <UART_SetConfig+0x21b0>)
 8006f7e:	e010      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f80:	4b3e      	ldr	r3, [pc, #248]	; (800707c <UART_SetConfig+0x21b4>)
 8006f82:	e00e      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f84:	4b3e      	ldr	r3, [pc, #248]	; (8007080 <UART_SetConfig+0x21b8>)
 8006f86:	e00c      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f88:	4b3e      	ldr	r3, [pc, #248]	; (8007084 <UART_SetConfig+0x21bc>)
 8006f8a:	e00a      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f8c:	4b3e      	ldr	r3, [pc, #248]	; (8007088 <UART_SetConfig+0x21c0>)
 8006f8e:	e008      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f90:	4b3e      	ldr	r3, [pc, #248]	; (800708c <UART_SetConfig+0x21c4>)
 8006f92:	e006      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f94:	4b3e      	ldr	r3, [pc, #248]	; (8007090 <UART_SetConfig+0x21c8>)
 8006f96:	e004      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f98:	4b3e      	ldr	r3, [pc, #248]	; (8007094 <UART_SetConfig+0x21cc>)
 8006f9a:	e002      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006f9c:	4b3e      	ldr	r3, [pc, #248]	; (8007098 <UART_SetConfig+0x21d0>)
 8006f9e:	e000      	b.n	8006fa2 <UART_SetConfig+0x20da>
 8006fa0:	4b32      	ldr	r3, [pc, #200]	; (800706c <UART_SetConfig+0x21a4>)
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6852      	ldr	r2, [r2, #4]
 8006fa6:	0852      	lsrs	r2, r2, #1
 8006fa8:	441a      	add	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fb6:	e0dd      	b.n	8007174 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d046      	beq.n	800704e <UART_SetConfig+0x2186>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d040      	beq.n	800704a <UART_SetConfig+0x2182>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d03a      	beq.n	8007046 <UART_SetConfig+0x217e>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d034      	beq.n	8007042 <UART_SetConfig+0x217a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d02e      	beq.n	800703e <UART_SetConfig+0x2176>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	2b05      	cmp	r3, #5
 8006fe6:	d028      	beq.n	800703a <UART_SetConfig+0x2172>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	2b06      	cmp	r3, #6
 8006fee:	d022      	beq.n	8007036 <UART_SetConfig+0x216e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff4:	2b07      	cmp	r3, #7
 8006ff6:	d01c      	beq.n	8007032 <UART_SetConfig+0x216a>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d016      	beq.n	800702e <UART_SetConfig+0x2166>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	2b09      	cmp	r3, #9
 8007006:	d00f      	beq.n	8007028 <UART_SetConfig+0x2160>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	2b0a      	cmp	r3, #10
 800700e:	d008      	beq.n	8007022 <UART_SetConfig+0x215a>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007014:	2b0b      	cmp	r3, #11
 8007016:	d102      	bne.n	800701e <UART_SetConfig+0x2156>
 8007018:	f643 5309 	movw	r3, #15625	; 0x3d09
 800701c:	e018      	b.n	8007050 <UART_SetConfig+0x2188>
 800701e:	4b18      	ldr	r3, [pc, #96]	; (8007080 <UART_SetConfig+0x21b8>)
 8007020:	e016      	b.n	8007050 <UART_SetConfig+0x2188>
 8007022:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007026:	e013      	b.n	8007050 <UART_SetConfig+0x2188>
 8007028:	f24f 4324 	movw	r3, #62500	; 0xf424
 800702c:	e010      	b.n	8007050 <UART_SetConfig+0x2188>
 800702e:	4b1b      	ldr	r3, [pc, #108]	; (800709c <UART_SetConfig+0x21d4>)
 8007030:	e00e      	b.n	8007050 <UART_SetConfig+0x2188>
 8007032:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <UART_SetConfig+0x21a8>)
 8007034:	e00c      	b.n	8007050 <UART_SetConfig+0x2188>
 8007036:	4b1a      	ldr	r3, [pc, #104]	; (80070a0 <UART_SetConfig+0x21d8>)
 8007038:	e00a      	b.n	8007050 <UART_SetConfig+0x2188>
 800703a:	4b1a      	ldr	r3, [pc, #104]	; (80070a4 <UART_SetConfig+0x21dc>)
 800703c:	e008      	b.n	8007050 <UART_SetConfig+0x2188>
 800703e:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <UART_SetConfig+0x21ac>)
 8007040:	e006      	b.n	8007050 <UART_SetConfig+0x2188>
 8007042:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <UART_SetConfig+0x21e0>)
 8007044:	e004      	b.n	8007050 <UART_SetConfig+0x2188>
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <UART_SetConfig+0x21b0>)
 8007048:	e002      	b.n	8007050 <UART_SetConfig+0x2188>
 800704a:	4b0c      	ldr	r3, [pc, #48]	; (800707c <UART_SetConfig+0x21b4>)
 800704c:	e000      	b.n	8007050 <UART_SetConfig+0x2188>
 800704e:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <UART_SetConfig+0x21b8>)
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	6852      	ldr	r2, [r2, #4]
 8007054:	0852      	lsrs	r2, r2, #1
 8007056:	441a      	add	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	b29b      	uxth	r3, r3
 8007062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007064:	e086      	b.n	8007174 <UART_SetConfig+0x22ac>
 8007066:	bf00      	nop
 8007068:	58024400 	.word	0x58024400
 800706c:	03d09000 	.word	0x03d09000
 8007070:	0003d090 	.word	0x0003d090
 8007074:	0007a120 	.word	0x0007a120
 8007078:	000f4240 	.word	0x000f4240
 800707c:	001e8480 	.word	0x001e8480
 8007080:	003d0900 	.word	0x003d0900
 8007084:	00516155 	.word	0x00516155
 8007088:	0061a800 	.word	0x0061a800
 800708c:	007a1200 	.word	0x007a1200
 8007090:	00a2c2aa 	.word	0x00a2c2aa
 8007094:	00f42400 	.word	0x00f42400
 8007098:	01e84800 	.word	0x01e84800
 800709c:	0001e848 	.word	0x0001e848
 80070a0:	00051615 	.word	0x00051615
 80070a4:	00061a80 	.word	0x00061a80
 80070a8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d04e      	beq.n	8007152 <UART_SetConfig+0x228a>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d047      	beq.n	800714c <UART_SetConfig+0x2284>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d040      	beq.n	8007146 <UART_SetConfig+0x227e>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d039      	beq.n	8007140 <UART_SetConfig+0x2278>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	d032      	beq.n	800713a <UART_SetConfig+0x2272>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	2b05      	cmp	r3, #5
 80070da:	d02b      	beq.n	8007134 <UART_SetConfig+0x226c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	2b06      	cmp	r3, #6
 80070e2:	d024      	beq.n	800712e <UART_SetConfig+0x2266>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b07      	cmp	r3, #7
 80070ea:	d01d      	beq.n	8007128 <UART_SetConfig+0x2260>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	d016      	beq.n	8007122 <UART_SetConfig+0x225a>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	2b09      	cmp	r3, #9
 80070fa:	d00f      	beq.n	800711c <UART_SetConfig+0x2254>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	2b0a      	cmp	r3, #10
 8007102:	d008      	beq.n	8007116 <UART_SetConfig+0x224e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b0b      	cmp	r3, #11
 800710a:	d101      	bne.n	8007110 <UART_SetConfig+0x2248>
 800710c:	2380      	movs	r3, #128	; 0x80
 800710e:	e022      	b.n	8007156 <UART_SetConfig+0x228e>
 8007110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007114:	e01f      	b.n	8007156 <UART_SetConfig+0x228e>
 8007116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800711a:	e01c      	b.n	8007156 <UART_SetConfig+0x228e>
 800711c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007120:	e019      	b.n	8007156 <UART_SetConfig+0x228e>
 8007122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007126:	e016      	b.n	8007156 <UART_SetConfig+0x228e>
 8007128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800712c:	e013      	b.n	8007156 <UART_SetConfig+0x228e>
 800712e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007132:	e010      	b.n	8007156 <UART_SetConfig+0x228e>
 8007134:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007138:	e00d      	b.n	8007156 <UART_SetConfig+0x228e>
 800713a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800713e:	e00a      	b.n	8007156 <UART_SetConfig+0x228e>
 8007140:	f241 5355 	movw	r3, #5461	; 0x1555
 8007144:	e007      	b.n	8007156 <UART_SetConfig+0x228e>
 8007146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800714a:	e004      	b.n	8007156 <UART_SetConfig+0x228e>
 800714c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007150:	e001      	b.n	8007156 <UART_SetConfig+0x228e>
 8007152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6852      	ldr	r2, [r2, #4]
 800715a:	0852      	lsrs	r2, r2, #1
 800715c:	441a      	add	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	fbb2 f3f3 	udiv	r3, r2, r3
 8007166:	b29b      	uxth	r3, r3
 8007168:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800716a:	e003      	b.n	8007174 <UART_SetConfig+0x22ac>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        break;
 8007172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	2b0f      	cmp	r3, #15
 8007178:	d908      	bls.n	800718c <UART_SetConfig+0x22c4>
 800717a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007180:	d204      	bcs.n	800718c <UART_SetConfig+0x22c4>
    {
      huart->Instance->BRR = usartdiv;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007188:	60da      	str	r2, [r3, #12]
 800718a:	e002      	b.n	8007192 <UART_SetConfig+0x22ca>
    }
    else
    {
      ret = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80071ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3738      	adds	r7, #56	; 0x38
 80071b6:	46bd      	mov	sp, r7
 80071b8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080071bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00a      	beq.n	80071e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00a      	beq.n	800722a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	f003 0310 	and.w	r3, r3, #16
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01a      	beq.n	80072d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ba:	d10a      	bne.n	80072d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	430a      	orrs	r2, r1
 80072f2:	605a      	str	r2, [r3, #4]
  }
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af02      	add	r7, sp, #8
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007310:	f7f9 fa40 	bl	8000794 <HAL_GetTick>
 8007314:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b08      	cmp	r3, #8
 8007322:	d10e      	bne.n	8007342 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007324:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f82c 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e022      	b.n	8007388 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b04      	cmp	r3, #4
 800734e:	d10e      	bne.n	800736e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007350:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f816 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e00c      	b.n	8007388 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2220      	movs	r2, #32
 800737a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a0:	e02c      	b.n	80073fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073a8:	d028      	beq.n	80073fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073aa:	f7f9 f9f3 	bl	8000794 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d302      	bcc.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d11d      	bne.n	80073fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073ce:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80073f8:	2303      	movs	r3, #3
 80073fa:	e00f      	b.n	800741c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69da      	ldr	r2, [r3, #28]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	4013      	ands	r3, r2
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	429a      	cmp	r2, r3
 800740a:	bf0c      	ite	eq
 800740c:	2301      	moveq	r3, #1
 800740e:	2300      	movne	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	461a      	mov	r2, r3
 8007414:	79fb      	ldrb	r3, [r7, #7]
 8007416:	429a      	cmp	r2, r3
 8007418:	d0c3      	beq.n	80073a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800743a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800744a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007476:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6899      	ldr	r1, [r3, #8]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <UART_EndRxTransfer+0x44>)
 8007484:	400b      	ands	r3, r1
 8007486:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	effffffe 	.word	0xeffffffe

080074a8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074be:	d014      	beq.n	80074ea <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074d6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074e6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074e8:	e002      	b.n	80074f0 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7fd fcc4 	bl	8004e78 <HAL_UART_TxCpltCallback>
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7fd fcc0 	bl	8004e8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007520:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007528:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007530:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753c:	2b80      	cmp	r3, #128	; 0x80
 800753e:	d109      	bne.n	8007554 <UART_DMAError+0x40>
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b21      	cmp	r3, #33	; 0x21
 8007544:	d106      	bne.n	8007554 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800754e:	6978      	ldr	r0, [r7, #20]
 8007550:	f7ff ff68 	bl	8007424 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d109      	bne.n	8007576 <UART_DMAError+0x62>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2b22      	cmp	r3, #34	; 0x22
 8007566:	d106      	bne.n	8007576 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2200      	movs	r2, #0
 800756c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007570:	6978      	ldr	r0, [r7, #20]
 8007572:	f7ff ff75 	bl	8007460 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757c:	f043 0210 	orr.w	r2, r3, #16
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007586:	6978      	ldr	r0, [r7, #20]
 8007588:	f7fd fc94 	bl	8004eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800758c:	bf00      	nop
 800758e:	3718      	adds	r7, #24
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7fd fc7e 	bl	8004eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075d6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7fd fc46 	bl	8004e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007602:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800760a:	2b22      	cmp	r3, #34	; 0x22
 800760c:	d13b      	bne.n	8007686 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007616:	89bb      	ldrh	r3, [r7, #12]
 8007618:	b2d9      	uxtb	r1, r3
 800761a:	89fb      	ldrh	r3, [r7, #14]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007622:	400a      	ands	r2, r1
 8007624:	b2d2      	uxtb	r2, r2
 8007626:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007638:	b29b      	uxth	r3, r3
 800763a:	3b01      	subs	r3, #1
 800763c:	b29a      	uxth	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800764a:	b29b      	uxth	r3, r3
 800764c:	2b00      	cmp	r3, #0
 800764e:	d122      	bne.n	8007696 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800765e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0201 	bic.w	r2, r2, #1
 800766e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f7fd fc0e 	bl	8004ea0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007684:	e007      	b.n	8007696 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	699a      	ldr	r2, [r3, #24]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f042 0208 	orr.w	r2, r2, #8
 8007694:	619a      	str	r2, [r3, #24]
}
 8007696:	bf00      	nop
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b084      	sub	sp, #16
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076ac:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b4:	2b22      	cmp	r3, #34	; 0x22
 80076b6:	d13b      	bne.n	8007730 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80076c6:	89ba      	ldrh	r2, [r7, #12]
 80076c8:	89fb      	ldrh	r3, [r7, #14]
 80076ca:	4013      	ands	r3, r2
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d6:	1c9a      	adds	r2, r3, #2
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	3b01      	subs	r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d122      	bne.n	8007740 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007708:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f022 0201 	bic.w	r2, r2, #1
 8007718:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fd fbb9 	bl	8004ea0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800772e:	e007      	b.n	8007740 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 0208 	orr.w	r2, r2, #8
 800773e:	619a      	str	r2, [r3, #24]
}
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007756:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775e:	2b22      	cmp	r3, #34	; 0x22
 8007760:	d166      	bne.n	8007830 <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007768:	81fb      	strh	r3, [r7, #14]
 800776a:	e03d      	b.n	80077e8 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007774:	893b      	ldrh	r3, [r7, #8]
 8007776:	b2d9      	uxtb	r1, r3
 8007778:	89bb      	ldrh	r3, [r7, #12]
 800777a:	b2da      	uxtb	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007780:	400a      	ands	r2, r1
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b29a      	uxth	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d119      	bne.n	80077e2 <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077bc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6899      	ldr	r1, [r3, #8]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	4b1f      	ldr	r3, [pc, #124]	; (8007848 <UART_RxISR_8BIT_FIFOEN+0x100>)
 80077ca:	400b      	ands	r3, r1
 80077cc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2220      	movs	r2, #32
 80077d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7fd fb5f 	bl	8004ea0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80077e2:	89fb      	ldrh	r3, [r7, #14]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	81fb      	strh	r3, [r7, #14]
 80077e8:	89fb      	ldrh	r3, [r7, #14]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1be      	bne.n	800776c <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077f4:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80077f6:	897b      	ldrh	r3, [r7, #10]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d021      	beq.n	8007840 <UART_RxISR_8BIT_FIFOEN+0xf8>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007802:	897a      	ldrh	r2, [r7, #10]
 8007804:	429a      	cmp	r2, r3
 8007806:	d21b      	bcs.n	8007840 <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007816:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a0c      	ldr	r2, [pc, #48]	; (800784c <UART_RxISR_8BIT_FIFOEN+0x104>)
 800781c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f042 0220 	orr.w	r2, r2, #32
 800782c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800782e:	e007      	b.n	8007840 <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	699a      	ldr	r2, [r3, #24]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 0208 	orr.w	r2, r2, #8
 800783e:	619a      	str	r2, [r3, #24]
}
 8007840:	bf00      	nop
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	effffffe 	.word	0xeffffffe
 800784c:	080075f5 	.word	0x080075f5

08007850 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800785e:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007866:	2b22      	cmp	r3, #34	; 0x22
 8007868:	d166      	bne.n	8007938 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007870:	82fb      	strh	r3, [r7, #22]
 8007872:	e03d      	b.n	80078f0 <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007880:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007882:	8a3a      	ldrh	r2, [r7, #16]
 8007884:	8abb      	ldrh	r3, [r7, #20]
 8007886:	4013      	ands	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007892:	1c9a      	adds	r2, r3, #2
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d119      	bne.n	80078ea <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078c4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6899      	ldr	r1, [r3, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	4b1f      	ldr	r3, [pc, #124]	; (8007950 <UART_RxISR_16BIT_FIFOEN+0x100>)
 80078d2:	400b      	ands	r3, r1
 80078d4:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fd fadb 	bl	8004ea0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80078ea:	8afb      	ldrh	r3, [r7, #22]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	82fb      	strh	r3, [r7, #22]
 80078f0:	8afb      	ldrh	r3, [r7, #22]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1be      	bne.n	8007874 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078fc:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80078fe:	8a7b      	ldrh	r3, [r7, #18]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d021      	beq.n	8007948 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800790a:	8a7a      	ldrh	r2, [r7, #18]
 800790c:	429a      	cmp	r2, r3
 800790e:	d21b      	bcs.n	8007948 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689a      	ldr	r2, [r3, #8]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800791e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a0c      	ldr	r2, [pc, #48]	; (8007954 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8007924:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0220 	orr.w	r2, r2, #32
 8007934:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007936:	e007      	b.n	8007948 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	699a      	ldr	r2, [r3, #24]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0208 	orr.w	r2, r2, #8
 8007946:	619a      	str	r2, [r3, #24]
}
 8007948:	bf00      	nop
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	effffffe 	.word	0xeffffffe
 8007954:	0800769f 	.word	0x0800769f

08007958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d101      	bne.n	80079aa <HAL_UARTEx_DisableFifoMode+0x16>
 80079a6:	2302      	movs	r3, #2
 80079a8:	e027      	b.n	80079fa <HAL_UARTEx_DisableFifoMode+0x66>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2224      	movs	r2, #36	; 0x24
 80079b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 0201 	bic.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80079d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d101      	bne.n	8007a1e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	e02d      	b.n	8007a7a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2224      	movs	r2, #36	; 0x24
 8007a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f022 0201 	bic.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f850 	bl	8007b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a96:	2302      	movs	r3, #2
 8007a98:	e02d      	b.n	8007af6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2224      	movs	r2, #36	; 0x24
 8007aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0201 	bic.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	683a      	ldr	r2, [r7, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f812 	bl	8007b00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b089      	sub	sp, #36	; 0x24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007b08:	4a2f      	ldr	r2, [pc, #188]	; (8007bc8 <UARTEx_SetNbDataToProcess+0xc8>)
 8007b0a:	f107 0314 	add.w	r3, r7, #20
 8007b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b12:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007b16:	4a2d      	ldr	r2, [pc, #180]	; (8007bcc <UARTEx_SetNbDataToProcess+0xcc>)
 8007b18:	f107 030c 	add.w	r3, r7, #12
 8007b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b20:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d108      	bne.n	8007b3e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b3c:	e03d      	b.n	8007bba <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b3e:	2308      	movs	r3, #8
 8007b40:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b42:	2308      	movs	r3, #8
 8007b44:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	0e5b      	lsrs	r3, r3, #25
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	0f5b      	lsrs	r3, r3, #29
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007b66:	7fbb      	ldrb	r3, [r7, #30]
 8007b68:	7f3a      	ldrb	r2, [r7, #28]
 8007b6a:	f107 0120 	add.w	r1, r7, #32
 8007b6e:	440a      	add	r2, r1
 8007b70:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007b74:	fb02 f303 	mul.w	r3, r2, r3
 8007b78:	7f3a      	ldrb	r2, [r7, #28]
 8007b7a:	f107 0120 	add.w	r1, r7, #32
 8007b7e:	440a      	add	r2, r1
 8007b80:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007b84:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007b90:	7ffb      	ldrb	r3, [r7, #31]
 8007b92:	7f7a      	ldrb	r2, [r7, #29]
 8007b94:	f107 0120 	add.w	r1, r7, #32
 8007b98:	440a      	add	r2, r1
 8007b9a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007b9e:	fb02 f303 	mul.w	r3, r2, r3
 8007ba2:	7f7a      	ldrb	r2, [r7, #29]
 8007ba4:	f107 0120 	add.w	r1, r7, #32
 8007ba8:	440a      	add	r2, r1
 8007baa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007bae:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007bba:	bf00      	nop
 8007bbc:	3724      	adds	r7, #36	; 0x24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	08010958 	.word	0x08010958
 8007bcc:	08010960 	.word	0x08010960

08007bd0 <length>:
    b++;
   *b=0x00;
 }

 int length(char *a)
 {
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
   //addr=&chars;
   int n=0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60fb      	str	r3, [r7, #12]

     while(*a!=0x00)
 8007bdc:	e005      	b.n	8007bea <length+0x1a>
    {
    a++;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	3301      	adds	r3, #1
 8007be2:	607b      	str	r3, [r7, #4]
    n++;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3301      	adds	r3, #1
 8007be8:	60fb      	str	r3, [r7, #12]
     while(*a!=0x00)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f5      	bne.n	8007bde <length+0xe>
    }
    return n;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 }
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <countOf>:


int countOf(char *a,char chr)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  int n=0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]

while (*a!=0)
 8007c10:	e00a      	b.n	8007c28 <countOf+0x28>
  {
   if (*a==chr) n++;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	78fa      	ldrb	r2, [r7, #3]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d102      	bne.n	8007c22 <countOf+0x22>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]
    a++;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3301      	adds	r3, #1
 8007c26:	607b      	str	r3, [r7, #4]
while (*a!=0)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1f0      	bne.n	8007c12 <countOf+0x12>
  }
  return n;
 8007c30:	68fb      	ldr	r3, [r7, #12]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <clearArray>:
   *b=0x00;
}


void clearArray(char*a,int n)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
  for (int i=0; i<n; i++)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	e008      	b.n	8007c60 <clearArray+0x22>
  {
   *a=0x00;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
  a++;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3301      	adds	r3, #1
 8007c58:	607b      	str	r3, [r7, #4]
  for (int i=0; i<n; i++)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	dbf2      	blt.n	8007c4e <clearArray+0x10>
  }
}
 8007c68:	bf00      	nop
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <indexOf>:




  int indexOf(char *a,char findingchar)
 {
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70fb      	strb	r3, [r7, #3]
   int n=0;
 8007c80:	2300      	movs	r3, #0
 8007c82:	60fb      	str	r3, [r7, #12]

     while(*a!=0x00)
 8007c84:	e00c      	b.n	8007ca0 <indexOf+0x2c>
    {
    if(*a==findingchar)return n;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d101      	bne.n	8007c94 <indexOf+0x20>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	e00b      	b.n	8007cac <indexOf+0x38>
    a++;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3301      	adds	r3, #1
 8007c98:	607b      	str	r3, [r7, #4]
    n++;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
     while(*a!=0x00)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1ee      	bne.n	8007c86 <indexOf+0x12>
    }

    return -1;
 8007ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

 }
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <startsWith>:
 }*/



bool startsWith (char *a,char *b )
  {
 8007cb8:	b590      	push	{r4, r7, lr}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
   // bool flag_eq=0;
   if (length(a)<length(b))return 0;
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff ff84 	bl	8007bd0 <length>
 8007cc8:	4604      	mov	r4, r0
 8007cca:	6838      	ldr	r0, [r7, #0]
 8007ccc:	f7ff ff80 	bl	8007bd0 <length>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	429c      	cmp	r4, r3
 8007cd4:	da0f      	bge.n	8007cf6 <startsWith+0x3e>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e012      	b.n	8007d00 <startsWith+0x48>
    while(*b!=0x00)
    {
    //if(*a==*b) flag_eq=1;
    if(*a!=*b)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	781a      	ldrb	r2, [r3, #0]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d001      	beq.n	8007cea <startsWith+0x32>
    return 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e00a      	b.n	8007d00 <startsWith+0x48>
    a++;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3301      	adds	r3, #1
 8007cee:	607b      	str	r3, [r7, #4]
    b++;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	603b      	str	r3, [r7, #0]
    while(*b!=0x00)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1ed      	bne.n	8007cda <startsWith+0x22>
    }
    //if (flag_eq==0){return 0;}
   //else {return 1;    }
 return 1;
 8007cfe:	2301      	movs	r3, #1
  }
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd90      	pop	{r4, r7, pc}

08007d08 <substring>:

 }


  char * substring(char *a,char *c,int start, int ends)
 {
 8007d08:	b4b0      	push	{r4, r5, r7}
 8007d0a:	b08d      	sub	sp, #52	; 0x34
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	60b9      	str	r1, [r7, #8]
 8007d12:	607a      	str	r2, [r7, #4]
 8007d14:	603b      	str	r3, [r7, #0]
   if (start==ends){return 0x00;}
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d101      	bne.n	8007d22 <substring+0x1a>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	e08d      	b.n	8007e3e <substring+0x136>

   char *b=a;  //вспомогательный адрес для выяснения n
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
     int n=0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28

     while(*b!=0x00)
 8007d2a:	e005      	b.n	8007d38 <substring+0x30>
     {
     n++;
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	3301      	adds	r3, #1
 8007d30:	62bb      	str	r3, [r7, #40]	; 0x28
     b++;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	3301      	adds	r3, #1
 8007d36:	627b      	str	r3, [r7, #36]	; 0x24
     while(*b!=0x00)
 8007d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1f5      	bne.n	8007d2c <substring+0x24>
     }
     if (n<start) return a;
 8007d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	da01      	bge.n	8007d4c <substring+0x44>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	e078      	b.n	8007e3e <substring+0x136>
     n++;
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	3301      	adds	r3, #1
 8007d50:	62bb      	str	r3, [r7, #40]	; 0x28



     char lstr[n];
 8007d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d54:	466b      	mov	r3, sp
 8007d56:	461d      	mov	r5, r3
 8007d58:	1e43      	subs	r3, r0, #1
 8007d5a:	61bb      	str	r3, [r7, #24]
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4619      	mov	r1, r3
 8007d60:	f04f 0200 	mov.w	r2, #0
 8007d64:	f04f 0300 	mov.w	r3, #0
 8007d68:	f04f 0400 	mov.w	r4, #0
 8007d6c:	00d4      	lsls	r4, r2, #3
 8007d6e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007d72:	00cb      	lsls	r3, r1, #3
 8007d74:	4603      	mov	r3, r0
 8007d76:	4619      	mov	r1, r3
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	f04f 0400 	mov.w	r4, #0
 8007d84:	00d4      	lsls	r4, r2, #3
 8007d86:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007d8a:	00cb      	lsls	r3, r1, #3
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	3307      	adds	r3, #7
 8007d90:	08db      	lsrs	r3, r3, #3
 8007d92:	00db      	lsls	r3, r3, #3
 8007d94:	ebad 0d03 	sub.w	sp, sp, r3
 8007d98:	466b      	mov	r3, sp
 8007d9a:	3300      	adds	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
     char *k=lstr;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
     for(int i=0;i<n;i++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	623b      	str	r3, [r7, #32]
 8007da6:	e008      	b.n	8007dba <substring+0xb2>
     {
       *k=0x00;
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]
       k++;
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	3301      	adds	r3, #1
 8007db2:	62fb      	str	r3, [r7, #44]	; 0x2c
     for(int i=0;i<n;i++)
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	3301      	adds	r3, #1
 8007db8:	623b      	str	r3, [r7, #32]
 8007dba:	6a3a      	ldr	r2, [r7, #32]
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	dbf2      	blt.n	8007da8 <substring+0xa0>
     }
         k=lstr;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

     n=0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    while(*a!=0x00)
 8007dca:	e018      	b.n	8007dfe <substring+0xf6>
    {
    if (n>=ends) { k++;break;}
 8007dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	db03      	blt.n	8007ddc <substring+0xd4>
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dda:	e014      	b.n	8007e06 <substring+0xfe>
    if(n>=start)
 8007ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	db06      	blt.n	8007df2 <substring+0xea>
    {
     //str[n]=*a;
    *k=*a;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	701a      	strb	r2, [r3, #0]
     k++;
 8007dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dee:	3301      	adds	r3, #1
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    a++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3301      	adds	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
    n++;
 8007df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    while(*a!=0x00)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e2      	bne.n	8007dcc <substring+0xc4>
    }

    *k=0x00;
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]

     char *d=c;
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	61fb      	str	r3, [r7, #28]
     k=lstr;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	62fb      	str	r3, [r7, #44]	; 0x2c
     while(*k!=0x00)  //заполняем строкой
 8007e14:	e009      	b.n	8007e2a <substring+0x122>
    {
    *d=*k;
 8007e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e18:	781a      	ldrb	r2, [r3, #0]
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	701a      	strb	r2, [r3, #0]
    d++;
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	3301      	adds	r3, #1
 8007e22:	61fb      	str	r3, [r7, #28]
    k++;
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	3301      	adds	r3, #1
 8007e28:	62fb      	str	r3, [r7, #44]	; 0x2c
     while(*k!=0x00)  //заполняем строкой
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f1      	bne.n	8007e16 <substring+0x10e>
    }
   *d=*k;
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	701a      	strb	r2, [r3, #0]
   return c;
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	46ad      	mov	sp, r5

 }
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3734      	adds	r7, #52	; 0x34
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bcb0      	pop	{r4, r5, r7}
 8007e46:	4770      	bx	lr

08007e48 <intToStr>:
 }



  char * intToStr(int myint, char *a)
 {
 8007e48:	b480      	push	{r7}
 8007e4a:	b08f      	sub	sp, #60	; 0x3c
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
   *aa=0x00;
   aa++;
   }*/

   char lstr[12];
   char *astr=lstr;
 8007e52:	f107 030c 	add.w	r3, r7, #12
 8007e56:	637b      	str	r3, [r7, #52]	; 0x34
   for (int i=0; i<12; i++)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e5c:	e008      	b.n	8007e70 <intToStr+0x28>
   {
     *astr=0x00;
 8007e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e60:	2200      	movs	r2, #0
 8007e62:	701a      	strb	r2, [r3, #0]
     astr++;
 8007e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e66:	3301      	adds	r3, #1
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
   for (int i=0; i<12; i++)
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	2b0b      	cmp	r3, #11
 8007e74:	ddf3      	ble.n	8007e5e <intToStr+0x16>
   }
     astr=lstr;
 8007e76:	f107 030c 	add.w	r3, r7, #12
 8007e7a:	637b      	str	r3, [r7, #52]	; 0x34

   if(myint<0)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	da08      	bge.n	8007e94 <intToStr+0x4c>
   {
     *astr='-';
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e84:	222d      	movs	r2, #45	; 0x2d
 8007e86:	701a      	strb	r2, [r3, #0]
     astr++;
 8007e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
     myint*=-1;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	425b      	negs	r3, r3
 8007e92:	607b      	str	r3, [r7, #4]

   }

   long int delitel=1000000000;
 8007e94:	4b32      	ldr	r3, [pc, #200]	; (8007f60 <intToStr+0x118>)
 8007e96:	62fb      	str	r3, [r7, #44]	; 0x2c
   //303.778.315
   //1.000.000.000

   bool flag_zero=1;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
   for (int i=0; i<10; i++)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea2:	e037      	b.n	8007f14 <intToStr+0xcc>
   {
     int k;
     k=myint/delitel;
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	fb92 f3f3 	sdiv	r3, r2, r3
 8007eac:	61bb      	str	r3, [r7, #24]
     myint-=(k*delitel);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb2:	fb02 f303 	mul.w	r3, r2, r3
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	607b      	str	r3, [r7, #4]
     delitel/=10;
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	4a29      	ldr	r2, [pc, #164]	; (8007f64 <intToStr+0x11c>)
 8007ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8007ec4:	1092      	asrs	r2, r2, #2
 8007ec6:	17db      	asrs	r3, r3, #31
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c
     if(i==6&&k==0)*astr=48;
 8007ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ece:	2b06      	cmp	r3, #6
 8007ed0:	d105      	bne.n	8007ede <intToStr+0x96>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <intToStr+0x96>
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eda:	2230      	movs	r2, #48	; 0x30
 8007edc:	701a      	strb	r2, [r3, #0]
     if(k==0&&flag_zero)continue;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d103      	bne.n	8007eec <intToStr+0xa4>
 8007ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10f      	bne.n	8007f0c <intToStr+0xc4>
     if(k!=0)flag_zero=0;
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <intToStr+0xb0>
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
     *astr=k+48;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	3330      	adds	r3, #48	; 0x30
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	701a      	strb	r2, [r3, #0]
    astr++;
 8007f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f06:	3301      	adds	r3, #1
 8007f08:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0a:	e000      	b.n	8007f0e <intToStr+0xc6>
     if(k==0&&flag_zero)continue;
 8007f0c:	bf00      	nop
   for (int i=0; i<10; i++)
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	3301      	adds	r3, #1
 8007f12:	627b      	str	r3, [r7, #36]	; 0x24
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f16:	2b09      	cmp	r3, #9
 8007f18:	ddc4      	ble.n	8007ea4 <intToStr+0x5c>

   }
    astr=lstr;
 8007f1a:	f107 030c 	add.w	r3, r7, #12
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34

    char *b=a;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	623b      	str	r3, [r7, #32]

    for (int i=0; i<10; i++)  //заполняем строкой
 8007f24:	2300      	movs	r3, #0
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	e00c      	b.n	8007f44 <intToStr+0xfc>
    {
    *b=*astr;
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	781a      	ldrb	r2, [r3, #0]
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	701a      	strb	r2, [r3, #0]
    b++;
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	3301      	adds	r3, #1
 8007f36:	623b      	str	r3, [r7, #32]
    astr++;
 8007f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i=0; i<10; i++)  //заполняем строкой
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	3301      	adds	r3, #1
 8007f42:	61fb      	str	r3, [r7, #28]
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	2b09      	cmp	r3, #9
 8007f48:	ddef      	ble.n	8007f2a <intToStr+0xe2>
    }
   *b=*astr;
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4c:	781a      	ldrb	r2, [r3, #0]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	701a      	strb	r2, [r3, #0]
 //  b++;
  // *b=0x00;
   return a;
 8007f52:	683b      	ldr	r3, [r7, #0]


 }
 8007f54:	4618      	mov	r0, r3
 8007f56:	373c      	adds	r7, #60	; 0x3c
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	3b9aca00 	.word	0x3b9aca00
 8007f64:	66666667 	.word	0x66666667

08007f68 <toInt>:
 }



   long int toInt(char *a)
 {
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]

   int n=0;
 8007f70:	2300      	movs	r3, #0
 8007f72:	617b      	str	r3, [r7, #20]
   long int dec=1;
 8007f74:	2301      	movs	r3, #1
 8007f76:	613b      	str	r3, [r7, #16]
   long int integer=0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]
   bool usign=0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	72fb      	strb	r3, [r7, #11]

   while(*a!=0x00){
 8007f80:	e005      	b.n	8007f8e <toInt+0x26>
   a++;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3301      	adds	r3, #1
 8007f86:	607b      	str	r3, [r7, #4]
   n++;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	617b      	str	r3, [r7, #20]
   while(*a!=0x00){
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1f5      	bne.n	8007f82 <toInt+0x1a>
   }
    if(n<1)return 0;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	dc2f      	bgt.n	8007ffc <toInt+0x94>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e037      	b.n	8008010 <toInt+0xa8>

   while(n!=0)
   {
    n--;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
    a--;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	607b      	str	r3, [r7, #4]
     if (*a==0x2D){usign=1;continue;}
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b2d      	cmp	r3, #45	; 0x2d
 8007fb2:	d102      	bne.n	8007fba <toInt+0x52>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	72fb      	strb	r3, [r7, #11]
 8007fb8:	e020      	b.n	8007ffc <toInt+0x94>
     if ((*a>47) & (*a<58))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	2b2f      	cmp	r3, #47	; 0x2f
 8007fc0:	bf8c      	ite	hi
 8007fc2:	2301      	movhi	r3, #1
 8007fc4:	2300      	movls	r3, #0
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b39      	cmp	r3, #57	; 0x39
 8007fce:	bf94      	ite	ls
 8007fd0:	2301      	movls	r3, #1
 8007fd2:	2300      	movhi	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00e      	beq.n	8007ffc <toInt+0x94>
    {
     integer+=(*a-48)*dec;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	3b30      	subs	r3, #48	; 0x30
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	fb02 f303 	mul.w	r3, r2, r3
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	60fb      	str	r3, [r7, #12]
     dec=dec*10;
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	005b      	lsls	r3, r3, #1
 8007ffa:	613b      	str	r3, [r7, #16]
   while(n!=0)
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1ce      	bne.n	8007fa0 <toInt+0x38>

    }

    }

   if(usign)integer=-1*integer;
 8008002:	7afb      	ldrb	r3, [r7, #11]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <toInt+0xa6>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	425b      	negs	r3, r3
 800800c:	60fb      	str	r3, [r7, #12]
   return integer;
 800800e:	68fb      	ldr	r3, [r7, #12]
 }
 8008010:	4618      	mov	r0, r3
 8008012:	371c      	adds	r7, #28
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	0000      	movs	r0, r0
	...

08008020 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8008020:	b480      	push	{r7}
 8008022:	b08d      	sub	sp, #52	; 0x34
 8008024:	af00      	add	r7, sp, #0
 8008026:	ed87 0b04 	vstr	d0, [r7, #16]
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
	char * ptr = buf;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	62fb      	str	r3, [r7, #44]	; 0x2c
	char * p = ptr;
 8008032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008034:	62bb      	str	r3, [r7, #40]	; 0x28
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2b0a      	cmp	r3, #10
 800803a:	dd01      	ble.n	8008040 <ftoa+0x20>
		precision = MAX_PRECISION;
 800803c:	230a      	movs	r3, #10
 800803e:	60bb      	str	r3, [r7, #8]

	// sign stuff
	if (f < 0)
 8008040:	ed97 7b04 	vldr	d7, [r7, #16]
 8008044:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804c:	d50a      	bpl.n	8008064 <ftoa+0x44>
	{
		f = -f;
 800804e:	ed97 7b04 	vldr	d7, [r7, #16]
 8008052:	eeb1 7b47 	vneg.f64	d7, d7
 8008056:	ed87 7b04 	vstr	d7, [r7, #16]
		*ptr++ = '-';
 800805a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805c:	1c5a      	adds	r2, r3, #1
 800805e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008060:	222d      	movs	r2, #45	; 0x2d
 8008062:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	2b00      	cmp	r3, #0
 8008068:	da49      	bge.n	80080fe <ftoa+0xde>
	{
		if (f < 1.0) precision = 6;
 800806a:	ed97 7b04 	vldr	d7, [r7, #16]
 800806e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008072:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800807a:	d502      	bpl.n	8008082 <ftoa+0x62>
 800807c:	2306      	movs	r3, #6
 800807e:	60bb      	str	r3, [r7, #8]
 8008080:	e03d      	b.n	80080fe <ftoa+0xde>
		else if (f < 10.0) precision = 5;
 8008082:	ed97 7b04 	vldr	d7, [r7, #16]
 8008086:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800808a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800808e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008092:	d502      	bpl.n	800809a <ftoa+0x7a>
 8008094:	2305      	movs	r3, #5
 8008096:	60bb      	str	r3, [r7, #8]
 8008098:	e031      	b.n	80080fe <ftoa+0xde>
		else if (f < 100.0) precision = 4;
 800809a:	ed97 7b04 	vldr	d7, [r7, #16]
 800809e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008238 <ftoa+0x218>
 80080a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080aa:	d502      	bpl.n	80080b2 <ftoa+0x92>
 80080ac:	2304      	movs	r3, #4
 80080ae:	60bb      	str	r3, [r7, #8]
 80080b0:	e025      	b.n	80080fe <ftoa+0xde>
		else if (f < 1000.0) precision = 3;
 80080b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80080b6:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8008240 <ftoa+0x220>
 80080ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c2:	d502      	bpl.n	80080ca <ftoa+0xaa>
 80080c4:	2303      	movs	r3, #3
 80080c6:	60bb      	str	r3, [r7, #8]
 80080c8:	e019      	b.n	80080fe <ftoa+0xde>
		else if (f < 10000.0) precision = 2;
 80080ca:	ed97 7b04 	vldr	d7, [r7, #16]
 80080ce:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8008248 <ftoa+0x228>
 80080d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080da:	d502      	bpl.n	80080e2 <ftoa+0xc2>
 80080dc:	2302      	movs	r3, #2
 80080de:	60bb      	str	r3, [r7, #8]
 80080e0:	e00d      	b.n	80080fe <ftoa+0xde>
		else if (f < 100000.0) precision = 1;
 80080e2:	ed97 7b04 	vldr	d7, [r7, #16]
 80080e6:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8008250 <ftoa+0x230>
 80080ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80080ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f2:	d502      	bpl.n	80080fa <ftoa+0xda>
 80080f4:	2301      	movs	r3, #1
 80080f6:	60bb      	str	r3, [r7, #8]
 80080f8:	e001      	b.n	80080fe <ftoa+0xde>
		else precision = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60bb      	str	r3, [r7, #8]
	}

	// round value according the precision
	if (precision)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <ftoa+0xfc>
		f += rounders[precision];
 8008104:	4a54      	ldr	r2, [pc, #336]	; (8008258 <ftoa+0x238>)
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	4413      	add	r3, r2
 800810c:	ed93 7b00 	vldr	d7, [r3]
 8008110:	ed97 6b04 	vldr	d6, [r7, #16]
 8008114:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008118:	ed87 7b04 	vstr	d7, [r7, #16]

	// integer part...
	intPart = f;
 800811c:	ed97 7b04 	vldr	d7, [r7, #16]
 8008120:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008124:	ee17 3a90 	vmov	r3, s15
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
	f -= intPart;
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	ee07 3a90 	vmov	s15, r3
 8008130:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008134:	ed97 6b04 	vldr	d6, [r7, #16]
 8008138:	ee36 7b47 	vsub.f64	d7, d6, d7
 800813c:	ed87 7b04 	vstr	d7, [r7, #16]

	if (!intPart)
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	2b00      	cmp	r3, #0
 8008144:	d105      	bne.n	8008152 <ftoa+0x132>
		*ptr++ = '0';
 8008146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800814c:	2230      	movs	r2, #48	; 0x30
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	e038      	b.n	80081c4 <ftoa+0x1a4>
	else
	{
		// save start pointer
		p = ptr;
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	62bb      	str	r3, [r7, #40]	; 0x28

		// convert (reverse order)
		while (intPart)
 8008156:	e01a      	b.n	800818e <ftoa+0x16e>
		{
			*p++ = '0' + intPart % 10;
 8008158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815a:	4b40      	ldr	r3, [pc, #256]	; (800825c <ftoa+0x23c>)
 800815c:	fb83 1302 	smull	r1, r3, r3, r2
 8008160:	1099      	asrs	r1, r3, #2
 8008162:	17d3      	asrs	r3, r2, #31
 8008164:	1ac9      	subs	r1, r1, r3
 8008166:	460b      	mov	r3, r1
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	440b      	add	r3, r1
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	1ad1      	subs	r1, r2, r3
 8008170:	b2ca      	uxtb	r2, r1
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	1c59      	adds	r1, r3, #1
 8008176:	62b9      	str	r1, [r7, #40]	; 0x28
 8008178:	3230      	adds	r2, #48	; 0x30
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	4a36      	ldr	r2, [pc, #216]	; (800825c <ftoa+0x23c>)
 8008182:	fb82 1203 	smull	r1, r2, r2, r3
 8008186:	1092      	asrs	r2, r2, #2
 8008188:	17db      	asrs	r3, r3, #31
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
		while (intPart)
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1e1      	bne.n	8008158 <ftoa+0x138>
		}

		// save end pos
		p1 = p;
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	623b      	str	r3, [r7, #32]

		// reverse result
		while (p > ptr)
 8008198:	e00e      	b.n	80081b8 <ftoa+0x198>
		{
			c = *--p;
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	3b01      	subs	r3, #1
 800819e:	62bb      	str	r3, [r7, #40]	; 0x28
 80081a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	77fb      	strb	r3, [r7, #31]
			*p = *ptr;
 80081a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a8:	781a      	ldrb	r2, [r3, #0]
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 80081ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081b4:	7ffa      	ldrb	r2, [r7, #31]
 80081b6:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 80081b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081bc:	429a      	cmp	r2, r3
 80081be:	d8ec      	bhi.n	800819a <ftoa+0x17a>
		}

		// restore end pos
		ptr = p1;
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	// decimal part
	if (precision)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d02c      	beq.n	8008224 <ftoa+0x204>
	{
		// place decimal point
		*ptr++ = '.';
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081d0:	222e      	movs	r2, #46	; 0x2e
 80081d2:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 80081d4:	e021      	b.n	800821a <ftoa+0x1fa>
		{
			f *= 10.0;
 80081d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80081da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80081de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80081e2:	ed87 7b04 	vstr	d7, [r7, #16]
			c = f;
 80081e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80081ea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80081ee:	edc7 7a01 	vstr	s15, [r7, #4]
 80081f2:	793b      	ldrb	r3, [r7, #4]
 80081f4:	77fb      	strb	r3, [r7, #31]
			*ptr++ = '0' + c;
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081fc:	7ffa      	ldrb	r2, [r7, #31]
 80081fe:	3230      	adds	r2, #48	; 0x30
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	701a      	strb	r2, [r3, #0]
			f -= c;
 8008204:	7ffb      	ldrb	r3, [r7, #31]
 8008206:	ee07 3a90 	vmov	s15, r3
 800820a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800820e:	ed97 6b04 	vldr	d6, [r7, #16]
 8008212:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008216:	ed87 7b04 	vstr	d7, [r7, #16]
		while (precision--)
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	1e5a      	subs	r2, r3, #1
 800821e:	60ba      	str	r2, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d1d8      	bne.n	80081d6 <ftoa+0x1b6>
		}
	}

	// terminating zero
	*ptr = 0;
 8008224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008226:	2200      	movs	r2, #0
 8008228:	701a      	strb	r2, [r3, #0]

	return buf;
 800822a:	68fb      	ldr	r3, [r7, #12]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3734      	adds	r7, #52	; 0x34
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	00000000 	.word	0x00000000
 800823c:	40590000 	.word	0x40590000
 8008240:	00000000 	.word	0x00000000
 8008244:	408f4000 	.word	0x408f4000
 8008248:	00000000 	.word	0x00000000
 800824c:	40c38800 	.word	0x40c38800
 8008250:	00000000 	.word	0x00000000
 8008254:	40f86a00 	.word	0x40f86a00
 8008258:	08010dd8 	.word	0x08010dd8
 800825c:	66666667 	.word	0x66666667

08008260 <ini_calc>:
float coord_zero_C[3];

float cur_x, cur_y, cur_z;

uint8_t ini_calc()
{
 8008260:	b580      	push	{r7, lr}
 8008262:	af00      	add	r7, sp, #0
	calculate_sfere(zero_A,0,0.0,1.0,0.0,1,&coord_zero_A[0],&coord_zero_A[1],&coord_zero_A[2]);
 8008264:	4b1d      	ldr	r3, [pc, #116]	; (80082dc <ini_calc+0x7c>)
 8008266:	edd3 7a00 	vldr	s15, [r3]
 800826a:	4b1d      	ldr	r3, [pc, #116]	; (80082e0 <ini_calc+0x80>)
 800826c:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <ini_calc+0x84>)
 800826e:	491e      	ldr	r1, [pc, #120]	; (80082e8 <ini_calc+0x88>)
 8008270:	2001      	movs	r0, #1
 8008272:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 80082ec <ini_calc+0x8c>
 8008276:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800827a:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 80082ec <ini_calc+0x8c>
 800827e:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80082ec <ini_calc+0x8c>
 8008282:	eeb0 0a67 	vmov.f32	s0, s15
 8008286:	f000 fc97 	bl	8008bb8 <calculate_sfere>
	calculate_sfere(zero_B,-1.732,0.0,-2.0,0.0,2,&coord_zero_B[0],&coord_zero_B[1],&coord_zero_B[2]);
 800828a:	4b19      	ldr	r3, [pc, #100]	; (80082f0 <ini_calc+0x90>)
 800828c:	edd3 7a00 	vldr	s15, [r3]
 8008290:	4b18      	ldr	r3, [pc, #96]	; (80082f4 <ini_calc+0x94>)
 8008292:	4a19      	ldr	r2, [pc, #100]	; (80082f8 <ini_calc+0x98>)
 8008294:	4919      	ldr	r1, [pc, #100]	; (80082fc <ini_calc+0x9c>)
 8008296:	2002      	movs	r0, #2
 8008298:	ed9f 2a14 	vldr	s4, [pc, #80]	; 80082ec <ini_calc+0x8c>
 800829c:	eef8 1a00 	vmov.f32	s3, #128	; 0xc0000000 -2.0
 80082a0:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80082ec <ini_calc+0x8c>
 80082a4:	eddf 0a16 	vldr	s1, [pc, #88]	; 8008300 <ini_calc+0xa0>
 80082a8:	eeb0 0a67 	vmov.f32	s0, s15
 80082ac:	f000 fc84 	bl	8008bb8 <calculate_sfere>
	calculate_sfere(zero_C,1.732,0.0,-2.0,0.0,2,&coord_zero_C[0],&coord_zero_C[1],&coord_zero_C[2]);
 80082b0:	4b14      	ldr	r3, [pc, #80]	; (8008304 <ini_calc+0xa4>)
 80082b2:	edd3 7a00 	vldr	s15, [r3]
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <ini_calc+0xa8>)
 80082b8:	4a14      	ldr	r2, [pc, #80]	; (800830c <ini_calc+0xac>)
 80082ba:	4915      	ldr	r1, [pc, #84]	; (8008310 <ini_calc+0xb0>)
 80082bc:	2002      	movs	r0, #2
 80082be:	ed9f 2a0b 	vldr	s4, [pc, #44]	; 80082ec <ini_calc+0x8c>
 80082c2:	eef8 1a00 	vmov.f32	s3, #128	; 0xc0000000 -2.0
 80082c6:	ed9f 1a09 	vldr	s2, [pc, #36]	; 80082ec <ini_calc+0x8c>
 80082ca:	eddf 0a12 	vldr	s1, [pc, #72]	; 8008314 <ini_calc+0xb4>
 80082ce:	eeb0 0a67 	vmov.f32	s0, s15
 80082d2:	f000 fc71 	bl	8008bb8 <calculate_sfere>
	return 1;
 80082d6:	2301      	movs	r3, #1
}
 80082d8:	4618      	mov	r0, r3
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	24000030 	.word	0x24000030
 80082e0:	24000818 	.word	0x24000818
 80082e4:	24000814 	.word	0x24000814
 80082e8:	24000810 	.word	0x24000810
 80082ec:	00000000 	.word	0x00000000
 80082f0:	24000034 	.word	0x24000034
 80082f4:	2400080c 	.word	0x2400080c
 80082f8:	24000808 	.word	0x24000808
 80082fc:	24000804 	.word	0x24000804
 8008300:	bfddb22d 	.word	0xbfddb22d
 8008304:	24000038 	.word	0x24000038
 8008308:	24000828 	.word	0x24000828
 800830c:	24000824 	.word	0x24000824
 8008310:	24000820 	.word	0x24000820
 8008314:	3fddb22d 	.word	0x3fddb22d

08008318 <calculate_positions>:


uint8_t calculate_positions(float x, float y, float z, float *a, float *b, float *c)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	ed2d 8b02 	vpush	{d8}
 800831e:	b0b8      	sub	sp, #224	; 0xe0
 8008320:	af00      	add	r7, sp, #0
 8008322:	ed87 0a05 	vstr	s0, [r7, #20]
 8008326:	edc7 0a04 	vstr	s1, [r7, #16]
 800832a:	ed87 1a03 	vstr	s2, [r7, #12]
 800832e:	60b8      	str	r0, [r7, #8]
 8008330:	6079      	str	r1, [r7, #4]
 8008332:	603a      	str	r2, [r7, #0]
	if (z>l_rod) return 0;
 8008334:	4b06      	ldr	r3, [pc, #24]	; (8008350 <calculate_positions+0x38>)
 8008336:	edd3 7a00 	vldr	s15, [r3]
 800833a:	ed97 7a03 	vldr	s14, [r7, #12]
 800833e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	dd05      	ble.n	8008354 <calculate_positions+0x3c>
 8008348:	2300      	movs	r3, #0
 800834a:	f000 bc26 	b.w	8008b9a <calculate_positions+0x882>
 800834e:	bf00      	nop
 8008350:	24000008 	.word	0x24000008



	positionA[0] = offsetA[0] + x;
 8008354:	4bee      	ldr	r3, [pc, #952]	; (8008710 <calculate_positions+0x3f8>)
 8008356:	ed93 7a00 	vldr	s14, [r3]
 800835a:	edd7 7a05 	vldr	s15, [r7, #20]
 800835e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008362:	4bec      	ldr	r3, [pc, #944]	; (8008714 <calculate_positions+0x3fc>)
 8008364:	edc3 7a00 	vstr	s15, [r3]
	positionA[1] = offsetA[1] + y;
 8008368:	4be9      	ldr	r3, [pc, #932]	; (8008710 <calculate_positions+0x3f8>)
 800836a:	ed93 7a01 	vldr	s14, [r3, #4]
 800836e:	edd7 7a04 	vldr	s15, [r7, #16]
 8008372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008376:	4be7      	ldr	r3, [pc, #924]	; (8008714 <calculate_positions+0x3fc>)
 8008378:	edc3 7a01 	vstr	s15, [r3, #4]
	positionA[2] = offsetA[2] + z;
 800837c:	4be4      	ldr	r3, [pc, #912]	; (8008710 <calculate_positions+0x3f8>)
 800837e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008382:	edd7 7a03 	vldr	s15, [r7, #12]
 8008386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800838a:	4be2      	ldr	r3, [pc, #904]	; (8008714 <calculate_positions+0x3fc>)
 800838c:	edc3 7a02 	vstr	s15, [r3, #8]

	positionB[0] = offsetB[0] + x;
 8008390:	4be1      	ldr	r3, [pc, #900]	; (8008718 <calculate_positions+0x400>)
 8008392:	ed93 7a00 	vldr	s14, [r3]
 8008396:	edd7 7a05 	vldr	s15, [r7, #20]
 800839a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800839e:	4bdf      	ldr	r3, [pc, #892]	; (800871c <calculate_positions+0x404>)
 80083a0:	edc3 7a00 	vstr	s15, [r3]
	positionB[1] = offsetB[1] + y;
 80083a4:	4bdc      	ldr	r3, [pc, #880]	; (8008718 <calculate_positions+0x400>)
 80083a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80083aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80083ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083b2:	4bda      	ldr	r3, [pc, #872]	; (800871c <calculate_positions+0x404>)
 80083b4:	edc3 7a01 	vstr	s15, [r3, #4]
	positionB[2] = offsetB[2] + z;
 80083b8:	4bd7      	ldr	r3, [pc, #860]	; (8008718 <calculate_positions+0x400>)
 80083ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80083be:	edd7 7a03 	vldr	s15, [r7, #12]
 80083c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083c6:	4bd5      	ldr	r3, [pc, #852]	; (800871c <calculate_positions+0x404>)
 80083c8:	edc3 7a02 	vstr	s15, [r3, #8]

	positionC[0] = offsetC[0] + x;
 80083cc:	4bd4      	ldr	r3, [pc, #848]	; (8008720 <calculate_positions+0x408>)
 80083ce:	ed93 7a00 	vldr	s14, [r3]
 80083d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80083d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083da:	4bd2      	ldr	r3, [pc, #840]	; (8008724 <calculate_positions+0x40c>)
 80083dc:	edc3 7a00 	vstr	s15, [r3]
	positionC[1] = offsetC[1] + y;
 80083e0:	4bcf      	ldr	r3, [pc, #828]	; (8008720 <calculate_positions+0x408>)
 80083e2:	ed93 7a01 	vldr	s14, [r3, #4]
 80083e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80083ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083ee:	4bcd      	ldr	r3, [pc, #820]	; (8008724 <calculate_positions+0x40c>)
 80083f0:	edc3 7a01 	vstr	s15, [r3, #4]
	positionC[2] = offsetC[2] + z;
 80083f4:	4bca      	ldr	r3, [pc, #808]	; (8008720 <calculate_positions+0x408>)
 80083f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80083fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80083fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008402:	4bc8      	ldr	r3, [pc, #800]	; (8008724 <calculate_positions+0x40c>)
 8008404:	edc3 7a02 	vstr	s15, [r3, #8]

	float second_dot_A[3];
	float second_dot_B[3];
	float second_dot_C[3];
	//=============================   Задаем геометрию лучей
	first_dot_A[0] = -positionA[0];
 8008408:	4bc2      	ldr	r3, [pc, #776]	; (8008714 <calculate_positions+0x3fc>)
 800840a:	edd3 7a00 	vldr	s15, [r3]
 800840e:	eef1 7a67 	vneg.f32	s15, s15
 8008412:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
	first_dot_A[1] = -positionA[1];
 8008416:	4bbf      	ldr	r3, [pc, #764]	; (8008714 <calculate_positions+0x3fc>)
 8008418:	edd3 7a01 	vldr	s15, [r3, #4]
 800841c:	eef1 7a67 	vneg.f32	s15, s15
 8008420:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	first_dot_A[2] = -positionA[2];
 8008424:	4bbb      	ldr	r3, [pc, #748]	; (8008714 <calculate_positions+0x3fc>)
 8008426:	edd3 7a02 	vldr	s15, [r3, #8]
 800842a:	eef1 7a67 	vneg.f32	s15, s15
 800842e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8

	first_dot_B[0] = -positionB[0];
 8008432:	4bba      	ldr	r3, [pc, #744]	; (800871c <calculate_positions+0x404>)
 8008434:	edd3 7a00 	vldr	s15, [r3]
 8008438:	eef1 7a67 	vneg.f32	s15, s15
 800843c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	first_dot_B[1] = -positionB[1];
 8008440:	4bb6      	ldr	r3, [pc, #728]	; (800871c <calculate_positions+0x404>)
 8008442:	edd3 7a01 	vldr	s15, [r3, #4]
 8008446:	eef1 7a67 	vneg.f32	s15, s15
 800844a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	first_dot_B[2] = -positionB[2];
 800844e:	4bb3      	ldr	r3, [pc, #716]	; (800871c <calculate_positions+0x404>)
 8008450:	edd3 7a02 	vldr	s15, [r3, #8]
 8008454:	eef1 7a67 	vneg.f32	s15, s15
 8008458:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c

	first_dot_C[0] = -positionC[0];
 800845c:	4bb1      	ldr	r3, [pc, #708]	; (8008724 <calculate_positions+0x40c>)
 800845e:	edd3 7a00 	vldr	s15, [r3]
 8008462:	eef1 7a67 	vneg.f32	s15, s15
 8008466:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
	first_dot_C[1] = -positionC[1];
 800846a:	4bae      	ldr	r3, [pc, #696]	; (8008724 <calculate_positions+0x40c>)
 800846c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008470:	eef1 7a67 	vneg.f32	s15, s15
 8008474:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
	first_dot_C[2] = -positionC[2];
 8008478:	4baa      	ldr	r3, [pc, #680]	; (8008724 <calculate_positions+0x40c>)
 800847a:	edd3 7a02 	vldr	s15, [r3, #8]
 800847e:	eef1 7a67 	vneg.f32	s15, s15
 8008482:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

	second_dot_A[0] = first_dot_A[0]+0;
 8008486:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800848a:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8008728 <calculate_positions+0x410>
 800848e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008492:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
	second_dot_A[1] = first_dot_A[1]+1;
 8008496:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800849a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800849e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084a2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	second_dot_A[2] = first_dot_A[2]+1;
 80084a6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80084aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084b2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

	second_dot_B[0] = first_dot_B[0]+0.866;
 80084b6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80084ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80084be:	ed9f 6b92 	vldr	d6, [pc, #584]	; 8008708 <calculate_positions+0x3f0>
 80084c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80084c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80084ca:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	second_dot_B[1] = first_dot_B[1]-0.5;
 80084ce:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80084d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80084d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084da:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	second_dot_B[2] = first_dot_B[2]+1;
 80084de:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80084e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084ea:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78

	second_dot_C[0] = first_dot_C[0]-0.866;
 80084ee:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80084f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80084f6:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8008708 <calculate_positions+0x3f0>
 80084fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80084fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008502:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	second_dot_C[1] = first_dot_C[1]-0.5;
 8008506:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800850a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800850e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008512:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	second_dot_C[2] = first_dot_C[2]+1;
 8008516:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800851a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800851e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008522:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c


	float kA, kB,kC, aA, aB, aC, nA, nB, nC, bA, bB, bC;

	kA = (second_dot_A[0]-first_dot_A[0])/(second_dot_A[1]-first_dot_A[1]);
 8008526:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800852a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800852e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008532:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8008536:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800853a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800853e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008542:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
	kB = (second_dot_B[0]-first_dot_B[0])/(second_dot_B[1]-first_dot_B[1]);
 8008546:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800854a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800854e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008552:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8008556:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800855a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800855e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008562:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
	kC = (second_dot_C[0]-first_dot_C[0])/(second_dot_C[1]-first_dot_C[1]);
 8008566:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 800856a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800856e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008572:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8008576:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800857a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800857e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008582:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0

	aA = first_dot_A[0]-first_dot_A[1]*kA;
 8008586:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
 800858a:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 800858e:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8008592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800859a:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
	aB = first_dot_B[0]-first_dot_B[1]*kB;
 800859e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80085a2:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 80085a6:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80085aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085b2:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8
	aC = first_dot_C[0]-first_dot_C[1]*kC;
 80085b6:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80085ba:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 80085be:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80085c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085ca:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4

	nA = (second_dot_A[2]-first_dot_A[2])/(second_dot_A[1]-first_dot_A[1]);
 80085ce:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80085d2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80085d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80085da:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80085de:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80085e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80085e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ea:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	nB = (second_dot_B[2]-first_dot_B[2])/(second_dot_B[1]-first_dot_B[1]);
 80085ee:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 80085f2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80085f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80085fa:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 80085fe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8008602:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800860a:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	nC = (second_dot_C[2]-first_dot_C[2])/(second_dot_C[1]-first_dot_C[1]);
 800860e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8008612:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8008616:	ee77 6a67 	vsub.f32	s13, s14, s15
 800861a:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800861e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8008622:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800862a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

	bA = first_dot_A[2]-first_dot_A[1]*nA;
 800862e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8008632:	edd7 6a29 	vldr	s13, [r7, #164]	; 0xa4
 8008636:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 800863a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800863e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008642:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	bB = first_dot_B[2]-first_dot_B[1]*nB;
 8008646:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 800864a:	edd7 6a26 	vldr	s13, [r7, #152]	; 0x98
 800864e:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 8008652:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800865a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	bC = first_dot_C[2]-first_dot_C[1]*nC;
 800865e:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8008662:	edd7 6a23 	vldr	s13, [r7, #140]	; 0x8c
 8008666:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800866a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800866e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008672:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

	float sfA[3]; // координаты каретки относительно начала тяги
	float sfB[3];
	float sfC[3];

	calculate_sfere(l_rod,kA,aA,nA,bA,1,&sfA[0],&sfA[1],&sfA[2]);
 8008676:	4b2d      	ldr	r3, [pc, #180]	; (800872c <calculate_positions+0x414>)
 8008678:	edd3 7a00 	vldr	s15, [r3]
 800867c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008680:	f103 0008 	add.w	r0, r3, #8
 8008684:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008688:	1d1a      	adds	r2, r3, #4
 800868a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800868e:	4603      	mov	r3, r0
 8008690:	2001      	movs	r0, #1
 8008692:	ed97 2a2d 	vldr	s4, [r7, #180]	; 0xb4
 8008696:	edd7 1a30 	vldr	s3, [r7, #192]	; 0xc0
 800869a:	ed97 1a33 	vldr	s2, [r7, #204]	; 0xcc
 800869e:	edd7 0a36 	vldr	s1, [r7, #216]	; 0xd8
 80086a2:	eeb0 0a67 	vmov.f32	s0, s15
 80086a6:	f000 fa87 	bl	8008bb8 <calculate_sfere>
	calculate_sfere(l_rod,kB,aB,nB,bB,2,&sfB[0],&sfB[1],&sfB[2]);
 80086aa:	4b20      	ldr	r3, [pc, #128]	; (800872c <calculate_positions+0x414>)
 80086ac:	edd3 7a00 	vldr	s15, [r3]
 80086b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80086b4:	f103 0008 	add.w	r0, r3, #8
 80086b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80086bc:	1d1a      	adds	r2, r3, #4
 80086be:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80086c2:	4603      	mov	r3, r0
 80086c4:	2002      	movs	r0, #2
 80086c6:	ed97 2a2c 	vldr	s4, [r7, #176]	; 0xb0
 80086ca:	edd7 1a2f 	vldr	s3, [r7, #188]	; 0xbc
 80086ce:	ed97 1a32 	vldr	s2, [r7, #200]	; 0xc8
 80086d2:	edd7 0a35 	vldr	s1, [r7, #212]	; 0xd4
 80086d6:	eeb0 0a67 	vmov.f32	s0, s15
 80086da:	f000 fa6d 	bl	8008bb8 <calculate_sfere>
	calculate_sfere(l_rod,kC,aC,nC,bC,2,&sfC[0],&sfC[1],&sfC[2]);
 80086de:	4b13      	ldr	r3, [pc, #76]	; (800872c <calculate_positions+0x414>)
 80086e0:	edd3 7a00 	vldr	s15, [r3]
 80086e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086e8:	f103 0008 	add.w	r0, r3, #8
 80086ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086f0:	1d1a      	adds	r2, r3, #4
 80086f2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80086f6:	4603      	mov	r3, r0
 80086f8:	2002      	movs	r0, #2
 80086fa:	ed97 2a2b 	vldr	s4, [r7, #172]	; 0xac
 80086fe:	edd7 1a2e 	vldr	s3, [r7, #184]	; 0xb8
 8008702:	e015      	b.n	8008730 <calculate_positions+0x418>
 8008704:	f3af 8000 	nop.w
 8008708:	a1cac083 	.word	0xa1cac083
 800870c:	3febb645 	.word	0x3febb645
 8008710:	2400000c 	.word	0x2400000c
 8008714:	2400029c 	.word	0x2400029c
 8008718:	24000018 	.word	0x24000018
 800871c:	240002a8 	.word	0x240002a8
 8008720:	24000024 	.word	0x24000024
 8008724:	240002b4 	.word	0x240002b4
 8008728:	00000000 	.word	0x00000000
 800872c:	24000008 	.word	0x24000008
 8008730:	ed97 1a31 	vldr	s2, [r7, #196]	; 0xc4
 8008734:	edd7 0a34 	vldr	s1, [r7, #208]	; 0xd0
 8008738:	eeb0 0a67 	vmov.f32	s0, s15
 800873c:	f000 fa3c 	bl	8008bb8 <calculate_sfere>



//	printfloat(sfA[0]);

	for (int i=0; i<3; i++)
 8008740:	2300      	movs	r3, #0
 8008742:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008746:	e055      	b.n	80087f4 <calculate_positions+0x4dc>
	{
		absA[i] = sfA[i]+positionA[i];
 8008748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8008752:	4413      	add	r3, r2
 8008754:	3b88      	subs	r3, #136	; 0x88
 8008756:	ed93 7a00 	vldr	s14, [r3]
 800875a:	4ae4      	ldr	r2, [pc, #912]	; (8008aec <calculate_positions+0x7d4>)
 800875c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	edd3 7a00 	vldr	s15, [r3]
 8008768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800876c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8008776:	4413      	add	r3, r2
 8008778:	3bac      	subs	r3, #172	; 0xac
 800877a:	edc3 7a00 	vstr	s15, [r3]
		absB[i] = sfB[i]+positionB[i];
 800877e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8008788:	4413      	add	r3, r2
 800878a:	3b94      	subs	r3, #148	; 0x94
 800878c:	ed93 7a00 	vldr	s14, [r3]
 8008790:	4ad7      	ldr	r2, [pc, #860]	; (8008af0 <calculate_positions+0x7d8>)
 8008792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	edd3 7a00 	vldr	s15, [r3]
 800879e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80087ac:	4413      	add	r3, r2
 80087ae:	3bb8      	subs	r3, #184	; 0xb8
 80087b0:	edc3 7a00 	vstr	s15, [r3]
		absC[i] = sfC[i]+positionC[i];
 80087b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80087be:	4413      	add	r3, r2
 80087c0:	3ba0      	subs	r3, #160	; 0xa0
 80087c2:	ed93 7a00 	vldr	s14, [r3]
 80087c6:	4acb      	ldr	r2, [pc, #812]	; (8008af4 <calculate_positions+0x7dc>)
 80087c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4413      	add	r3, r2
 80087d0:	edd3 7a00 	vldr	s15, [r3]
 80087d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80087e2:	4413      	add	r3, r2
 80087e4:	3bc4      	subs	r3, #196	; 0xc4
 80087e6:	edc3 7a00 	vstr	s15, [r3]
	for (int i=0; i<3; i++)
 80087ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ee:	3301      	adds	r3, #1
 80087f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	dda5      	ble.n	8008748 <calculate_positions+0x430>
		printfloat(absA[2]);
		printfloat(absB[2]);
		printfloat(absC[2]);
		printstr("\r\n\r\n");*/

	if ((coord_zero_A[2]-absA[2]) < 0.0) *a = -sqrt(pow((coord_zero_A[0]-absA[0]),2)+pow((coord_zero_A[1]-absA[1]),2)+pow((coord_zero_A[2]-absA[2]),2));
 80087fc:	4bbe      	ldr	r3, [pc, #760]	; (8008af8 <calculate_positions+0x7e0>)
 80087fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8008802:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800880a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008812:	d544      	bpl.n	800889e <calculate_positions+0x586>
 8008814:	4bb8      	ldr	r3, [pc, #736]	; (8008af8 <calculate_positions+0x7e0>)
 8008816:	ed93 7a00 	vldr	s14, [r3]
 800881a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800881e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008822:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008826:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800882a:	eeb0 0b47 	vmov.f64	d0, d7
 800882e:	f007 fa4b 	bl	800fcc8 <pow>
 8008832:	eeb0 8b40 	vmov.f64	d8, d0
 8008836:	4bb0      	ldr	r3, [pc, #704]	; (8008af8 <calculate_positions+0x7e0>)
 8008838:	ed93 7a01 	vldr	s14, [r3, #4]
 800883c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008844:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008848:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 800884c:	eeb0 0b47 	vmov.f64	d0, d7
 8008850:	f007 fa3a 	bl	800fcc8 <pow>
 8008854:	eeb0 7b40 	vmov.f64	d7, d0
 8008858:	ee38 8b07 	vadd.f64	d8, d8, d7
 800885c:	4ba6      	ldr	r3, [pc, #664]	; (8008af8 <calculate_positions+0x7e0>)
 800885e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008862:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008866:	ee77 7a67 	vsub.f32	s15, s14, s15
 800886a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800886e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008872:	eeb0 0b47 	vmov.f64	d0, d7
 8008876:	f007 fa27 	bl	800fcc8 <pow>
 800887a:	eeb0 7b40 	vmov.f64	d7, d0
 800887e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8008882:	eeb0 0b47 	vmov.f64	d0, d7
 8008886:	f007 fb4f 	bl	800ff28 <sqrt>
 800888a:	eeb0 7b40 	vmov.f64	d7, d0
 800888e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008892:	eef1 7a67 	vneg.f32	s15, s15
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	edc3 7a00 	vstr	s15, [r3]
 800889c:	e041      	b.n	8008922 <calculate_positions+0x60a>
		else *a = sqrt(pow((coord_zero_A[0]-absA[0]),2)+pow((coord_zero_A[1]-absA[1]),2)+pow((coord_zero_A[2]-absA[2]),2));
 800889e:	4b96      	ldr	r3, [pc, #600]	; (8008af8 <calculate_positions+0x7e0>)
 80088a0:	ed93 7a00 	vldr	s14, [r3]
 80088a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80088a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80088b0:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80088b4:	eeb0 0b47 	vmov.f64	d0, d7
 80088b8:	f007 fa06 	bl	800fcc8 <pow>
 80088bc:	eeb0 8b40 	vmov.f64	d8, d0
 80088c0:	4b8d      	ldr	r3, [pc, #564]	; (8008af8 <calculate_positions+0x7e0>)
 80088c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80088c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80088ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80088d2:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80088d6:	eeb0 0b47 	vmov.f64	d0, d7
 80088da:	f007 f9f5 	bl	800fcc8 <pow>
 80088de:	eeb0 7b40 	vmov.f64	d7, d0
 80088e2:	ee38 8b07 	vadd.f64	d8, d8, d7
 80088e6:	4b84      	ldr	r3, [pc, #528]	; (8008af8 <calculate_positions+0x7e0>)
 80088e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80088ec:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80088f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80088f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80088fc:	eeb0 0b47 	vmov.f64	d0, d7
 8008900:	f007 f9e2 	bl	800fcc8 <pow>
 8008904:	eeb0 7b40 	vmov.f64	d7, d0
 8008908:	ee38 7b07 	vadd.f64	d7, d8, d7
 800890c:	eeb0 0b47 	vmov.f64	d0, d7
 8008910:	f007 fb0a 	bl	800ff28 <sqrt>
 8008914:	eeb0 7b40 	vmov.f64	d7, d0
 8008918:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	edc3 7a00 	vstr	s15, [r3]
	if ((coord_zero_B[2]-absB[2]) < 0.0) *b = -sqrt(pow((coord_zero_B[0]-absB[0]),2)+pow((coord_zero_B[1]-absB[1]),2)+pow((coord_zero_B[2]-absB[2]),2));
 8008922:	4b76      	ldr	r3, [pc, #472]	; (8008afc <calculate_positions+0x7e4>)
 8008924:	ed93 7a02 	vldr	s14, [r3, #8]
 8008928:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800892c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008930:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008938:	d544      	bpl.n	80089c4 <calculate_positions+0x6ac>
 800893a:	4b70      	ldr	r3, [pc, #448]	; (8008afc <calculate_positions+0x7e4>)
 800893c:	ed93 7a00 	vldr	s14, [r3]
 8008940:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008948:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800894c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008950:	eeb0 0b47 	vmov.f64	d0, d7
 8008954:	f007 f9b8 	bl	800fcc8 <pow>
 8008958:	eeb0 8b40 	vmov.f64	d8, d0
 800895c:	4b67      	ldr	r3, [pc, #412]	; (8008afc <calculate_positions+0x7e4>)
 800895e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008962:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800896a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800896e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008972:	eeb0 0b47 	vmov.f64	d0, d7
 8008976:	f007 f9a7 	bl	800fcc8 <pow>
 800897a:	eeb0 7b40 	vmov.f64	d7, d0
 800897e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8008982:	4b5e      	ldr	r3, [pc, #376]	; (8008afc <calculate_positions+0x7e4>)
 8008984:	ed93 7a02 	vldr	s14, [r3, #8]
 8008988:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800898c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008990:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008994:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008998:	eeb0 0b47 	vmov.f64	d0, d7
 800899c:	f007 f994 	bl	800fcc8 <pow>
 80089a0:	eeb0 7b40 	vmov.f64	d7, d0
 80089a4:	ee38 7b07 	vadd.f64	d7, d8, d7
 80089a8:	eeb0 0b47 	vmov.f64	d0, d7
 80089ac:	f007 fabc 	bl	800ff28 <sqrt>
 80089b0:	eeb0 7b40 	vmov.f64	d7, d0
 80089b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80089b8:	eef1 7a67 	vneg.f32	s15, s15
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	edc3 7a00 	vstr	s15, [r3]
 80089c2:	e041      	b.n	8008a48 <calculate_positions+0x730>
		else *b = sqrt(pow((coord_zero_B[0]-absB[0]),2)+pow((coord_zero_B[1]-absB[1]),2)+pow((coord_zero_B[2]-absB[2]),2));
 80089c4:	4b4d      	ldr	r3, [pc, #308]	; (8008afc <calculate_positions+0x7e4>)
 80089c6:	ed93 7a00 	vldr	s14, [r3]
 80089ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80089ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80089d6:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80089da:	eeb0 0b47 	vmov.f64	d0, d7
 80089de:	f007 f973 	bl	800fcc8 <pow>
 80089e2:	eeb0 8b40 	vmov.f64	d8, d0
 80089e6:	4b45      	ldr	r3, [pc, #276]	; (8008afc <calculate_positions+0x7e4>)
 80089e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80089ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80089f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80089f8:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 80089fc:	eeb0 0b47 	vmov.f64	d0, d7
 8008a00:	f007 f962 	bl	800fcc8 <pow>
 8008a04:	eeb0 7b40 	vmov.f64	d7, d0
 8008a08:	ee38 8b07 	vadd.f64	d8, d8, d7
 8008a0c:	4b3b      	ldr	r3, [pc, #236]	; (8008afc <calculate_positions+0x7e4>)
 8008a0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a12:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008a1e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008a22:	eeb0 0b47 	vmov.f64	d0, d7
 8008a26:	f007 f94f 	bl	800fcc8 <pow>
 8008a2a:	eeb0 7b40 	vmov.f64	d7, d0
 8008a2e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8008a32:	eeb0 0b47 	vmov.f64	d0, d7
 8008a36:	f007 fa77 	bl	800ff28 <sqrt>
 8008a3a:	eeb0 7b40 	vmov.f64	d7, d0
 8008a3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	edc3 7a00 	vstr	s15, [r3]
	if ((coord_zero_C[2]-absC[2]) < 0.0) *c = -sqrt(pow((coord_zero_C[0]-absC[0]),2)+pow((coord_zero_C[1]-absC[1]),2)+pow((coord_zero_C[2]-absC[2]),2));
 8008a48:	4b2d      	ldr	r3, [pc, #180]	; (8008b00 <calculate_positions+0x7e8>)
 8008a4a:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a5e:	d551      	bpl.n	8008b04 <calculate_positions+0x7ec>
 8008a60:	4b27      	ldr	r3, [pc, #156]	; (8008b00 <calculate_positions+0x7e8>)
 8008a62:	ed93 7a00 	vldr	s14, [r3]
 8008a66:	edd7 7a07 	vldr	s15, [r7, #28]
 8008a6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008a72:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008a76:	eeb0 0b47 	vmov.f64	d0, d7
 8008a7a:	f007 f925 	bl	800fcc8 <pow>
 8008a7e:	eeb0 8b40 	vmov.f64	d8, d0
 8008a82:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <calculate_positions+0x7e8>)
 8008a84:	ed93 7a01 	vldr	s14, [r3, #4]
 8008a88:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008a94:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008a98:	eeb0 0b47 	vmov.f64	d0, d7
 8008a9c:	f007 f914 	bl	800fcc8 <pow>
 8008aa0:	eeb0 7b40 	vmov.f64	d7, d0
 8008aa4:	ee38 8b07 	vadd.f64	d8, d8, d7
 8008aa8:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <calculate_positions+0x7e8>)
 8008aaa:	ed93 7a02 	vldr	s14, [r3, #8]
 8008aae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ab6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008aba:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008abe:	eeb0 0b47 	vmov.f64	d0, d7
 8008ac2:	f007 f901 	bl	800fcc8 <pow>
 8008ac6:	eeb0 7b40 	vmov.f64	d7, d0
 8008aca:	ee38 7b07 	vadd.f64	d7, d8, d7
 8008ace:	eeb0 0b47 	vmov.f64	d0, d7
 8008ad2:	f007 fa29 	bl	800ff28 <sqrt>
 8008ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8008ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008ade:	eef1 7a67 	vneg.f32	s15, s15
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	edc3 7a00 	vstr	s15, [r3]
 8008ae8:	e04e      	b.n	8008b88 <calculate_positions+0x870>
 8008aea:	bf00      	nop
 8008aec:	2400029c 	.word	0x2400029c
 8008af0:	240002a8 	.word	0x240002a8
 8008af4:	240002b4 	.word	0x240002b4
 8008af8:	24000810 	.word	0x24000810
 8008afc:	24000804 	.word	0x24000804
 8008b00:	24000820 	.word	0x24000820
		else *c = sqrt(pow((coord_zero_C[0]-absC[0]),2)+pow((coord_zero_C[1]-absC[1]),2)+pow((coord_zero_C[2]-absC[2]),2));
 8008b04:	4b28      	ldr	r3, [pc, #160]	; (8008ba8 <calculate_positions+0x890>)
 8008b06:	ed93 7a00 	vldr	s14, [r3]
 8008b0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008b16:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008b1a:	eeb0 0b47 	vmov.f64	d0, d7
 8008b1e:	f007 f8d3 	bl	800fcc8 <pow>
 8008b22:	eeb0 8b40 	vmov.f64	d8, d0
 8008b26:	4b20      	ldr	r3, [pc, #128]	; (8008ba8 <calculate_positions+0x890>)
 8008b28:	ed93 7a01 	vldr	s14, [r3, #4]
 8008b2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008b38:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008b3c:	eeb0 0b47 	vmov.f64	d0, d7
 8008b40:	f007 f8c2 	bl	800fcc8 <pow>
 8008b44:	eeb0 7b40 	vmov.f64	d7, d0
 8008b48:	ee38 8b07 	vadd.f64	d8, d8, d7
 8008b4c:	4b16      	ldr	r3, [pc, #88]	; (8008ba8 <calculate_positions+0x890>)
 8008b4e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008b52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008b5e:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008b62:	eeb0 0b47 	vmov.f64	d0, d7
 8008b66:	f007 f8af 	bl	800fcc8 <pow>
 8008b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8008b6e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8008b72:	eeb0 0b47 	vmov.f64	d0, d7
 8008b76:	f007 f9d7 	bl	800ff28 <sqrt>
 8008b7a:	eeb0 7b40 	vmov.f64	d7, d0
 8008b7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	edc3 7a00 	vstr	s15, [r3]

	cur_x = x;
 8008b88:	4a08      	ldr	r2, [pc, #32]	; (8008bac <calculate_positions+0x894>)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	6013      	str	r3, [r2, #0]
	cur_y = y;
 8008b8e:	4a08      	ldr	r2, [pc, #32]	; (8008bb0 <calculate_positions+0x898>)
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	6013      	str	r3, [r2, #0]
	cur_z = z;
 8008b94:	4a07      	ldr	r2, [pc, #28]	; (8008bb4 <calculate_positions+0x89c>)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6013      	str	r3, [r2, #0]
	/*	printstr("dlina\r\n");
		printfloat(*a);
		printfloat(*b);
		printfloat(*c);
		printstr("\r\n\r\n");*/
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	37e0      	adds	r7, #224	; 0xe0
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	ecbd 8b02 	vpop	{d8}
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	24000820 	.word	0x24000820
 8008bac:	2400081c 	.word	0x2400081c
 8008bb0:	240007fc 	.word	0x240007fc
 8008bb4:	24000800 	.word	0x24000800

08008bb8 <calculate_sfere>:



uint8_t calculate_sfere(float R, float k, float a, float n, float b, uint8_t num_decision, float *car_x, float *car_y, float *car_z)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	ed2d 8b02 	vpush	{d8}
 8008bbe:	b08c      	sub	sp, #48	; 0x30
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8008bc6:	edc7 0a08 	vstr	s1, [r7, #32]
 8008bca:	ed87 1a07 	vstr	s2, [r7, #28]
 8008bce:	edc7 1a06 	vstr	s3, [r7, #24]
 8008bd2:	ed87 2a05 	vstr	s4, [r7, #20]
 8008bd6:	60f9      	str	r1, [r7, #12]
 8008bd8:	60ba      	str	r2, [r7, #8]
 8008bda:	607b      	str	r3, [r7, #4]
 8008bdc:	4603      	mov	r3, r0
 8008bde:	74fb      	strb	r3, [r7, #19]
	float y;
	float D;

	D = pow((2*k*a+2*n*b),2)-4*(k*k+n*n+1)*(a*a+b*b-R*R);
 8008be0:	edd7 7a08 	vldr	s15, [r7, #32]
 8008be4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008be8:	edd7 7a07 	vldr	s15, [r7, #28]
 8008bec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8008bf4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008bf8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008c08:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8008c0c:	eeb0 0b47 	vmov.f64	d0, d7
 8008c10:	f007 f85a 	bl	800fcc8 <pow>
 8008c14:	eeb0 6b40 	vmov.f64	d6, d0
 8008c18:	ed97 7a08 	vldr	s14, [r7, #32]
 8008c1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008c24:	edd7 5a06 	vldr	s11, [r7, #24]
 8008c28:	edd7 7a06 	vldr	s15, [r7, #24]
 8008c2c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8008c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008c3c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008c40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008c44:	edd7 5a07 	vldr	s11, [r7, #28]
 8008c48:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c4c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8008c50:	ed97 5a05 	vldr	s10, [r7, #20]
 8008c54:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c58:	ee65 7a27 	vmul.f32	s15, s10, s15
 8008c5c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8008c60:	ed97 5a09 	vldr	s10, [r7, #36]	; 0x24
 8008c64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c68:	ee65 7a27 	vmul.f32	s15, s10, s15
 8008c6c:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8008c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008c78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008c80:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	if (D<0.0) return 0;
 8008c84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008c88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c90:	d501      	bpl.n	8008c96 <calculate_sfere+0xde>
 8008c92:	2300      	movs	r3, #0
 8008c94:	e09f      	b.n	8008dd6 <calculate_sfere+0x21e>

	if (num_decision == 1) y=(-(2*k*a+2*n*b)+ sqrt(D))/(2*(k*k+n*n+1));
 8008c96:	7cfb      	ldrb	r3, [r7, #19]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d13e      	bne.n	8008d1a <calculate_sfere+0x162>
 8008c9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8008ca0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008ca4:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008cac:	edd7 7a06 	vldr	s15, [r7, #24]
 8008cb0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008cb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8008cb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cc0:	eef1 7a67 	vneg.f32	s15, s15
 8008cc4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8008cc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008ccc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008cd0:	eeb0 0b47 	vmov.f64	d0, d7
 8008cd4:	f007 f928 	bl	800ff28 <sqrt>
 8008cd8:	eeb0 7b40 	vmov.f64	d7, d0
 8008cdc:	ee38 5b07 	vadd.f64	d5, d8, d7
 8008ce0:	ed97 7a08 	vldr	s14, [r7, #32]
 8008ce4:	edd7 7a08 	vldr	s15, [r7, #32]
 8008ce8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008cec:	edd7 6a06 	vldr	s13, [r7, #24]
 8008cf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8008cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d08:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008d0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008d10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008d14:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8008d18:	e040      	b.n	8008d9c <calculate_sfere+0x1e4>
	else if (num_decision == 2) y=(-(2*k*a+2*n*b)- sqrt(D))/(2*(k*k+n*n+1));
 8008d1a:	7cfb      	ldrb	r3, [r7, #19]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	d13d      	bne.n	8008d9c <calculate_sfere+0x1e4>
 8008d20:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d24:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008d28:	edd7 7a07 	vldr	s15, [r7, #28]
 8008d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d30:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d34:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8008d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d44:	eef1 7a67 	vneg.f32	s15, s15
 8008d48:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8008d4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008d50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008d54:	eeb0 0b47 	vmov.f64	d0, d7
 8008d58:	f007 f8e6 	bl	800ff28 <sqrt>
 8008d5c:	eeb0 7b40 	vmov.f64	d7, d0
 8008d60:	ee38 5b47 	vsub.f64	d5, d8, d7
 8008d64:	ed97 7a08 	vldr	s14, [r7, #32]
 8008d68:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008d70:	edd7 6a06 	vldr	s13, [r7, #24]
 8008d74:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008d88:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d8c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008d90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008d94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008d98:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	*car_x = k*y+a;
 8008d9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8008da0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008da4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008da8:	edd7 7a07 	vldr	s15, [r7, #28]
 8008dac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	edc3 7a00 	vstr	s15, [r3]
	*car_y = y;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dba:	601a      	str	r2, [r3, #0]
	*car_z = n*y+b;
 8008dbc:	ed97 7a06 	vldr	s14, [r7, #24]
 8008dc0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008dc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008dc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	edc3 7a00 	vstr	s15, [r3]

}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3730      	adds	r7, #48	; 0x30
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	ecbd 8b02 	vpop	{d8}
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <calc_impulses>:


uint8_t calc_impulses(float time, float pulses, float accel, float brake, uint8_t axsis, float *need_time)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	ed2d 8b02 	vpush	{d8}
 8008dea:	b090      	sub	sp, #64	; 0x40
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	ed87 0a05 	vstr	s0, [r7, #20]
 8008df2:	edc7 0a04 	vstr	s1, [r7, #16]
 8008df6:	ed87 1a03 	vstr	s2, [r7, #12]
 8008dfa:	edc7 1a02 	vstr	s3, [r7, #8]
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6039      	str	r1, [r7, #0]
 8008e02:	71fb      	strb	r3, [r7, #7]
	float time_of_brake;
	float time_of_max_speed;
	float pulses_of_accel;
	float pulses_of_brake;
	float pulses_of_max_speed;
	uint8_t direction=0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37


	if(pulses<0)
 8008e0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e16:	d50c      	bpl.n	8008e32 <calc_impulses+0x4e>
		{
			pulses=pulses*-1.0;
 8008e18:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008e20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008e24:	eef1 7a67 	vneg.f32	s15, s15
 8008e28:	edc7 7a04 	vstr	s15, [r7, #16]
			direction=1;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

	D = (4*time*time-8*pulses*((accel+brake)/(accel*brake))); //находим дискрименант.
 8008e32:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e36:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008e3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008e3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008e46:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e4a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8008e4e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8008e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e56:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e5a:	ee76 5a27 	vadd.f32	s11, s12, s15
 8008e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e62:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e66:	ee26 6a27 	vmul.f32	s12, s12, s15
 8008e6a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8008e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e76:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	//	*need_time = sqrt((8*pulses*((accel+brake)/(accel*brake)))/4); // возвращаем мин необх времени для данного действия
	if (D<0) //Если он больше 0, то система успеет разогаться и замедлиться
 8008e7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e86:	d528      	bpl.n	8008eda <calc_impulses+0xf6>
	{
		*need_time = sqrt((8*pulses*((accel+brake)/(accel*brake)))/4); // возвращаем мин необх времени для данного действия
 8008e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8008e8c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8008e90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008e94:	edd7 6a03 	vldr	s13, [r7, #12]
 8008e98:	edd7 7a02 	vldr	s15, [r7, #8]
 8008e9c:	ee36 6aa7 	vadd.f32	s12, s13, s15
 8008ea0:	edd7 6a03 	vldr	s13, [r7, #12]
 8008ea4:	edd7 7a02 	vldr	s15, [r7, #8]
 8008ea8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008eac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8008eb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008eb4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008ebc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008ec0:	eeb0 0b47 	vmov.f64	d0, d7
 8008ec4:	f007 f830 	bl	800ff28 <sqrt>
 8008ec8:	eeb0 7b40 	vmov.f64	d7, d0
 8008ecc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	edc3 7a00 	vstr	s15, [r3]
		return 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e0e2      	b.n	80090a0 <calc_impulses+0x2bc>
	}
	else
	{
		max_speed = (2*time-sqrt(D))/(2*(accel+brake)/(accel*brake));
 8008eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ede:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008ee2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8008ee6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008eea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008eee:	eeb0 0b47 	vmov.f64	d0, d7
 8008ef2:	f007 f819 	bl	800ff28 <sqrt>
 8008ef6:	eeb0 7b40 	vmov.f64	d7, d0
 8008efa:	ee38 5b47 	vsub.f64	d5, d8, d7
 8008efe:	ed97 7a03 	vldr	s14, [r7, #12]
 8008f02:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f0a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008f0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8008f12:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008f22:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008f26:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008f2a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	}

	time_of_accel = max_speed/accel;
 8008f2e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008f32:	ed97 7a03 	vldr	s14, [r7, #12]
 8008f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f3a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	time_of_brake = max_speed/brake;
 8008f3e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008f42:	ed97 7a02 	vldr	s14, [r7, #8]
 8008f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	time_of_max_speed = time - time_of_accel - time_of_brake;
 8008f4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8008f52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008f5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f62:	edc7 7a08 	vstr	s15, [r7, #32]
	pulses_of_accel = max_speed* time_of_accel/2;
 8008f66:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008f6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008f72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f7a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	if (pulses_of_accel<2.0) pulses_of_accel = 2.1;
 8008f7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008f82:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	d501      	bpl.n	8008f94 <calc_impulses+0x1b0>
 8008f90:	4b46      	ldr	r3, [pc, #280]	; (80090ac <calc_impulses+0x2c8>)
 8008f92:	63fb      	str	r3, [r7, #60]	; 0x3c
	pulses_of_brake = max_speed* time_of_brake/2;
 8008f94:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8008f98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008fa0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008fa8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	if (pulses_of_brake<2.0) pulses_of_brake = 2.1;
 8008fac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008fb0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fbc:	d501      	bpl.n	8008fc2 <calc_impulses+0x1de>
 8008fbe:	4b3b      	ldr	r3, [pc, #236]	; (80090ac <calc_impulses+0x2c8>)
 8008fc0:	63bb      	str	r3, [r7, #56]	; 0x38
	pulses_of_max_speed = pulses - pulses_of_accel - pulses_of_brake;
 8008fc2:	ed97 7a04 	vldr	s14, [r7, #16]
 8008fc6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008fca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008fce:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fd6:	edc7 7a07 	vstr	s15, [r7, #28]
	printfloat(time_of_accel+time_of_max_speed);*/




	if (axsis == AXSIS_A)
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d11d      	bne.n	800901c <calc_impulses+0x238>
	{
	axis_a_motion_ini(
 8008fe0:	edd7 7a04 	vldr	s15, [r7, #16]
 8008fe4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8008fe8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8008ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	edd7 2a05 	vldr	s5, [r7, #20]
 8008ffe:	eeb0 2a67 	vmov.f32	s4, s15
 8009002:	edd7 1a02 	vldr	s3, [r7, #8]
 8009006:	ed97 1a03 	vldr	s2, [r7, #12]
 800900a:	eddf 0a29 	vldr	s1, [pc, #164]	; 80090b0 <calc_impulses+0x2cc>
 800900e:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8009012:	ee16 0a90 	vmov	r0, s13
 8009016:	f001 fcbb 	bl	800a990 <axis_a_motion_ini>
 800901a:	e040      	b.n	800909e <calc_impulses+0x2ba>
	(pulses_of_accel+pulses_of_max_speed),
	time,
	direction
	);
	}
	else if (axsis == AXSIS_B)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d11d      	bne.n	800905e <calc_impulses+0x27a>
	{
	axis_b_motion_ini(
 8009022:	edd7 7a04 	vldr	s15, [r7, #16]
 8009026:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800902a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800902e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009036:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800903a:	4619      	mov	r1, r3
 800903c:	edd7 2a05 	vldr	s5, [r7, #20]
 8009040:	eeb0 2a67 	vmov.f32	s4, s15
 8009044:	edd7 1a02 	vldr	s3, [r7, #8]
 8009048:	ed97 1a03 	vldr	s2, [r7, #12]
 800904c:	eddf 0a18 	vldr	s1, [pc, #96]	; 80090b0 <calc_impulses+0x2cc>
 8009050:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8009054:	ee16 0a90 	vmov	r0, s13
 8009058:	f001 fe8c 	bl	800ad74 <axis_b_motion_ini>
 800905c:	e01f      	b.n	800909e <calc_impulses+0x2ba>
	time,
	direction
	);
	}

	else if (axsis == AXSIS_C)
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d11c      	bne.n	800909e <calc_impulses+0x2ba>
	{
	axis_c_motion_ini(
 8009064:	edd7 7a04 	vldr	s15, [r7, #16]
 8009068:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800906c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009070:	edd7 7a07 	vldr	s15, [r7, #28]
 8009074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800907c:	4619      	mov	r1, r3
 800907e:	edd7 2a05 	vldr	s5, [r7, #20]
 8009082:	eeb0 2a67 	vmov.f32	s4, s15
 8009086:	edd7 1a02 	vldr	s3, [r7, #8]
 800908a:	ed97 1a03 	vldr	s2, [r7, #12]
 800908e:	eddf 0a08 	vldr	s1, [pc, #32]	; 80090b0 <calc_impulses+0x2cc>
 8009092:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8009096:	ee16 0a90 	vmov	r0, s13
 800909a:	f002 f85b 	bl	800b154 <axis_c_motion_ini>
	);
	}



	return 1;
 800909e:	2301      	movs	r3, #1
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3740      	adds	r7, #64	; 0x40
 80090a4:	46bd      	mov	sp, r7
 80090a6:	ecbd 8b02 	vpop	{d8}
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	40066666 	.word	0x40066666
 80090b0:	3dcccccd 	.word	0x3dcccccd

080090b4 <save_array>:
//Flash add
#include "flash.h"


bool save_array(void *data, int count, uint32_t addr_array)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b08e      	sub	sp, #56	; 0x38
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
	uint32_t *arr_a = (uint32_t*)data;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34

	HAL_FLASH_Unlock();
 80090c4:	f7f8 f9c2 	bl	800144c <HAL_FLASH_Unlock>
	for (int i=0; i<count; i++)
 80090c8:	2300      	movs	r3, #0
 80090ca:	633b      	str	r3, [r7, #48]	; 0x30
 80090cc:	e011      	b.n	80090f2 <save_array+0x3e>
	{
			uint32_t a[8];
			a[0] = (uint32_t*)arr_a;
 80090ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d0:	613b      	str	r3, [r7, #16]
			write_flash32(addr_array+i*32, a[0]);//save_float(addr_array+i*32, *arr_a+i);
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	015b      	lsls	r3, r3, #5
 80090d6:	461a      	mov	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4413      	add	r3, r2
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 f87b 	bl	80091dc <write_flash32>
			arr_a+=8;
 80090e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e8:	3320      	adds	r3, #32
 80090ea:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i=0; i<count; i++)
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	3301      	adds	r3, #1
 80090f0:	633b      	str	r3, [r7, #48]	; 0x30
 80090f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	dbe9      	blt.n	80090ce <save_array+0x1a>
	}
	 HAL_FLASH_Lock();
 80090fa:	f7f8 f9e1 	bl	80014c0 <HAL_FLASH_Lock>
	 return true;
 80090fe:	2301      	movs	r3, #1
}
 8009100:	4618      	mov	r0, r3
 8009102:	3738      	adds	r7, #56	; 0x38
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <read_array_int>:

bool read_array_int(int *data, int count, uint32_t addr_array)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
		for (int i=0; i<count; i++)
 8009114:	2300      	movs	r3, #0
 8009116:	617b      	str	r3, [r7, #20]
 8009118:	e011      	b.n	800913e <read_array_int+0x36>
	{
		*data = (int)read_flash32(addr_array+i*4);
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	461a      	mov	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4413      	add	r3, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f000 f84d 	bl	80091c4 <read_flash32>
 800912a:	4603      	mov	r3, r0
 800912c:	461a      	mov	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	601a      	str	r2, [r3, #0]
		data++;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	3304      	adds	r3, #4
 8009136:	60fb      	str	r3, [r7, #12]
		for (int i=0; i<count; i++)
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	3301      	adds	r3, #1
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	429a      	cmp	r2, r3
 8009144:	dbe9      	blt.n	800911a <read_array_int+0x12>
	}
}
 8009146:	bf00      	nop
 8009148:	4618      	mov	r0, r3
 800914a:	3718      	adds	r7, #24
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <read_array_float>:

bool read_array_float(float *data, int count, uint32_t addr_array)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
		for (int i=0; i<count; i++)
 800915c:	2300      	movs	r3, #0
 800915e:	617b      	str	r3, [r7, #20]
 8009160:	e012      	b.n	8009188 <read_array_float+0x38>
	{
		float read_float = load_float(addr_array+i*4);
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	461a      	mov	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4413      	add	r3, r2
 800916c:	4618      	mov	r0, r3
 800916e:	f000 f814 	bl	800919a <load_float>
 8009172:	ed87 0a04 	vstr	s0, [r7, #16]
		*data = read_float;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	601a      	str	r2, [r3, #0]
		data++;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3304      	adds	r3, #4
 8009180:	60fb      	str	r3, [r7, #12]
		for (int i=0; i<count; i++)
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	3301      	adds	r3, #1
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	429a      	cmp	r2, r3
 800918e:	dbe8      	blt.n	8009162 <read_array_float+0x12>
	}
}
 8009190:	bf00      	nop
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <load_float>:
	a[0] = (uint32_t*)&fl;
	write_flash32(addr, a[0]);
}

float load_float(uint32_t addr)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]

	uint32_t read_raw;
	read_raw = read_flash32(addr);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f80e 	bl	80091c4 <read_flash32>
 80091a8:	4603      	mov	r3, r0
 80091aa:	60bb      	str	r3, [r7, #8]
	float read_float = *(float*)(&read_raw);
 80091ac:	f107 0308 	add.w	r3, r7, #8
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]
	return read_float;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	ee07 3a90 	vmov	s15, r3
}
 80091ba:	eeb0 0a67 	vmov.f32	s0, s15
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <read_flash32>:


uint32_t read_flash32(uint32_t Data_adr)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
	return *(uint32_t*) Data_adr;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <write_flash32>:



bool write_flash32(uint32_t data_adr, uint32_t data)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Unlock();
 80091e6:	f7f8 f931 	bl	800144c <HAL_FLASH_Unlock>

	  if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD,data_adr,(uint32_t)data) == HAL_OK)
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	2003      	movs	r0, #3
 80091f0:	f7f8 f8aa 	bl	8001348 <HAL_FLASH_Program>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d103      	bne.n	8009202 <write_flash32+0x26>
         {
     		 HAL_FLASH_Lock();
 80091fa:	f7f8 f961 	bl	80014c0 <HAL_FLASH_Lock>
			 return true;
 80091fe:	2301      	movs	r3, #1
 8009200:	e002      	b.n	8009208 <write_flash32+0x2c>
         }
         else
         {
           HAL_FLASH_Lock();
 8009202:	f7f8 f95d 	bl	80014c0 <HAL_FLASH_Lock>
           return false;
 8009206:	2300      	movs	r3, #0
         }

}
 8009208:	4618      	mov	r0, r3
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <flash_earse>:

bool flash_earse(uint32_t addr)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]

FLASH_EraseInitTypeDef EraseInitStruct;
uint32_t PageError = 0;
 8009218:	2300      	movs	r3, #0
 800921a:	60bb      	str	r3, [r7, #8]


	 EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800921c:	2300      	movs	r3, #0
 800921e:	60fb      	str	r3, [r7, #12]
     EraseInitStruct.Sector = addr;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	617b      	str	r3, [r7, #20]
     EraseInitStruct.NbSectors = 1;
 8009224:	2301      	movs	r3, #1
 8009226:	61bb      	str	r3, [r7, #24]
     EraseInitStruct.Banks = FLASH_BANK_2;
 8009228:	2302      	movs	r3, #2
 800922a:	613b      	str	r3, [r7, #16]
     EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_4;
 800922c:	2330      	movs	r3, #48	; 0x30
 800922e:	61fb      	str	r3, [r7, #28]

	   HAL_FLASH_Unlock();
 8009230:	f7f8 f90c 	bl	800144c <HAL_FLASH_Unlock>

	if( HAL_FLASHEx_Erase(&EraseInitStruct, &PageError)== HAL_OK)
 8009234:	f107 0208 	add.w	r2, r7, #8
 8009238:	f107 030c 	add.w	r3, r7, #12
 800923c:	4611      	mov	r1, r2
 800923e:	4618      	mov	r0, r3
 8009240:	f7f8 fa04 	bl	800164c <HAL_FLASHEx_Erase>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d103      	bne.n	8009252 <flash_earse+0x42>
         {
					 HAL_FLASH_Lock();
 800924a:	f7f8 f939 	bl	80014c0 <HAL_FLASH_Lock>
					 return true;
 800924e:	2301      	movs	r3, #1
 8009250:	e002      	b.n	8009258 <flash_earse+0x48>
         }
         else
         {
            HAL_FLASH_Lock();
 8009252:	f7f8 f935 	bl	80014c0 <HAL_FLASH_Lock>
            return false;
 8009256:	2300      	movs	r3, #0
         }
}
 8009258:	4618      	mov	r0, r3
 800925a:	3720      	adds	r7, #32
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009264:	f7f7 fa14 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009268:	f000 f814 	bl	8009294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800926c:	f000 f9e0 	bl	8009630 <MX_GPIO_Init>
  MX_TIM6_Init();
 8009270:	f000 f8c4 	bl	80093fc <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8009274:	f000 f944 	bl	8009500 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8009278:	f000 f98e 	bl	8009598 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800927c:	f000 f8f4 	bl	8009468 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8009280:	4803      	ldr	r0, [pc, #12]	; (8009290 <main+0x30>)
 8009282:	f7fa ffc5 	bl	8004210 <HAL_TIM_Base_Start_IT>

   main_ini();
 8009286:	f000 fac9 	bl	800981c <main_ini>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  main_task();
 800928a:	f000 fae5 	bl	8009858 <main_task>
 800928e:	e7fc      	b.n	800928a <main+0x2a>
 8009290:	240008b8 	.word	0x240008b8

08009294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b0cc      	sub	sp, #304	; 0x130
 8009298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800929a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800929e:	224c      	movs	r2, #76	; 0x4c
 80092a0:	2100      	movs	r1, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f004 fb04 	bl	800d8b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80092a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80092ac:	2220      	movs	r2, #32
 80092ae:	2100      	movs	r1, #0
 80092b0:	4618      	mov	r0, r3
 80092b2:	f004 fafd 	bl	800d8b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80092b6:	f107 0308 	add.w	r3, r7, #8
 80092ba:	4618      	mov	r0, r3
 80092bc:	23bc      	movs	r3, #188	; 0xbc
 80092be:	461a      	mov	r2, r3
 80092c0:	2100      	movs	r1, #0
 80092c2:	f004 faf5 	bl	800d8b0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80092c6:	2002      	movs	r0, #2
 80092c8:	f7f8 fd0e 	bl	8001ce8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80092cc:	1d3b      	adds	r3, r7, #4
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	4b48      	ldr	r3, [pc, #288]	; (80093f4 <SystemClock_Config+0x160>)
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	4a47      	ldr	r2, [pc, #284]	; (80093f4 <SystemClock_Config+0x160>)
 80092d8:	f023 0301 	bic.w	r3, r3, #1
 80092dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80092de:	4b45      	ldr	r3, [pc, #276]	; (80093f4 <SystemClock_Config+0x160>)
 80092e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e2:	f003 0201 	and.w	r2, r3, #1
 80092e6:	1d3b      	adds	r3, r7, #4
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	4b43      	ldr	r3, [pc, #268]	; (80093f8 <SystemClock_Config+0x164>)
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	4a42      	ldr	r2, [pc, #264]	; (80093f8 <SystemClock_Config+0x164>)
 80092f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092f4:	6193      	str	r3, [r2, #24]
 80092f6:	4b40      	ldr	r3, [pc, #256]	; (80093f8 <SystemClock_Config+0x164>)
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80092fe:	1d3b      	adds	r3, r7, #4
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	1d3b      	adds	r3, r7, #4
 8009304:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8009306:	bf00      	nop
 8009308:	4b3b      	ldr	r3, [pc, #236]	; (80093f8 <SystemClock_Config+0x164>)
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009314:	d1f8      	bne.n	8009308 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009316:	2301      	movs	r3, #1
 8009318:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800931c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009320:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009324:	2302      	movs	r3, #2
 8009326:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800932a:	2302      	movs	r3, #2
 800932c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009330:	2301      	movs	r3, #1
 8009332:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8009336:	2378      	movs	r3, #120	; 0x78
 8009338:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800933c:	2302      	movs	r3, #2
 800933e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8009342:	2314      	movs	r3, #20
 8009344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8009348:	2302      	movs	r3, #2
 800934a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800934e:	230c      	movs	r3, #12
 8009350:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8009354:	2300      	movs	r3, #0
 8009356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009360:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8009364:	4618      	mov	r0, r3
 8009366:	f7f8 fcf7 	bl	8001d58 <HAL_RCC_OscConfig>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8009370:	f000 fa4c 	bl	800980c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009374:	233f      	movs	r3, #63	; 0x3f
 8009376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800937a:	2303      	movs	r3, #3
 800937c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8009380:	2300      	movs	r3, #0
 8009382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8009386:	2308      	movs	r3, #8
 8009388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800938c:	2340      	movs	r3, #64	; 0x40
 800938e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8009398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800939c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80093a0:	2340      	movs	r3, #64	; 0x40
 80093a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80093a6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80093aa:	2104      	movs	r1, #4
 80093ac:	4618      	mov	r0, r3
 80093ae:	f7f9 f88b 	bl	80024c8 <HAL_RCC_ClockConfig>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <SystemClock_Config+0x128>
  {
    Error_Handler();
 80093b8:	f000 fa28 	bl	800980c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80093bc:	f107 0308 	add.w	r3, r7, #8
 80093c0:	2203      	movs	r2, #3
 80093c2:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80093c4:	f107 0308 	add.w	r3, r7, #8
 80093c8:	2200      	movs	r2, #0
 80093ca:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80093cc:	f107 0308 	add.w	r3, r7, #8
 80093d0:	2200      	movs	r2, #0
 80093d2:	679a      	str	r2, [r3, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80093d4:	f107 0308 	add.w	r3, r7, #8
 80093d8:	4618      	mov	r0, r3
 80093da:	f7f9 fbcf 	bl	8002b7c <HAL_RCCEx_PeriphCLKConfig>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <SystemClock_Config+0x154>
  {
    Error_Handler();
 80093e4:	f000 fa12 	bl	800980c <Error_Handler>
  }
}
 80093e8:	bf00      	nop
 80093ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	58000400 	.word	0x58000400
 80093f8:	58024800 	.word	0x58024800

080093fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009402:	1d3b      	adds	r3, r7, #4
 8009404:	2200      	movs	r2, #0
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	605a      	str	r2, [r3, #4]
 800940a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800940c:	4b14      	ldr	r3, [pc, #80]	; (8009460 <MX_TIM6_Init+0x64>)
 800940e:	4a15      	ldr	r2, [pc, #84]	; (8009464 <MX_TIM6_Init+0x68>)
 8009410:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 12000;
 8009412:	4b13      	ldr	r3, [pc, #76]	; (8009460 <MX_TIM6_Init+0x64>)
 8009414:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 8009418:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800941a:	4b11      	ldr	r3, [pc, #68]	; (8009460 <MX_TIM6_Init+0x64>)
 800941c:	2200      	movs	r2, #0
 800941e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8009420:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <MX_TIM6_Init+0x64>)
 8009422:	2201      	movs	r2, #1
 8009424:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009426:	4b0e      	ldr	r3, [pc, #56]	; (8009460 <MX_TIM6_Init+0x64>)
 8009428:	2200      	movs	r2, #0
 800942a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800942c:	480c      	ldr	r0, [pc, #48]	; (8009460 <MX_TIM6_Init+0x64>)
 800942e:	f7fa fec3 	bl	80041b8 <HAL_TIM_Base_Init>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d001      	beq.n	800943c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8009438:	f000 f9e8 	bl	800980c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800943c:	2320      	movs	r3, #32
 800943e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009444:	1d3b      	adds	r3, r7, #4
 8009446:	4619      	mov	r1, r3
 8009448:	4805      	ldr	r0, [pc, #20]	; (8009460 <MX_TIM6_Init+0x64>)
 800944a:	f7fb f8f7 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8009454:	f000 f9da 	bl	800980c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8009458:	bf00      	nop
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	240008b8 	.word	0x240008b8
 8009464:	40001000 	.word	0x40001000

08009468 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800946c:	4b22      	ldr	r3, [pc, #136]	; (80094f8 <MX_UART4_Init+0x90>)
 800946e:	4a23      	ldr	r2, [pc, #140]	; (80094fc <MX_UART4_Init+0x94>)
 8009470:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8009472:	4b21      	ldr	r3, [pc, #132]	; (80094f8 <MX_UART4_Init+0x90>)
 8009474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009478:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800947a:	4b1f      	ldr	r3, [pc, #124]	; (80094f8 <MX_UART4_Init+0x90>)
 800947c:	2200      	movs	r2, #0
 800947e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009480:	4b1d      	ldr	r3, [pc, #116]	; (80094f8 <MX_UART4_Init+0x90>)
 8009482:	2200      	movs	r2, #0
 8009484:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009486:	4b1c      	ldr	r3, [pc, #112]	; (80094f8 <MX_UART4_Init+0x90>)
 8009488:	2200      	movs	r2, #0
 800948a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800948c:	4b1a      	ldr	r3, [pc, #104]	; (80094f8 <MX_UART4_Init+0x90>)
 800948e:	220c      	movs	r2, #12
 8009490:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009492:	4b19      	ldr	r3, [pc, #100]	; (80094f8 <MX_UART4_Init+0x90>)
 8009494:	2200      	movs	r2, #0
 8009496:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009498:	4b17      	ldr	r3, [pc, #92]	; (80094f8 <MX_UART4_Init+0x90>)
 800949a:	2200      	movs	r2, #0
 800949c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800949e:	4b16      	ldr	r3, [pc, #88]	; (80094f8 <MX_UART4_Init+0x90>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80094a4:	4b14      	ldr	r3, [pc, #80]	; (80094f8 <MX_UART4_Init+0x90>)
 80094a6:	2200      	movs	r2, #0
 80094a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80094aa:	4b13      	ldr	r3, [pc, #76]	; (80094f8 <MX_UART4_Init+0x90>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80094b0:	4811      	ldr	r0, [pc, #68]	; (80094f8 <MX_UART4_Init+0x90>)
 80094b2:	f7fb f93d 	bl	8004730 <HAL_UART_Init>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80094bc:	f000 f9a6 	bl	800980c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80094c0:	2100      	movs	r1, #0
 80094c2:	480d      	ldr	r0, [pc, #52]	; (80094f8 <MX_UART4_Init+0x90>)
 80094c4:	f7fe fa9f 	bl	8007a06 <HAL_UARTEx_SetTxFifoThreshold>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80094ce:	f000 f99d 	bl	800980c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80094d2:	2100      	movs	r1, #0
 80094d4:	4808      	ldr	r0, [pc, #32]	; (80094f8 <MX_UART4_Init+0x90>)
 80094d6:	f7fe fad4 	bl	8007a82 <HAL_UARTEx_SetRxFifoThreshold>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80094e0:	f000 f994 	bl	800980c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80094e4:	4804      	ldr	r0, [pc, #16]	; (80094f8 <MX_UART4_Init+0x90>)
 80094e6:	f7fe fa55 	bl	8007994 <HAL_UARTEx_DisableFifoMode>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80094f0:	f000 f98c 	bl	800980c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80094f4:	bf00      	nop
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	240008f8 	.word	0x240008f8
 80094fc:	40004c00 	.word	0x40004c00

08009500 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009504:	4b22      	ldr	r3, [pc, #136]	; (8009590 <MX_USART1_UART_Init+0x90>)
 8009506:	4a23      	ldr	r2, [pc, #140]	; (8009594 <MX_USART1_UART_Init+0x94>)
 8009508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800950a:	4b21      	ldr	r3, [pc, #132]	; (8009590 <MX_USART1_UART_Init+0x90>)
 800950c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009512:	4b1f      	ldr	r3, [pc, #124]	; (8009590 <MX_USART1_UART_Init+0x90>)
 8009514:	2200      	movs	r2, #0
 8009516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009518:	4b1d      	ldr	r3, [pc, #116]	; (8009590 <MX_USART1_UART_Init+0x90>)
 800951a:	2200      	movs	r2, #0
 800951c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800951e:	4b1c      	ldr	r3, [pc, #112]	; (8009590 <MX_USART1_UART_Init+0x90>)
 8009520:	2200      	movs	r2, #0
 8009522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009524:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <MX_USART1_UART_Init+0x90>)
 8009526:	220c      	movs	r2, #12
 8009528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800952a:	4b19      	ldr	r3, [pc, #100]	; (8009590 <MX_USART1_UART_Init+0x90>)
 800952c:	2200      	movs	r2, #0
 800952e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009530:	4b17      	ldr	r3, [pc, #92]	; (8009590 <MX_USART1_UART_Init+0x90>)
 8009532:	2200      	movs	r2, #0
 8009534:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009536:	4b16      	ldr	r3, [pc, #88]	; (8009590 <MX_USART1_UART_Init+0x90>)
 8009538:	2200      	movs	r2, #0
 800953a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800953c:	4b14      	ldr	r3, [pc, #80]	; (8009590 <MX_USART1_UART_Init+0x90>)
 800953e:	2200      	movs	r2, #0
 8009540:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009542:	4b13      	ldr	r3, [pc, #76]	; (8009590 <MX_USART1_UART_Init+0x90>)
 8009544:	2200      	movs	r2, #0
 8009546:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009548:	4811      	ldr	r0, [pc, #68]	; (8009590 <MX_USART1_UART_Init+0x90>)
 800954a:	f7fb f8f1 	bl	8004730 <HAL_UART_Init>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8009554:	f000 f95a 	bl	800980c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009558:	2100      	movs	r1, #0
 800955a:	480d      	ldr	r0, [pc, #52]	; (8009590 <MX_USART1_UART_Init+0x90>)
 800955c:	f7fe fa53 	bl	8007a06 <HAL_UARTEx_SetTxFifoThreshold>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d001      	beq.n	800956a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8009566:	f000 f951 	bl	800980c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800956a:	2100      	movs	r1, #0
 800956c:	4808      	ldr	r0, [pc, #32]	; (8009590 <MX_USART1_UART_Init+0x90>)
 800956e:	f7fe fa88 	bl	8007a82 <HAL_UARTEx_SetRxFifoThreshold>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009578:	f000 f948 	bl	800980c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800957c:	4804      	ldr	r0, [pc, #16]	; (8009590 <MX_USART1_UART_Init+0x90>)
 800957e:	f7fe fa09 	bl	8007994 <HAL_UARTEx_DisableFifoMode>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009588:	f000 f940 	bl	800980c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800958c:	bf00      	nop
 800958e:	bd80      	pop	{r7, pc}
 8009590:	2400082c 	.word	0x2400082c
 8009594:	40011000 	.word	0x40011000

08009598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800959c:	4b22      	ldr	r3, [pc, #136]	; (8009628 <MX_USART2_UART_Init+0x90>)
 800959e:	4a23      	ldr	r2, [pc, #140]	; (800962c <MX_USART2_UART_Init+0x94>)
 80095a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80095a2:	4b21      	ldr	r3, [pc, #132]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80095a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80095aa:	4b1f      	ldr	r3, [pc, #124]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80095b0:	4b1d      	ldr	r3, [pc, #116]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80095b6:	4b1c      	ldr	r3, [pc, #112]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80095bc:	4b1a      	ldr	r3, [pc, #104]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095be:	220c      	movs	r2, #12
 80095c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80095c2:	4b19      	ldr	r3, [pc, #100]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80095c8:	4b17      	ldr	r3, [pc, #92]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80095ce:	4b16      	ldr	r3, [pc, #88]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80095d4:	4b14      	ldr	r3, [pc, #80]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095d6:	2200      	movs	r2, #0
 80095d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80095da:	4b13      	ldr	r3, [pc, #76]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095dc:	2200      	movs	r2, #0
 80095de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80095e0:	4811      	ldr	r0, [pc, #68]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095e2:	f7fb f8a5 	bl	8004730 <HAL_UART_Init>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80095ec:	f000 f90e 	bl	800980c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80095f0:	2100      	movs	r1, #0
 80095f2:	480d      	ldr	r0, [pc, #52]	; (8009628 <MX_USART2_UART_Init+0x90>)
 80095f4:	f7fe fa07 	bl	8007a06 <HAL_UARTEx_SetTxFifoThreshold>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80095fe:	f000 f905 	bl	800980c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009602:	2100      	movs	r1, #0
 8009604:	4808      	ldr	r0, [pc, #32]	; (8009628 <MX_USART2_UART_Init+0x90>)
 8009606:	f7fe fa3c 	bl	8007a82 <HAL_UARTEx_SetRxFifoThreshold>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8009610:	f000 f8fc 	bl	800980c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009614:	4804      	ldr	r0, [pc, #16]	; (8009628 <MX_USART2_UART_Init+0x90>)
 8009616:	f7fe f9bd 	bl	8007994 <HAL_UARTEx_DisableFifoMode>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8009620:	f000 f8f4 	bl	800980c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009624:	bf00      	nop
 8009626:	bd80      	pop	{r7, pc}
 8009628:	24000984 	.word	0x24000984
 800962c:	40004400 	.word	0x40004400

08009630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08c      	sub	sp, #48	; 0x30
 8009634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009636:	f107 031c 	add.w	r3, r7, #28
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	605a      	str	r2, [r3, #4]
 8009640:	609a      	str	r2, [r3, #8]
 8009642:	60da      	str	r2, [r3, #12]
 8009644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009646:	4b6a      	ldr	r3, [pc, #424]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 8009648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800964c:	4a68      	ldr	r2, [pc, #416]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 800964e:	f043 0304 	orr.w	r3, r3, #4
 8009652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009656:	4b66      	ldr	r3, [pc, #408]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 8009658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009664:	4b62      	ldr	r3, [pc, #392]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 8009666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800966a:	4a61      	ldr	r2, [pc, #388]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 800966c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009674:	4b5e      	ldr	r3, [pc, #376]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 8009676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800967a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800967e:	617b      	str	r3, [r7, #20]
 8009680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009682:	4b5b      	ldr	r3, [pc, #364]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 8009684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009688:	4a59      	ldr	r2, [pc, #356]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009692:	4b57      	ldr	r3, [pc, #348]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 8009694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	613b      	str	r3, [r7, #16]
 800969e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80096a0:	4b53      	ldr	r3, [pc, #332]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 80096a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096a6:	4a52      	ldr	r2, [pc, #328]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 80096a8:	f043 0302 	orr.w	r3, r3, #2
 80096ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80096b0:	4b4f      	ldr	r3, [pc, #316]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 80096b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096b6:	f003 0302 	and.w	r3, r3, #2
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80096be:	4b4c      	ldr	r3, [pc, #304]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 80096c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096c4:	4a4a      	ldr	r2, [pc, #296]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 80096c6:	f043 0308 	orr.w	r3, r3, #8
 80096ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80096ce:	4b48      	ldr	r3, [pc, #288]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 80096d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	60bb      	str	r3, [r7, #8]
 80096da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80096dc:	4b44      	ldr	r3, [pc, #272]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 80096de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096e2:	4a43      	ldr	r2, [pc, #268]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 80096e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80096ec:	4b40      	ldr	r3, [pc, #256]	; (80097f0 <MX_GPIO_Init+0x1c0>)
 80096ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80096f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f6:	607b      	str	r3, [r7, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80096fa:	2200      	movs	r2, #0
 80096fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8009700:	483c      	ldr	r0, [pc, #240]	; (80097f4 <MX_GPIO_Init+0x1c4>)
 8009702:	f7f8 fad7 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8009706:	2200      	movs	r2, #0
 8009708:	2180      	movs	r1, #128	; 0x80
 800970a:	483b      	ldr	r0, [pc, #236]	; (80097f8 <MX_GPIO_Init+0x1c8>)
 800970c:	f7f8 fad2 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8009710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009716:	4b39      	ldr	r3, [pc, #228]	; (80097fc <MX_GPIO_Init+0x1cc>)
 8009718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800971a:	2300      	movs	r3, #0
 800971c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800971e:	f107 031c 	add.w	r3, r7, #28
 8009722:	4619      	mov	r1, r3
 8009724:	4834      	ldr	r0, [pc, #208]	; (80097f8 <MX_GPIO_Init+0x1c8>)
 8009726:	f7f8 f915 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800972a:	2332      	movs	r3, #50	; 0x32
 800972c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800972e:	2302      	movs	r3, #2
 8009730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009732:	2300      	movs	r3, #0
 8009734:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009736:	2300      	movs	r3, #0
 8009738:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800973a:	230b      	movs	r3, #11
 800973c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800973e:	f107 031c 	add.w	r3, r7, #28
 8009742:	4619      	mov	r1, r3
 8009744:	482c      	ldr	r0, [pc, #176]	; (80097f8 <MX_GPIO_Init+0x1c8>)
 8009746:	f7f8 f905 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800974a:	2386      	movs	r3, #134	; 0x86
 800974c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800974e:	2302      	movs	r3, #2
 8009750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009752:	2300      	movs	r3, #0
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009756:	2300      	movs	r3, #0
 8009758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800975a:	230b      	movs	r3, #11
 800975c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800975e:	f107 031c 	add.w	r3, r7, #28
 8009762:	4619      	mov	r1, r3
 8009764:	4826      	ldr	r0, [pc, #152]	; (8009800 <MX_GPIO_Init+0x1d0>)
 8009766:	f7f8 f8f5 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 800976a:	f244 0381 	movw	r3, #16513	; 0x4081
 800976e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009770:	2301      	movs	r3, #1
 8009772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009774:	2300      	movs	r3, #0
 8009776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009778:	2300      	movs	r3, #0
 800977a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800977c:	f107 031c 	add.w	r3, r7, #28
 8009780:	4619      	mov	r1, r3
 8009782:	481c      	ldr	r0, [pc, #112]	; (80097f4 <MX_GPIO_Init+0x1c4>)
 8009784:	f7f8 f8e6 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8009788:	f44f 7340 	mov.w	r3, #768	; 0x300
 800978c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800978e:	2302      	movs	r3, #2
 8009790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009792:	2300      	movs	r3, #0
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009796:	2300      	movs	r3, #0
 8009798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800979a:	2307      	movs	r3, #7
 800979c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800979e:	f107 031c 	add.w	r3, r7, #28
 80097a2:	4619      	mov	r1, r3
 80097a4:	4817      	ldr	r0, [pc, #92]	; (8009804 <MX_GPIO_Init+0x1d4>)
 80097a6:	f7f8 f8d5 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80097aa:	2380      	movs	r3, #128	; 0x80
 80097ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097ae:	2301      	movs	r3, #1
 80097b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b2:	2300      	movs	r3, #0
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097b6:	2300      	movs	r3, #0
 80097b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097ba:	f107 031c 	add.w	r3, r7, #28
 80097be:	4619      	mov	r1, r3
 80097c0:	480d      	ldr	r0, [pc, #52]	; (80097f8 <MX_GPIO_Init+0x1c8>)
 80097c2:	f7f8 f8c7 	bl	8001954 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80097c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80097ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097cc:	2302      	movs	r3, #2
 80097ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d0:	2300      	movs	r3, #0
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097d4:	2300      	movs	r3, #0
 80097d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80097d8:	230b      	movs	r3, #11
 80097da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80097dc:	f107 031c 	add.w	r3, r7, #28
 80097e0:	4619      	mov	r1, r3
 80097e2:	4809      	ldr	r0, [pc, #36]	; (8009808 <MX_GPIO_Init+0x1d8>)
 80097e4:	f7f8 f8b6 	bl	8001954 <HAL_GPIO_Init>

}
 80097e8:	bf00      	nop
 80097ea:	3730      	adds	r7, #48	; 0x30
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	58024400 	.word	0x58024400
 80097f4:	58020400 	.word	0x58020400
 80097f8:	58020800 	.word	0x58020800
 80097fc:	11110000 	.word	0x11110000
 8009800:	58020000 	.word	0x58020000
 8009804:	58020c00 	.word	0x58020c00
 8009808:	58021800 	.word	0x58021800

0800980c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009810:	bf00      	nop
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
	...

0800981c <main_ini>:




void main_ini()
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0

	uart_ini();
 8009820:	f003 fc96 	bl	800d150 <uart_ini>
	uart_ini_u2();
 8009824:	f003 fe74 	bl	800d510 <uart_ini_u2>

	printstr_u2("uart 2 test \n");
 8009828:	4808      	ldr	r0, [pc, #32]	; (800984c <main_ini+0x30>)
 800982a:	f003 ffc5 	bl	800d7b8 <printstr_u2>

	printstr("log:========HELLO========");
 800982e:	4808      	ldr	r0, [pc, #32]	; (8009850 <main_ini+0x34>)
 8009830:	f003 fe04 	bl	800d43c <printstr>
	printstr("V0.6");
 8009834:	4807      	ldr	r0, [pc, #28]	; (8009854 <main_ini+0x38>)
 8009836:	f003 fe01 	bl	800d43c <printstr>

	//temp_filarray();
	//save_data();
  	load_settings();
 800983a:	f003 f8dd 	bl	800c9f8 <load_settings>
	 for(int i =0; i<4; i++)
	 {
		 printint(test_output[i]);
	 }*/

	timers_ini();
 800983e:	f001 f885 	bl	800a94c <timers_ini>
	ini_calc();
 8009842:	f7fe fd0d 	bl	8008260 <ini_calc>

	//flag_axises_inned = soft_limit_ini();  //ini machine zero


}
 8009846:	bf00      	nop
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	08010968 	.word	0x08010968
 8009850:	08010978 	.word	0x08010978
 8009854:	08010994 	.word	0x08010994

08009858 <main_task>:



void main_task()
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
	action_loop();
 800985c:	f000 f84e 	bl	80098fc <action_loop>
	readATSerialBuff();
 8009860:	f003 fd12 	bl	800d288 <readATSerialBuff>
	readATSerialBuff_u2();
 8009864:	f003 fef0 	bl	800d648 <readATSerialBuff_u2>
	put_obj();
 8009868:	f000 fc78 	bl	800a15c <put_obj>
	msg_agent();
 800986c:	f002 ff8c 	bl	800c788 <msg_agent>
}
 8009870:	bf00      	nop
 8009872:	bd80      	pop	{r7, pc}

08009874 <domotion>:
uint8_t flag_safe_mode_motion = 0;



void domotion(float x, float y, float z)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	ed87 0a03 	vstr	s0, [r7, #12]
 800987e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009882:	ed87 1a01 	vstr	s2, [r7, #4]
			if (calculate_positions(x,y,z, &axis_a, &axis_b, &axis_c))
 8009886:	4a0a      	ldr	r2, [pc, #40]	; (80098b0 <domotion+0x3c>)
 8009888:	490a      	ldr	r1, [pc, #40]	; (80098b4 <domotion+0x40>)
 800988a:	480b      	ldr	r0, [pc, #44]	; (80098b8 <domotion+0x44>)
 800988c:	ed97 1a01 	vldr	s2, [r7, #4]
 8009890:	edd7 0a02 	vldr	s1, [r7, #8]
 8009894:	ed97 0a03 	vldr	s0, [r7, #12]
 8009898:	f7fe fd3e 	bl	8008318 <calculate_positions>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d002      	beq.n	80098a8 <domotion+0x34>
			{
				flag_do_move = 1;
 80098a2:	4b06      	ldr	r3, [pc, #24]	; (80098bc <domotion+0x48>)
 80098a4:	2201      	movs	r2, #1
 80098a6:	701a      	strb	r2, [r3, #0]
			}

}
 80098a8:	bf00      	nop
 80098aa:	3710      	adds	r7, #16
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	240002ec 	.word	0x240002ec
 80098b4:	240002e8 	.word	0x240002e8
 80098b8:	240002e4 	.word	0x240002e4
 80098bc:	240002e0 	.word	0x240002e0

080098c0 <vacuum_on>:

void vacuum_on()
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
	if (global_switch_vacuum == true) HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <vacuum_on+0x1c>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d004      	beq.n	80098d6 <vacuum_on+0x16>
 80098cc:	2201      	movs	r2, #1
 80098ce:	2108      	movs	r1, #8
 80098d0:	4803      	ldr	r0, [pc, #12]	; (80098e0 <vacuum_on+0x20>)
 80098d2:	f7f8 f9ef 	bl	8001cb4 <HAL_GPIO_WritePin>
}
 80098d6:	bf00      	nop
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	2400005c 	.word	0x2400005c
 80098e0:	58020800 	.word	0x58020800

080098e4 <vacuum_off>:

void vacuum_off ()
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80098e8:	2200      	movs	r2, #0
 80098ea:	2108      	movs	r1, #8
 80098ec:	4802      	ldr	r0, [pc, #8]	; (80098f8 <vacuum_off+0x14>)
 80098ee:	f7f8 f9e1 	bl	8001cb4 <HAL_GPIO_WritePin>
}
 80098f2:	bf00      	nop
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	58020800 	.word	0x58020800

080098fc <action_loop>:


void action_loop()
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
	 if (flag_do_move == 1)
 8009902:	4b2f      	ldr	r3, [pc, #188]	; (80099c0 <action_loop+0xc4>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d143      	bne.n	8009992 <action_loop+0x96>
	{
		if (flag_action_busy == 0)
 800990a:	4b2e      	ldr	r3, [pc, #184]	; (80099c4 <action_loop+0xc8>)
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d129      	bne.n	8009966 <action_loop+0x6a>
		{

    flag_action_busy=1;
 8009912:	4b2c      	ldr	r3, [pc, #176]	; (80099c4 <action_loop+0xc8>)
 8009914:	2201      	movs	r2, #1
 8009916:	701a      	strb	r2, [r3, #0]
		int answ = short_move(-axis_a,-axis_b,-axis_c);
 8009918:	4b2b      	ldr	r3, [pc, #172]	; (80099c8 <action_loop+0xcc>)
 800991a:	edd3 7a00 	vldr	s15, [r3]
 800991e:	eeb1 7a67 	vneg.f32	s14, s15
 8009922:	4b2a      	ldr	r3, [pc, #168]	; (80099cc <action_loop+0xd0>)
 8009924:	edd3 7a00 	vldr	s15, [r3]
 8009928:	eef1 6a67 	vneg.f32	s13, s15
 800992c:	4b28      	ldr	r3, [pc, #160]	; (80099d0 <action_loop+0xd4>)
 800992e:	edd3 7a00 	vldr	s15, [r3]
 8009932:	eef1 7a67 	vneg.f32	s15, s15
 8009936:	eeb0 1a67 	vmov.f32	s2, s15
 800993a:	eef0 0a66 	vmov.f32	s1, s13
 800993e:	eeb0 0a47 	vmov.f32	s0, s14
 8009942:	f000 fa51 	bl	8009de8 <short_move>
 8009946:	4603      	mov	r3, r0
 8009948:	607b      	str	r3, [r7, #4]
		//if (answ == 1) printstr("OK");
		/*else*/ if (answ == 0)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10a      	bne.n	8009966 <action_loop+0x6a>
		{
			printstr("log: out range:");
 8009950:	4820      	ldr	r0, [pc, #128]	; (80099d4 <action_loop+0xd8>)
 8009952:	f003 fd73 	bl	800d43c <printstr>
			if (flag_safe_mode_motion == 1)
 8009956:	4b20      	ldr	r3, [pc, #128]	; (80099d8 <action_loop+0xdc>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d103      	bne.n	8009966 <action_loop+0x6a>
			{
				printstr("log: safe mode. stop work, please reset");
 800995e:	481f      	ldr	r0, [pc, #124]	; (80099dc <action_loop+0xe0>)
 8009960:	f003 fd6c 	bl	800d43c <printstr>
				while (true)
 8009964:	e7fe      	b.n	8009964 <action_loop+0x68>
				{
				}
			}
		}
		}
		if (flag_axis_a_busy==0 && flag_axis_b_busy==0 && flag_axis_c_busy==0)
 8009966:	4b1e      	ldr	r3, [pc, #120]	; (80099e0 <action_loop+0xe4>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d123      	bne.n	80099b6 <action_loop+0xba>
 800996e:	4b1d      	ldr	r3, [pc, #116]	; (80099e4 <action_loop+0xe8>)
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d11f      	bne.n	80099b6 <action_loop+0xba>
 8009976:	4b1c      	ldr	r3, [pc, #112]	; (80099e8 <action_loop+0xec>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d11b      	bne.n	80099b6 <action_loop+0xba>
		{
			flag_uart_busy = false;
 800997e:	4b1b      	ldr	r3, [pc, #108]	; (80099ec <action_loop+0xf0>)
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
			flag_do_move = 0;
 8009984:	4b0e      	ldr	r3, [pc, #56]	; (80099c0 <action_loop+0xc4>)
 8009986:	2200      	movs	r2, #0
 8009988:	701a      	strb	r2, [r3, #0]
			flag_action_busy = 0;
 800998a:	4b0e      	ldr	r3, [pc, #56]	; (80099c4 <action_loop+0xc8>)
 800998c:	2200      	movs	r2, #0
 800998e:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8009990:	e011      	b.n	80099b6 <action_loop+0xba>
	else if (flag_axises_zero ==1)
 8009992:	4b17      	ldr	r3, [pc, #92]	; (80099f0 <action_loop+0xf4>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d10d      	bne.n	80099b6 <action_loop+0xba>
		flag_axises_zero = 0;
 800999a:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <action_loop+0xf4>)
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
			 flag_uart_busy = false;
 80099a0:	4b12      	ldr	r3, [pc, #72]	; (80099ec <action_loop+0xf0>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	701a      	strb	r2, [r3, #0]
		if(soft_limit_ini()==1)
 80099a6:	f000 f84b 	bl	8009a40 <soft_limit_ini>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d102      	bne.n	80099b6 <action_loop+0xba>
		printstr("mashine_zero");
 80099b0:	4810      	ldr	r0, [pc, #64]	; (80099f4 <action_loop+0xf8>)
 80099b2:	f003 fd43 	bl	800d43c <printstr>
}
 80099b6:	bf00      	nop
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	240002e0 	.word	0x240002e0
 80099c4:	240002f0 	.word	0x240002f0
 80099c8:	240002e4 	.word	0x240002e4
 80099cc:	240002e8 	.word	0x240002e8
 80099d0:	240002ec 	.word	0x240002ec
 80099d4:	0801099c 	.word	0x0801099c
 80099d8:	240002f1 	.word	0x240002f1
 80099dc:	080109ac 	.word	0x080109ac
 80099e0:	2400034b 	.word	0x2400034b
 80099e4:	2400034c 	.word	0x2400034c
 80099e8:	2400034d 	.word	0x2400034d
 80099ec:	24000390 	.word	0x24000390
 80099f0:	240002e1 	.word	0x240002e1
 80099f4:	080109d4 	.word	0x080109d4

080099f8 <set_acceleration>:

void set_acceleration(int value)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
	accel[0] = value;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a0a:	4b0c      	ldr	r3, [pc, #48]	; (8009a3c <set_acceleration+0x44>)
 8009a0c:	edc3 7a00 	vstr	s15, [r3]
	accel[1] = value;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	ee07 3a90 	vmov	s15, r3
 8009a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a1a:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <set_acceleration+0x44>)
 8009a1c:	edc3 7a01 	vstr	s15, [r3, #4]
	accel[2] = value;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	ee07 3a90 	vmov	s15, r3
 8009a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a2a:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <set_acceleration+0x44>)
 8009a2c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	24000050 	.word	0x24000050

08009a40 <soft_limit_ini>:


uint8_t soft_limit_ini()
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
		float null;
	ini_a_ok = 0;
 8009a46:	4b61      	ldr	r3, [pc, #388]	; (8009bcc <soft_limit_ini+0x18c>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	701a      	strb	r2, [r3, #0]
  ini_b_ok = 0;
 8009a4c:	4b60      	ldr	r3, [pc, #384]	; (8009bd0 <soft_limit_ini+0x190>)
 8009a4e:	2200      	movs	r2, #0
 8009a50:	701a      	strb	r2, [r3, #0]
  ini_c_ok = 0;
 8009a52:	4b60      	ldr	r3, [pc, #384]	; (8009bd4 <soft_limit_ini+0x194>)
 8009a54:	2200      	movs	r2, #0
 8009a56:	701a      	strb	r2, [r3, #0]
 limit_switch_a = 0;
 8009a58:	4b5f      	ldr	r3, [pc, #380]	; (8009bd8 <soft_limit_ini+0x198>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	701a      	strb	r2, [r3, #0]
 limit_switch_b = 0;
 8009a5e:	4b5f      	ldr	r3, [pc, #380]	; (8009bdc <soft_limit_ini+0x19c>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	701a      	strb	r2, [r3, #0]
 limit_switch_c = 0;
 8009a64:	4b5e      	ldr	r3, [pc, #376]	; (8009be0 <soft_limit_ini+0x1a0>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
	}*/



	HAL_Delay(20);
 8009a6a:	2014      	movs	r0, #20
 8009a6c:	f7f6 fe9e 	bl	80007ac <HAL_Delay>
	//ini_a_ok=1; ini_b_ok=1; ini_c_ok=1;
	limit_switch_a = 0;
 8009a70:	4b59      	ldr	r3, [pc, #356]	; (8009bd8 <soft_limit_ini+0x198>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
	limit_switch_b = 0;
 8009a76:	4b59      	ldr	r3, [pc, #356]	; (8009bdc <soft_limit_ini+0x19c>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	701a      	strb	r2, [r3, #0]
	limit_switch_c = 0;
 8009a7c:	4b58      	ldr	r3, [pc, #352]	; (8009be0 <soft_limit_ini+0x1a0>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	701a      	strb	r2, [r3, #0]

	for (int i=0; i<3;i++)
 8009a82:	2300      	movs	r3, #0
 8009a84:	607b      	str	r3, [r7, #4]
 8009a86:	e03a      	b.n	8009afe <soft_limit_ini+0xbe>
	{

		calc_impulses(10, softlimit_max*k_axis[i], accel[i]*k_axis[i], accel[0]*k_axis[i], i, &null);
 8009a88:	4a56      	ldr	r2, [pc, #344]	; (8009be4 <soft_limit_ini+0x1a4>)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	ed93 7a00 	vldr	s14, [r3]
 8009a94:	4b54      	ldr	r3, [pc, #336]	; (8009be8 <soft_limit_ini+0x1a8>)
 8009a96:	edd3 7a00 	vldr	s15, [r3]
 8009a9a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009a9e:	4a53      	ldr	r2, [pc, #332]	; (8009bec <soft_limit_ini+0x1ac>)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	ed93 7a00 	vldr	s14, [r3]
 8009aaa:	4a4e      	ldr	r2, [pc, #312]	; (8009be4 <soft_limit_ini+0x1a4>)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	edd3 7a00 	vldr	s15, [r3]
 8009ab6:	ee27 6a27 	vmul.f32	s12, s14, s15
 8009aba:	4b4c      	ldr	r3, [pc, #304]	; (8009bec <soft_limit_ini+0x1ac>)
 8009abc:	ed93 7a00 	vldr	s14, [r3]
 8009ac0:	4a48      	ldr	r2, [pc, #288]	; (8009be4 <soft_limit_ini+0x1a4>)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	edd3 7a00 	vldr	s15, [r3]
 8009acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	463a      	mov	r2, r7
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	eef0 1a67 	vmov.f32	s3, s15
 8009ade:	eeb0 1a46 	vmov.f32	s2, s12
 8009ae2:	eef0 0a66 	vmov.f32	s1, s13
 8009ae6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8009aea:	f7ff f97b 	bl	8008de4 <calc_impulses>
		action_moove_carr(i);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 f942 	bl	8009d7c <action_moove_carr>
	for (int i=0; i<3;i++)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3301      	adds	r3, #1
 8009afc:	607b      	str	r3, [r7, #4]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	ddc1      	ble.n	8009a88 <soft_limit_ini+0x48>
	}
			while (ini_a_ok==0 || ini_b_ok==0 || ini_c_ok==0)
 8009b04:	e03d      	b.n	8009b82 <soft_limit_ini+0x142>
	{
		if(limit_switch_a == 1 && ini_a_ok == 0)
 8009b06:	4b34      	ldr	r3, [pc, #208]	; (8009bd8 <soft_limit_ini+0x198>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d110      	bne.n	8009b30 <soft_limit_ini+0xf0>
 8009b0e:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <soft_limit_ini+0x18c>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10c      	bne.n	8009b30 <soft_limit_ini+0xf0>
			{
				limit_switch_a = 0;
 8009b16:	4b30      	ldr	r3, [pc, #192]	; (8009bd8 <soft_limit_ini+0x198>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
				printstr("ini_axises_a_ok");
 8009b1c:	4834      	ldr	r0, [pc, #208]	; (8009bf0 <soft_limit_ini+0x1b0>)
 8009b1e:	f003 fc8d 	bl	800d43c <printstr>
        axis_int_stop(0);
 8009b22:	2000      	movs	r0, #0
 8009b24:	f000 f86e 	bl	8009c04 <axis_int_stop>
				ini_a_ok = 1;
 8009b28:	4b28      	ldr	r3, [pc, #160]	; (8009bcc <soft_limit_ini+0x18c>)
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	e028      	b.n	8009b82 <soft_limit_ini+0x142>

			}
			else if(limit_switch_b == 1 && ini_b_ok == 0)
 8009b30:	4b2a      	ldr	r3, [pc, #168]	; (8009bdc <soft_limit_ini+0x19c>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d110      	bne.n	8009b5a <soft_limit_ini+0x11a>
 8009b38:	4b25      	ldr	r3, [pc, #148]	; (8009bd0 <soft_limit_ini+0x190>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d10c      	bne.n	8009b5a <soft_limit_ini+0x11a>
			{
				limit_switch_b = 0;
 8009b40:	4b26      	ldr	r3, [pc, #152]	; (8009bdc <soft_limit_ini+0x19c>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	701a      	strb	r2, [r3, #0]
				printstr("ini_axises_b_ok");
 8009b46:	482b      	ldr	r0, [pc, #172]	; (8009bf4 <soft_limit_ini+0x1b4>)
 8009b48:	f003 fc78 	bl	800d43c <printstr>
        axis_int_stop(1);
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	f000 f859 	bl	8009c04 <axis_int_stop>
			  ini_b_ok = 1;
 8009b52:	4b1f      	ldr	r3, [pc, #124]	; (8009bd0 <soft_limit_ini+0x190>)
 8009b54:	2201      	movs	r2, #1
 8009b56:	701a      	strb	r2, [r3, #0]
 8009b58:	e013      	b.n	8009b82 <soft_limit_ini+0x142>

			}
			else if(limit_switch_c == 1 && ini_c_ok == 0)
 8009b5a:	4b21      	ldr	r3, [pc, #132]	; (8009be0 <soft_limit_ini+0x1a0>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d10f      	bne.n	8009b82 <soft_limit_ini+0x142>
 8009b62:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <soft_limit_ini+0x194>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10b      	bne.n	8009b82 <soft_limit_ini+0x142>
			{
				limit_switch_c = 0;
 8009b6a:	4b1d      	ldr	r3, [pc, #116]	; (8009be0 <soft_limit_ini+0x1a0>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	701a      	strb	r2, [r3, #0]
				printstr("ini_axises_c_ok");
 8009b70:	4821      	ldr	r0, [pc, #132]	; (8009bf8 <soft_limit_ini+0x1b8>)
 8009b72:	f003 fc63 	bl	800d43c <printstr>
				axis_int_stop(2);
 8009b76:	2002      	movs	r0, #2
 8009b78:	f000 f844 	bl	8009c04 <axis_int_stop>

				ini_c_ok = 1;
 8009b7c:	4b15      	ldr	r3, [pc, #84]	; (8009bd4 <soft_limit_ini+0x194>)
 8009b7e:	2201      	movs	r2, #1
 8009b80:	701a      	strb	r2, [r3, #0]
			while (ini_a_ok==0 || ini_b_ok==0 || ini_c_ok==0)
 8009b82:	4b12      	ldr	r3, [pc, #72]	; (8009bcc <soft_limit_ini+0x18c>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d0bd      	beq.n	8009b06 <soft_limit_ini+0xc6>
 8009b8a:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <soft_limit_ini+0x190>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d0b9      	beq.n	8009b06 <soft_limit_ini+0xc6>
 8009b92:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <soft_limit_ini+0x194>)
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0b5      	beq.n	8009b06 <soft_limit_ini+0xc6>

			}
			//HAL_Delay(1);
	}
	if (ini_a_ok == 1 && ini_b_ok == 1 && ini_c_ok == 1)
 8009b9a:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <soft_limit_ini+0x18c>)
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d10c      	bne.n	8009bbc <soft_limit_ini+0x17c>
 8009ba2:	4b0b      	ldr	r3, [pc, #44]	; (8009bd0 <soft_limit_ini+0x190>)
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d108      	bne.n	8009bbc <soft_limit_ini+0x17c>
 8009baa:	4b0a      	ldr	r3, [pc, #40]	; (8009bd4 <soft_limit_ini+0x194>)
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d104      	bne.n	8009bbc <soft_limit_ini+0x17c>
		//while (flag_axis_a_busy!=0 || flag_axis_b_busy!=0 || flag_axis_c_busy!=0);
	/*	HAL_Delay(1000);
		axis_int_stop(0);
		axis_int_stop(1);
		axis_int_stop(2);*/
		printstr("ini_axises_ok");
 8009bb2:	4812      	ldr	r0, [pc, #72]	; (8009bfc <soft_limit_ini+0x1bc>)
 8009bb4:	f003 fc42 	bl	800d43c <printstr>
		return 1;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e003      	b.n	8009bc4 <soft_limit_ini+0x184>
	}
	else
	{
	printstr("ini_axises_fail");
 8009bbc:	4810      	ldr	r0, [pc, #64]	; (8009c00 <soft_limit_ini+0x1c0>)
 8009bbe:	f003 fc3d 	bl	800d43c <printstr>
		return 0;
 8009bc2:	2300      	movs	r3, #0
	}




}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	240002c3 	.word	0x240002c3
 8009bd0:	240002c4 	.word	0x240002c4
 8009bd4:	240002c5 	.word	0x240002c5
 8009bd8:	240002c0 	.word	0x240002c0
 8009bdc:	240002c1 	.word	0x240002c1
 8009be0:	240002c2 	.word	0x240002c2
 8009be4:	24000044 	.word	0x24000044
 8009be8:	2400003c 	.word	0x2400003c
 8009bec:	24000050 	.word	0x24000050
 8009bf0:	080109e4 	.word	0x080109e4
 8009bf4:	080109f4 	.word	0x080109f4
 8009bf8:	08010a04 	.word	0x08010a04
 8009bfc:	08010a14 	.word	0x08010a14
 8009c00:	08010a24 	.word	0x08010a24

08009c04 <axis_int_stop>:

uint8_t axis_int_stop(uint8_t axis)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	71fb      	strb	r3, [r7, #7]
	if (axis == 0)
 8009c0e:	79fb      	ldrb	r3, [r7, #7]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <axis_int_stop+0x26>
		{
			old_pos[0] = 0;
 8009c14:	4b16      	ldr	r3, [pc, #88]	; (8009c70 <axis_int_stop+0x6c>)
 8009c16:	f04f 0200 	mov.w	r2, #0
 8009c1a:	601a      	str	r2, [r3, #0]
			a_flag_go = 2; 	//значение 2 обнуляет счетчики импульсов
 8009c1c:	4b15      	ldr	r3, [pc, #84]	; (8009c74 <axis_int_stop+0x70>)
 8009c1e:	2202      	movs	r2, #2
 8009c20:	701a      	strb	r2, [r3, #0]
			flag_axis_a_busy=0;
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <axis_int_stop+0x74>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	701a      	strb	r2, [r3, #0]
 8009c28:	e01a      	b.n	8009c60 <axis_int_stop+0x5c>
		}
		else if (axis == 1)
 8009c2a:	79fb      	ldrb	r3, [r7, #7]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d10a      	bne.n	8009c46 <axis_int_stop+0x42>
		{
			old_pos[1] = 0;
 8009c30:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <axis_int_stop+0x6c>)
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	605a      	str	r2, [r3, #4]
			b_flag_go = 2;
 8009c38:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <axis_int_stop+0x78>)
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	701a      	strb	r2, [r3, #0]
			flag_axis_b_busy=0;
 8009c3e:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <axis_int_stop+0x7c>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	e00c      	b.n	8009c60 <axis_int_stop+0x5c>
		}
		else if (axis == 2)
 8009c46:	79fb      	ldrb	r3, [r7, #7]
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d109      	bne.n	8009c60 <axis_int_stop+0x5c>
		{
			old_pos[2] = 0;
 8009c4c:	4b08      	ldr	r3, [pc, #32]	; (8009c70 <axis_int_stop+0x6c>)
 8009c4e:	f04f 0200 	mov.w	r2, #0
 8009c52:	609a      	str	r2, [r3, #8]
			c_flag_go = 2;
 8009c54:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <axis_int_stop+0x80>)
 8009c56:	2202      	movs	r2, #2
 8009c58:	701a      	strb	r2, [r3, #0]
			flag_axis_c_busy=0;
 8009c5a:	4b0b      	ldr	r3, [pc, #44]	; (8009c88 <axis_int_stop+0x84>)
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
		}
}
 8009c60:	bf00      	nop
 8009c62:	4618      	mov	r0, r3
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	240002c8 	.word	0x240002c8
 8009c74:	24000348 	.word	0x24000348
 8009c78:	2400034b 	.word	0x2400034b
 8009c7c:	24000349 	.word	0x24000349
 8009c80:	2400034c 	.word	0x2400034c
 8009c84:	2400034a 	.word	0x2400034a
 8009c88:	2400034d 	.word	0x2400034d

08009c8c <prepair_moove_carr>:




uint8_t prepair_moove_carr(float pos_mm, float time,  uint8_t axis, float *need_time)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	ed87 0a03 	vstr	s0, [r7, #12]
 8009c96:	edc7 0a02 	vstr	s1, [r7, #8]
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	6039      	str	r1, [r7, #0]
 8009c9e:	71fb      	strb	r3, [r7, #7]
	*need_time = 0;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	601a      	str	r2, [r3, #0]
	pos_steps[axis] = pos_mm*k_axis[axis];
 8009ca8:	79fb      	ldrb	r3, [r7, #7]
 8009caa:	4a30      	ldr	r2, [pc, #192]	; (8009d6c <prepair_moove_carr+0xe0>)
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	ed93 7a00 	vldr	s14, [r3]
 8009cb4:	79fb      	ldrb	r3, [r7, #7]
 8009cb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8009cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cbe:	4a2c      	ldr	r2, [pc, #176]	; (8009d70 <prepair_moove_carr+0xe4>)
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	edc3 7a00 	vstr	s15, [r3]

	float steps = pos_steps[axis] - old_pos[axis];
 8009cc8:	79fb      	ldrb	r3, [r7, #7]
 8009cca:	4a29      	ldr	r2, [pc, #164]	; (8009d70 <prepair_moove_carr+0xe4>)
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	ed93 7a00 	vldr	s14, [r3]
 8009cd4:	79fb      	ldrb	r3, [r7, #7]
 8009cd6:	4a27      	ldr	r2, [pc, #156]	; (8009d74 <prepair_moove_carr+0xe8>)
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	edd3 7a00 	vldr	s15, [r3]
 8009ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ce4:	edc7 7a05 	vstr	s15, [r7, #20]
	if (old_pos[axis] == pos_steps[axis])
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	4a22      	ldr	r2, [pc, #136]	; (8009d74 <prepair_moove_carr+0xe8>)
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	ed93 7a00 	vldr	s14, [r3]
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	4a1e      	ldr	r2, [pc, #120]	; (8009d70 <prepair_moove_carr+0xe4>)
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	edd3 7a00 	vldr	s15, [r3]
 8009d00:	eeb4 7a67 	vcmp.f32	s14, s15
 8009d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d08:	d101      	bne.n	8009d0e <prepair_moove_carr+0x82>
		return 0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e029      	b.n	8009d62 <prepair_moove_carr+0xd6>

	return calc_impulses(time, steps, accel[axis]*k_axis[axis], accel[axis]*k_axis[axis], axis, need_time);
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	4a19      	ldr	r2, [pc, #100]	; (8009d78 <prepair_moove_carr+0xec>)
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	4413      	add	r3, r2
 8009d16:	ed93 7a00 	vldr	s14, [r3]
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	4a13      	ldr	r2, [pc, #76]	; (8009d6c <prepair_moove_carr+0xe0>)
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	edd3 7a00 	vldr	s15, [r3]
 8009d26:	ee67 6a27 	vmul.f32	s13, s14, s15
 8009d2a:	79fb      	ldrb	r3, [r7, #7]
 8009d2c:	4a12      	ldr	r2, [pc, #72]	; (8009d78 <prepair_moove_carr+0xec>)
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4413      	add	r3, r2
 8009d32:	ed93 7a00 	vldr	s14, [r3]
 8009d36:	79fb      	ldrb	r3, [r7, #7]
 8009d38:	4a0c      	ldr	r2, [pc, #48]	; (8009d6c <prepair_moove_carr+0xe0>)
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	edd3 7a00 	vldr	s15, [r3]
 8009d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d46:	79fb      	ldrb	r3, [r7, #7]
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	eef0 1a67 	vmov.f32	s3, s15
 8009d50:	eeb0 1a66 	vmov.f32	s2, s13
 8009d54:	edd7 0a05 	vldr	s1, [r7, #20]
 8009d58:	ed97 0a02 	vldr	s0, [r7, #8]
 8009d5c:	f7ff f842 	bl	8008de4 <calc_impulses>
 8009d60:	4603      	mov	r3, r0

}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3718      	adds	r7, #24
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	24000044 	.word	0x24000044
 8009d70:	240002d4 	.word	0x240002d4
 8009d74:	240002c8 	.word	0x240002c8
 8009d78:	24000050 	.word	0x24000050

08009d7c <action_moove_carr>:

void action_moove_carr(uint8_t axis)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	71fb      	strb	r3, [r7, #7]
	old_pos[axis]=pos_steps[axis];
 8009d86:	79fa      	ldrb	r2, [r7, #7]
 8009d88:	79fb      	ldrb	r3, [r7, #7]
 8009d8a:	4911      	ldr	r1, [pc, #68]	; (8009dd0 <action_moove_carr+0x54>)
 8009d8c:	0092      	lsls	r2, r2, #2
 8009d8e:	440a      	add	r2, r1
 8009d90:	6812      	ldr	r2, [r2, #0]
 8009d92:	4910      	ldr	r1, [pc, #64]	; (8009dd4 <action_moove_carr+0x58>)
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	440b      	add	r3, r1
 8009d98:	601a      	str	r2, [r3, #0]

		if (axis == 0)
 8009d9a:	79fb      	ldrb	r3, [r7, #7]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d103      	bne.n	8009da8 <action_moove_carr+0x2c>
		{
			a_flag_go = 1;
 8009da0:	4b0d      	ldr	r3, [pc, #52]	; (8009dd8 <action_moove_carr+0x5c>)
 8009da2:	2201      	movs	r2, #1
 8009da4:	701a      	strb	r2, [r3, #0]
		else if (axis == 2)
		{
			c_flag_go = 1;
		}

}
 8009da6:	e00c      	b.n	8009dc2 <action_moove_carr+0x46>
		else if (axis == 1)
 8009da8:	79fb      	ldrb	r3, [r7, #7]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d103      	bne.n	8009db6 <action_moove_carr+0x3a>
			b_flag_go = 1;
 8009dae:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <action_moove_carr+0x60>)
 8009db0:	2201      	movs	r2, #1
 8009db2:	701a      	strb	r2, [r3, #0]
}
 8009db4:	e005      	b.n	8009dc2 <action_moove_carr+0x46>
		else if (axis == 2)
 8009db6:	79fb      	ldrb	r3, [r7, #7]
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d102      	bne.n	8009dc2 <action_moove_carr+0x46>
			c_flag_go = 1;
 8009dbc:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <action_moove_carr+0x64>)
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	701a      	strb	r2, [r3, #0]
}
 8009dc2:	bf00      	nop
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	240002d4 	.word	0x240002d4
 8009dd4:	240002c8 	.word	0x240002c8
 8009dd8:	24000348 	.word	0x24000348
 8009ddc:	24000349 	.word	0x24000349
 8009de0:	2400034a 	.word	0x2400034a
 8009de4:	00000000 	.word	0x00000000

08009de8 <short_move>:


uint8_t short_move (float a, float b, float c)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	ed87 0a03 	vstr	s0, [r7, #12]
 8009df2:	edc7 0a02 	vstr	s1, [r7, #8]
 8009df6:	ed87 1a01 	vstr	s2, [r7, #4]
	   float need_time_raw = 0;
 8009dfa:	f04f 0300 	mov.w	r3, #0
 8009dfe:	61fb      	str	r3, [r7, #28]
		 float need_time = 0;
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
		int steps[3] = {a,b,c};
 8009e06:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e0e:	ee17 3a90 	vmov	r3, s15
 8009e12:	613b      	str	r3, [r7, #16]
 8009e14:	edd7 7a02 	vldr	s15, [r7, #8]
 8009e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e1c:	ee17 3a90 	vmov	r3, s15
 8009e20:	617b      	str	r3, [r7, #20]
 8009e22:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009e2a:	ee17 3a90 	vmov	r3, s15
 8009e2e:	61bb      	str	r3, [r7, #24]

		if (a<-softlimit_max || a>softlimit_min) return 0; // проверяем, не выходит ли команда за допустимые значения
 8009e30:	4b63      	ldr	r3, [pc, #396]	; (8009fc0 <short_move+0x1d8>)
 8009e32:	edd3 7a00 	vldr	s15, [r3]
 8009e36:	eef1 7a67 	vneg.f32	s15, s15
 8009e3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e46:	d409      	bmi.n	8009e5c <short_move+0x74>
 8009e48:	4b5e      	ldr	r3, [pc, #376]	; (8009fc4 <short_move+0x1dc>)
 8009e4a:	edd3 7a00 	vldr	s15, [r3]
 8009e4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e5a:	dd01      	ble.n	8009e60 <short_move+0x78>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	e0a4      	b.n	8009faa <short_move+0x1c2>
		if (b<-softlimit_max || b>softlimit_min) return 0;
 8009e60:	4b57      	ldr	r3, [pc, #348]	; (8009fc0 <short_move+0x1d8>)
 8009e62:	edd3 7a00 	vldr	s15, [r3]
 8009e66:	eef1 7a67 	vneg.f32	s15, s15
 8009e6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8009e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e76:	d409      	bmi.n	8009e8c <short_move+0xa4>
 8009e78:	4b52      	ldr	r3, [pc, #328]	; (8009fc4 <short_move+0x1dc>)
 8009e7a:	edd3 7a00 	vldr	s15, [r3]
 8009e7e:	ed97 7a02 	vldr	s14, [r7, #8]
 8009e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e8a:	dd01      	ble.n	8009e90 <short_move+0xa8>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e08c      	b.n	8009faa <short_move+0x1c2>
		if (c<-softlimit_max || c>softlimit_min) return 0;
 8009e90:	4b4b      	ldr	r3, [pc, #300]	; (8009fc0 <short_move+0x1d8>)
 8009e92:	edd3 7a00 	vldr	s15, [r3]
 8009e96:	eef1 7a67 	vneg.f32	s15, s15
 8009e9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ea6:	d409      	bmi.n	8009ebc <short_move+0xd4>
 8009ea8:	4b46      	ldr	r3, [pc, #280]	; (8009fc4 <short_move+0x1dc>)
 8009eaa:	edd3 7a00 	vldr	s15, [r3]
 8009eae:	ed97 7a01 	vldr	s14, [r7, #4]
 8009eb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eba:	dd01      	ble.n	8009ec0 <short_move+0xd8>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	e074      	b.n	8009faa <short_move+0x1c2>

		for (uint8_t i=0; i<3;i++)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ec6:	e034      	b.n	8009f32 <short_move+0x14a>
	{
			if (prepair_moove_carr(steps[i], need_time,i, &need_time_raw)!=1)
 8009ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009ed2:	4413      	add	r3, r2
 8009ed4:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009ed8:	ee07 3a90 	vmov	s15, r3
 8009edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ee0:	f107 021c 	add.w	r2, r7, #28
 8009ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ee8:	4611      	mov	r1, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8009ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ef4:	f7ff feca 	bl	8009c8c <prepair_moove_carr>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d014      	beq.n	8009f28 <short_move+0x140>
			{

				if (need_time<need_time_raw) need_time = need_time_raw+0.001;
 8009efe:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f02:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8009f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f0e:	d50b      	bpl.n	8009f28 <short_move+0x140>
 8009f10:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8009f18:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8009fb8 <short_move+0x1d0>
 8009f1c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009f20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009f24:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		for (uint8_t i=0; i<3;i++)
 8009f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d9c6      	bls.n	8009ec8 <short_move+0xe0>
			}
	}

			for (uint8_t i=0; i<3;i++)
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009f40:	e01c      	b.n	8009f7c <short_move+0x194>
		{
				  if (prepair_moove_carr(steps[i], need_time, i, &need_time_raw)==1)
 8009f42:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f5a:	f107 021c 	add.w	r2, r7, #28
 8009f5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
 8009f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f6e:	f7ff fe8d 	bl	8009c8c <prepair_moove_carr>
			for (uint8_t i=0; i<3;i++)
 8009f72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009f76:	3301      	adds	r3, #1
 8009f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009f7c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d9de      	bls.n	8009f42 <short_move+0x15a>
				{

				}
		}

			for (uint8_t i=0; i<3;i++)
 8009f84:	2300      	movs	r3, #0
 8009f86:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8009f8a:	e009      	b.n	8009fa0 <short_move+0x1b8>
			{
					action_moove_carr(i);
 8009f8c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7ff fef3 	bl	8009d7c <action_moove_carr>
			for (uint8_t i=0; i<3;i++)
 8009f96:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8009fa0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d9f1      	bls.n	8009f8c <short_move+0x1a4>
		/*while (flag_axis_a_busy==1 || flag_axis_b_busy==1 || flag_axis_c_busy==1)
	{
		HAL_Delay(1);
	}	*/

	return 1;
 8009fa8:	2301      	movs	r3, #1
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3728      	adds	r7, #40	; 0x28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	f3af 8000 	nop.w
 8009fb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8009fbc:	3f50624d 	.word	0x3f50624d
 8009fc0:	2400003c 	.word	0x2400003c
 8009fc4:	24000040 	.word	0x24000040

08009fc8 <add_object>:
extern char serial_string[150];
extern uint8_t flasg_send_str;


void add_object(float x, float y) //функция добавления массива
{
 8009fc8:	b5b0      	push	{r4, r5, r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	ed87 0a01 	vstr	s0, [r7, #4]
 8009fd2:	edc7 0a00 	vstr	s1, [r7]
	static int num_objs = 0;
	if (y>max_y || y<min_y)
 8009fd6:	4b51      	ldr	r3, [pc, #324]	; (800a11c <add_object+0x154>)
 8009fd8:	edd3 7a00 	vldr	s15, [r3]
 8009fdc:	ed97 7a00 	vldr	s14, [r7]
 8009fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe8:	dc09      	bgt.n	8009ffe <add_object+0x36>
 8009fea:	4b4d      	ldr	r3, [pc, #308]	; (800a120 <add_object+0x158>)
 8009fec:	edd3 7a00 	vldr	s15, [r3]
 8009ff0:	ed97 7a00 	vldr	s14, [r7]
 8009ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ffc:	d513      	bpl.n	800a026 <add_object+0x5e>
	{
		sprintf(serial_string,"log: obj out_of_range %.2f,%.2f\r",x,y);
 8009ffe:	edd7 7a01 	vldr	s15, [r7, #4]
 800a002:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800a006:	edd7 7a00 	vldr	s15, [r7]
 800a00a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a00e:	ed8d 7b00 	vstr	d7, [sp]
 800a012:	ec53 2b16 	vmov	r2, r3, d6
 800a016:	4943      	ldr	r1, [pc, #268]	; (800a124 <add_object+0x15c>)
 800a018:	4843      	ldr	r0, [pc, #268]	; (800a128 <add_object+0x160>)
 800a01a:	f003 fc51 	bl	800d8c0 <siprintf>
		flasg_send_str = 1;
 800a01e:	4b43      	ldr	r3, [pc, #268]	; (800a12c <add_object+0x164>)
 800a020:	2201      	movs	r2, #1
 800a022:	701a      	strb	r2, [r3, #0]
		return;
 800a024:	e076      	b.n	800a114 <add_object+0x14c>
	}

	if (obj_en[num_objs]==0)
 800a026:	4b42      	ldr	r3, [pc, #264]	; (800a130 <add_object+0x168>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a42      	ldr	r2, [pc, #264]	; (800a134 <add_object+0x16c>)
 800a02c:	5cd3      	ldrb	r3, [r2, r3]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d160      	bne.n	800a0f4 <add_object+0x12c>
	{
	obj_x[num_objs] = y+zero_x_line;
 800a032:	4b41      	ldr	r3, [pc, #260]	; (800a138 <add_object+0x170>)
 800a034:	ed93 7a00 	vldr	s14, [r3]
 800a038:	4b3d      	ldr	r3, [pc, #244]	; (800a130 <add_object+0x168>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	edd7 7a00 	vldr	s15, [r7]
 800a040:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a044:	4a3d      	ldr	r2, [pc, #244]	; (800a13c <add_object+0x174>)
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	edc3 7a00 	vstr	s15, [r3]
	obj_y[num_objs] = x+detection_line;//ukazivaem polojenie zamechennogo objecta otnositelno koord delty
 800a04e:	4b3c      	ldr	r3, [pc, #240]	; (800a140 <add_object+0x178>)
 800a050:	ed93 7a00 	vldr	s14, [r3]
 800a054:	4b36      	ldr	r3, [pc, #216]	; (800a130 <add_object+0x168>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	edd7 7a01 	vldr	s15, [r7, #4]
 800a05c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a060:	4a38      	ldr	r2, [pc, #224]	; (800a144 <add_object+0x17c>)
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	edc3 7a00 	vstr	s15, [r3]


		//sprintf(string,"log: obj %.2f,%.2f\r",x,y);
//		printstrdma(string);

	uint8_t flag_en_obj = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < N_OBJ; i++) //проходим по всему массиву, что бы выяснить, есть ли активные цели (obj_en == 1)
 800a06e:	2300      	movs	r3, #0
 800a070:	60bb      	str	r3, [r7, #8]
 800a072:	e00a      	b.n	800a08a <add_object+0xc2>
	{
		if(obj_en[i]==1) flag_en_obj = 1; //если есть хоть один, то поменяем флаг
 800a074:	4a2f      	ldr	r2, [pc, #188]	; (800a134 <add_object+0x16c>)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	4413      	add	r3, r2
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d101      	bne.n	800a084 <add_object+0xbc>
 800a080:	2301      	movs	r3, #1
 800a082:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < N_OBJ; i++) //проходим по всему массиву, что бы выяснить, есть ли активные цели (obj_en == 1)
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	3301      	adds	r3, #1
 800a088:	60bb      	str	r3, [r7, #8]
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2b18      	cmp	r3, #24
 800a08e:	ddf1      	ble.n	800a074 <add_object+0xac>
	}
	if (flag_en_obj == 0) //если нет других активных объектов, переведем каретку в режим готовности
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d11c      	bne.n	800a0d0 <add_object+0x108>
	{
		 if (flag_auto == 1 && block_move == 0) domotion(obj_x[num_objs], capture_line, z_before_capture);	//..переведем карету
 800a096:	4b2c      	ldr	r3, [pc, #176]	; (800a148 <add_object+0x180>)
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d118      	bne.n	800a0d0 <add_object+0x108>
 800a09e:	4b2b      	ldr	r3, [pc, #172]	; (800a14c <add_object+0x184>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d114      	bne.n	800a0d0 <add_object+0x108>
 800a0a6:	4b22      	ldr	r3, [pc, #136]	; (800a130 <add_object+0x168>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a24      	ldr	r2, [pc, #144]	; (800a13c <add_object+0x174>)
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	edd3 7a00 	vldr	s15, [r3]
 800a0b4:	4b26      	ldr	r3, [pc, #152]	; (800a150 <add_object+0x188>)
 800a0b6:	ed93 7a00 	vldr	s14, [r3]
 800a0ba:	4b26      	ldr	r3, [pc, #152]	; (800a154 <add_object+0x18c>)
 800a0bc:	edd3 6a00 	vldr	s13, [r3]
 800a0c0:	eeb0 1a66 	vmov.f32	s2, s13
 800a0c4:	eef0 0a47 	vmov.f32	s1, s14
 800a0c8:	eeb0 0a67 	vmov.f32	s0, s15
 800a0cc:	f7ff fbd2 	bl	8009874 <domotion>
	printint(num_objs);
	printfloat(obj_y[num_objs]);
	printfloat(obj_x[num_objs]);

	printstr("======");*/
	obj_en[num_objs]=1; //peremennaya nalichiya objecta
 800a0d0:	4b17      	ldr	r3, [pc, #92]	; (800a130 <add_object+0x168>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a17      	ldr	r2, [pc, #92]	; (800a134 <add_object+0x16c>)
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	54d1      	strb	r1, [r2, r3]
	num_objs++;
 800a0da:	4b15      	ldr	r3, [pc, #84]	; (800a130 <add_object+0x168>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	4a13      	ldr	r2, [pc, #76]	; (800a130 <add_object+0x168>)
 800a0e2:	6013      	str	r3, [r2, #0]
	if (num_objs==N_OBJ)num_objs=0;
 800a0e4:	4b12      	ldr	r3, [pc, #72]	; (800a130 <add_object+0x168>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b19      	cmp	r3, #25
 800a0ea:	d113      	bne.n	800a114 <add_object+0x14c>
 800a0ec:	4b10      	ldr	r3, [pc, #64]	; (800a130 <add_object+0x168>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	e00f      	b.n	800a114 <add_object+0x14c>
  }
	else
	{
		sprintf(serial_string,"log: obj buffer overflowed\r");
 800a0f4:	4a0c      	ldr	r2, [pc, #48]	; (800a128 <add_object+0x160>)
 800a0f6:	4b18      	ldr	r3, [pc, #96]	; (800a158 <add_object+0x190>)
 800a0f8:	4615      	mov	r5, r2
 800a0fa:	461c      	mov	r4, r3
 800a0fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0fe:	6028      	str	r0, [r5, #0]
 800a100:	6069      	str	r1, [r5, #4]
 800a102:	60aa      	str	r2, [r5, #8]
 800a104:	60eb      	str	r3, [r5, #12]
 800a106:	cc07      	ldmia	r4!, {r0, r1, r2}
 800a108:	6128      	str	r0, [r5, #16]
 800a10a:	6169      	str	r1, [r5, #20]
 800a10c:	61aa      	str	r2, [r5, #24]
		flasg_send_str = 1;
 800a10e:	4b07      	ldr	r3, [pc, #28]	; (800a12c <add_object+0x164>)
 800a110:	2201      	movs	r2, #1
 800a112:	701a      	strb	r2, [r3, #0]
	}
}
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bdb0      	pop	{r4, r5, r7, pc}
 800a11a:	bf00      	nop
 800a11c:	2400006c 	.word	0x2400006c
 800a120:	24000070 	.word	0x24000070
 800a124:	08010a34 	.word	0x08010a34
 800a128:	24001e88 	.word	0x24001e88
 800a12c:	24001e84 	.word	0x24001e84
 800a130:	2400031c 	.word	0x2400031c
 800a134:	240002f4 	.word	0x240002f4
 800a138:	24000074 	.word	0x24000074
 800a13c:	24000a2c 	.word	0x24000a2c
 800a140:	24000060 	.word	0x24000060
 800a144:	240013f0 	.word	0x240013f0
 800a148:	24000314 	.word	0x24000314
 800a14c:	24000315 	.word	0x24000315
 800a150:	24000064 	.word	0x24000064
 800a154:	24000078 	.word	0x24000078
 800a158:	08010a58 	.word	0x08010a58

0800a15c <put_obj>:


	static int state_package = 0;

void put_obj()
{
 800a15c:	b590      	push	{r4, r7, lr}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
	static int local_i = 0;
	static int state = 0 ;
	if (flag_put_obj==-2)return;
 800a162:	4ba4      	ldr	r3, [pc, #656]	; (800a3f4 <put_obj+0x298>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f113 0f02 	cmn.w	r3, #2
 800a16a:	f000 8286 	beq.w	800a67a <put_obj+0x51e>

		if (state == 0)  // podhod zaxvata nad cel'y
 800a16e:	4ba2      	ldr	r3, [pc, #648]	; (800a3f8 <put_obj+0x29c>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d136      	bne.n	800a1e4 <put_obj+0x88>
	{
		 put_obj_busy = 1;
 800a176:	4ba1      	ldr	r3, [pc, #644]	; (800a3fc <put_obj+0x2a0>)
 800a178:	2201      	movs	r2, #1
 800a17a:	701a      	strb	r2, [r3, #0]
		 flag_safe_mode_motion = 1;
 800a17c:	4ba0      	ldr	r3, [pc, #640]	; (800a400 <put_obj+0x2a4>)
 800a17e:	2201      	movs	r2, #1
 800a180:	701a      	strb	r2, [r3, #0]

		if (flag_do_move == 0)
 800a182:	4ba0      	ldr	r3, [pc, #640]	; (800a404 <put_obj+0x2a8>)
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	f040 8278 	bne.w	800a67c <put_obj+0x520>
		{

		local_i = flag_put_obj;
 800a18c:	4b99      	ldr	r3, [pc, #612]	; (800a3f4 <put_obj+0x298>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a9d      	ldr	r2, [pc, #628]	; (800a408 <put_obj+0x2ac>)
 800a192:	6013      	str	r3, [r2, #0]

			set_acceleration(accel_captur);
 800a194:	4b9d      	ldr	r3, [pc, #628]	; (800a40c <put_obj+0x2b0>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4618      	mov	r0, r3
 800a19a:	f7ff fc2d 	bl	80099f8 <set_acceleration>
			domotion(obj_x[local_i], obj_y[local_i], z_before_capture);
 800a19e:	4b9a      	ldr	r3, [pc, #616]	; (800a408 <put_obj+0x2ac>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a9b      	ldr	r2, [pc, #620]	; (800a410 <put_obj+0x2b4>)
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	edd3 7a00 	vldr	s15, [r3]
 800a1ac:	4b96      	ldr	r3, [pc, #600]	; (800a408 <put_obj+0x2ac>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a98      	ldr	r2, [pc, #608]	; (800a414 <put_obj+0x2b8>)
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	ed93 7a00 	vldr	s14, [r3]
 800a1ba:	4b97      	ldr	r3, [pc, #604]	; (800a418 <put_obj+0x2bc>)
 800a1bc:	edd3 6a00 	vldr	s13, [r3]
 800a1c0:	eeb0 1a66 	vmov.f32	s2, s13
 800a1c4:	eef0 0a47 	vmov.f32	s1, s14
 800a1c8:	eeb0 0a67 	vmov.f32	s0, s15
 800a1cc:	f7ff fb52 	bl	8009874 <domotion>
      temp_i_obj = flag_put_obj;
 800a1d0:	4b88      	ldr	r3, [pc, #544]	; (800a3f4 <put_obj+0x298>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a91      	ldr	r2, [pc, #580]	; (800a41c <put_obj+0x2c0>)
 800a1d6:	6013      	str	r3, [r2, #0]

	  	state++;
 800a1d8:	4b87      	ldr	r3, [pc, #540]	; (800a3f8 <put_obj+0x29c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	4a86      	ldr	r2, [pc, #536]	; (800a3f8 <put_obj+0x29c>)
 800a1e0:	6013      	str	r3, [r2, #0]
 800a1e2:	e24b      	b.n	800a67c <put_obj+0x520>
  	}

	}
	else if (state == 1)	// zaxvat cely
 800a1e4:	4b84      	ldr	r3, [pc, #528]	; (800a3f8 <put_obj+0x29c>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d128      	bne.n	800a23e <put_obj+0xe2>
	{

		if (flag_do_move == 0)
 800a1ec:	4b85      	ldr	r3, [pc, #532]	; (800a404 <put_obj+0x2a8>)
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f040 8243 	bne.w	800a67c <put_obj+0x520>
		{
			block_move = 1;
 800a1f6:	4b8a      	ldr	r3, [pc, #552]	; (800a420 <put_obj+0x2c4>)
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	701a      	strb	r2, [r3, #0]
		vacuum_on();
 800a1fc:	f7ff fb60 	bl	80098c0 <vacuum_on>
		domotion(obj_x[local_i], obj_y[local_i], z_capture);
 800a200:	4b81      	ldr	r3, [pc, #516]	; (800a408 <put_obj+0x2ac>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a82      	ldr	r2, [pc, #520]	; (800a410 <put_obj+0x2b4>)
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	edd3 7a00 	vldr	s15, [r3]
 800a20e:	4b7e      	ldr	r3, [pc, #504]	; (800a408 <put_obj+0x2ac>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a80      	ldr	r2, [pc, #512]	; (800a414 <put_obj+0x2b8>)
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	ed93 7a00 	vldr	s14, [r3]
 800a21c:	4b81      	ldr	r3, [pc, #516]	; (800a424 <put_obj+0x2c8>)
 800a21e:	edd3 6a00 	vldr	s13, [r3]
 800a222:	eeb0 1a66 	vmov.f32	s2, s13
 800a226:	eef0 0a47 	vmov.f32	s1, s14
 800a22a:	eeb0 0a67 	vmov.f32	s0, s15
 800a22e:	f7ff fb21 	bl	8009874 <domotion>
	  state++;
 800a232:	4b71      	ldr	r3, [pc, #452]	; (800a3f8 <put_obj+0x29c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	3301      	adds	r3, #1
 800a238:	4a6f      	ldr	r2, [pc, #444]	; (800a3f8 <put_obj+0x29c>)
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	e21e      	b.n	800a67c <put_obj+0x520>

  	}

	}
	else if (state == 2) // podjem
 800a23e:	4b6e      	ldr	r3, [pc, #440]	; (800a3f8 <put_obj+0x29c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b02      	cmp	r3, #2
 800a244:	d128      	bne.n	800a298 <put_obj+0x13c>
	{
		if (flag_do_move == 0)
 800a246:	4b6f      	ldr	r3, [pc, #444]	; (800a404 <put_obj+0x2a8>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f040 8216 	bne.w	800a67c <put_obj+0x520>
		{
			domotion(obj_x[local_i], obj_y[local_i], z_past_capture);
 800a250:	4b6d      	ldr	r3, [pc, #436]	; (800a408 <put_obj+0x2ac>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a6e      	ldr	r2, [pc, #440]	; (800a410 <put_obj+0x2b4>)
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	edd3 7a00 	vldr	s15, [r3]
 800a25e:	4b6a      	ldr	r3, [pc, #424]	; (800a408 <put_obj+0x2ac>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a6c      	ldr	r2, [pc, #432]	; (800a414 <put_obj+0x2b8>)
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	4413      	add	r3, r2
 800a268:	ed93 7a00 	vldr	s14, [r3]
 800a26c:	4b6e      	ldr	r3, [pc, #440]	; (800a428 <put_obj+0x2cc>)
 800a26e:	edd3 6a00 	vldr	s13, [r3]
 800a272:	eeb0 1a66 	vmov.f32	s2, s13
 800a276:	eef0 0a47 	vmov.f32	s1, s14
 800a27a:	eeb0 0a67 	vmov.f32	s0, s15
 800a27e:	f7ff faf9 	bl	8009874 <domotion>
		  obj_en[temp_i_obj]=0;
 800a282:	4b66      	ldr	r3, [pc, #408]	; (800a41c <put_obj+0x2c0>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a69      	ldr	r2, [pc, #420]	; (800a42c <put_obj+0x2d0>)
 800a288:	2100      	movs	r1, #0
 800a28a:	54d1      	strb	r1, [r2, r3]
	  	state++;
 800a28c:	4b5a      	ldr	r3, [pc, #360]	; (800a3f8 <put_obj+0x29c>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3301      	adds	r3, #1
 800a292:	4a59      	ldr	r2, [pc, #356]	; (800a3f8 <put_obj+0x29c>)
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	e1f1      	b.n	800a67c <put_obj+0x520>
  	}

	}
	else if (state == 3)	// peremrshenie v предварительную точку разгрузки
 800a298:	4b57      	ldr	r3, [pc, #348]	; (800a3f8 <put_obj+0x29c>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	d105      	bne.n	800a2ac <put_obj+0x150>
	{

	//	if (flag_do_move == 0)
	//		{
		//			 domotion(obj_drop_x[0],obj_drop_y[0] , obj_drop_z[0]);
					 state++;
 800a2a0:	4b55      	ldr	r3, [pc, #340]	; (800a3f8 <put_obj+0x29c>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	4a54      	ldr	r2, [pc, #336]	; (800a3f8 <put_obj+0x29c>)
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	e1e7      	b.n	800a67c <put_obj+0x520>
		//	}
	}
		else if (state == 4)	// peremrshenie v tochky razgruzki
 800a2ac:	4b52      	ldr	r3, [pc, #328]	; (800a3f8 <put_obj+0x29c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2b04      	cmp	r3, #4
 800a2b2:	f040 8146 	bne.w	800a542 <put_obj+0x3e6>
	{

		if (flag_do_move == 0)
 800a2b6:	4b53      	ldr	r3, [pc, #332]	; (800a404 <put_obj+0x2a8>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f040 81de 	bne.w	800a67c <put_obj+0x520>
			{

					if(mode_motion[state_package] == 0) //перемещение и переход к сл. действию
 800a2c0:	4b5b      	ldr	r3, [pc, #364]	; (800a430 <put_obj+0x2d4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a5b      	ldr	r2, [pc, #364]	; (800a434 <put_obj+0x2d8>)
 800a2c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d127      	bne.n	800a31e <put_obj+0x1c2>
					{
					translate_step(state_package);
 800a2ce:	4b58      	ldr	r3, [pc, #352]	; (800a430 <put_obj+0x2d4>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f000 fb18 	bl	800a908 <translate_step>
					domotion(obj_drop_x[state_package],obj_drop_y[state_package] , obj_drop_z[state_package]);
 800a2d8:	4b55      	ldr	r3, [pc, #340]	; (800a430 <put_obj+0x2d4>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a56      	ldr	r2, [pc, #344]	; (800a438 <put_obj+0x2dc>)
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	edd3 7a00 	vldr	s15, [r3]
 800a2e6:	4b52      	ldr	r3, [pc, #328]	; (800a430 <put_obj+0x2d4>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a54      	ldr	r2, [pc, #336]	; (800a43c <put_obj+0x2e0>)
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	ed93 7a00 	vldr	s14, [r3]
 800a2f4:	4b4e      	ldr	r3, [pc, #312]	; (800a430 <put_obj+0x2d4>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a51      	ldr	r2, [pc, #324]	; (800a440 <put_obj+0x2e4>)
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	edd3 6a00 	vldr	s13, [r3]
 800a302:	eeb0 1a66 	vmov.f32	s2, s13
 800a306:	eef0 0a47 	vmov.f32	s1, s14
 800a30a:	eeb0 0a67 	vmov.f32	s0, s15
 800a30e:	f7ff fab1 	bl	8009874 <domotion>
					state_package++;
 800a312:	4b47      	ldr	r3, [pc, #284]	; (800a430 <put_obj+0x2d4>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	3301      	adds	r3, #1
 800a318:	4a45      	ldr	r2, [pc, #276]	; (800a430 <put_obj+0x2d4>)
 800a31a:	6013      	str	r3, [r2, #0]
 800a31c:	e1ae      	b.n	800a67c <put_obj+0x520>


					}
          else if(mode_motion[state_package] == 1) //Конец операции, переход к сл. стадии
 800a31e:	4b44      	ldr	r3, [pc, #272]	; (800a430 <put_obj+0x2d4>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a44      	ldr	r2, [pc, #272]	; (800a434 <put_obj+0x2d8>)
 800a324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d112      	bne.n	800a352 <put_obj+0x1f6>
					{

				//		domotion(obj_drop_x[state_package],obj_drop_y[state_package] , obj_drop_z[state_package]);
						translate_step(state_package);
 800a32c:	4b40      	ldr	r3, [pc, #256]	; (800a430 <put_obj+0x2d4>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4618      	mov	r0, r3
 800a332:	f000 fae9 	bl	800a908 <translate_step>
						state++;
 800a336:	4b30      	ldr	r3, [pc, #192]	; (800a3f8 <put_obj+0x29c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3301      	adds	r3, #1
 800a33c:	4a2e      	ldr	r2, [pc, #184]	; (800a3f8 <put_obj+0x29c>)
 800a33e:	6013      	str	r3, [r2, #0]
						block_move = 0;
 800a340:	4b37      	ldr	r3, [pc, #220]	; (800a420 <put_obj+0x2c4>)
 800a342:	2200      	movs	r2, #0
 800a344:	701a      	strb	r2, [r3, #0]
						state_package++;
 800a346:	4b3a      	ldr	r3, [pc, #232]	; (800a430 <put_obj+0x2d4>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3301      	adds	r3, #1
 800a34c:	4a38      	ldr	r2, [pc, #224]	; (800a430 <put_obj+0x2d4>)
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	e194      	b.n	800a67c <put_obj+0x520>

					}
					else if(mode_motion[state_package] == 2) //Конец цикла, переход к первой команде
 800a352:	4b37      	ldr	r3, [pc, #220]	; (800a430 <put_obj+0x2d4>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a37      	ldr	r2, [pc, #220]	; (800a434 <put_obj+0x2d8>)
 800a358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d110      	bne.n	800a382 <put_obj+0x226>
					{
					translate_step(state_package);
 800a360:	4b33      	ldr	r3, [pc, #204]	; (800a430 <put_obj+0x2d4>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4618      	mov	r0, r3
 800a366:	f000 facf 	bl	800a908 <translate_step>
       //     domotion(obj_drop_x[state_package],obj_drop_y[state_package] , obj_drop_z[state_package]);
						state_package=0;
 800a36a:	4b31      	ldr	r3, [pc, #196]	; (800a430 <put_obj+0x2d4>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
						state++;
 800a370:	4b21      	ldr	r3, [pc, #132]	; (800a3f8 <put_obj+0x29c>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3301      	adds	r3, #1
 800a376:	4a20      	ldr	r2, [pc, #128]	; (800a3f8 <put_obj+0x29c>)
 800a378:	6013      	str	r3, [r2, #0]
						block_move = 0;
 800a37a:	4b29      	ldr	r3, [pc, #164]	; (800a420 <put_obj+0x2c4>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	701a      	strb	r2, [r3, #0]
 800a380:	e17c      	b.n	800a67c <put_obj+0x520>
					}
					else if(mode_motion[state_package] == 10) //Изменить ускорение. Значение хранится в переменной X
 800a382:	4b2b      	ldr	r3, [pc, #172]	; (800a430 <put_obj+0x2d4>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a2b      	ldr	r2, [pc, #172]	; (800a434 <put_obj+0x2d8>)
 800a388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a38c:	2b0a      	cmp	r3, #10
 800a38e:	d117      	bne.n	800a3c0 <put_obj+0x264>
					{
					translate_step(state_package);
 800a390:	4b27      	ldr	r3, [pc, #156]	; (800a430 <put_obj+0x2d4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fab7 	bl	800a908 <translate_step>

						set_acceleration((int)obj_drop_x[state_package]);
 800a39a:	4b25      	ldr	r3, [pc, #148]	; (800a430 <put_obj+0x2d4>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a26      	ldr	r2, [pc, #152]	; (800a438 <put_obj+0x2dc>)
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	edd3 7a00 	vldr	s15, [r3]
 800a3a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a3ac:	ee17 0a90 	vmov	r0, s15
 800a3b0:	f7ff fb22 	bl	80099f8 <set_acceleration>
						state_package++;
 800a3b4:	4b1e      	ldr	r3, [pc, #120]	; (800a430 <put_obj+0x2d4>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	4a1d      	ldr	r2, [pc, #116]	; (800a430 <put_obj+0x2d4>)
 800a3bc:	6013      	str	r3, [r2, #0]
 800a3be:	e15d      	b.n	800a67c <put_obj+0x520>

					}
					else if(mode_motion[state_package] == 11) //Включить задержку.Зачение хранится в переменной X
 800a3c0:	4b1b      	ldr	r3, [pc, #108]	; (800a430 <put_obj+0x2d4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a1b      	ldr	r2, [pc, #108]	; (800a434 <put_obj+0x2d8>)
 800a3c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3ca:	2b0b      	cmp	r3, #11
 800a3cc:	d15c      	bne.n	800a488 <put_obj+0x32c>
					{

						static long timer;
						static uint8_t flag = 0;
						if (flag == 0)
 800a3ce:	4b1d      	ldr	r3, [pc, #116]	; (800a444 <put_obj+0x2e8>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d13a      	bne.n	800a44c <put_obj+0x2f0>
						{
							translate_step(state_package);
 800a3d6:	4b16      	ldr	r3, [pc, #88]	; (800a430 <put_obj+0x2d4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 fa94 	bl	800a908 <translate_step>
							timer = HAL_GetTick();
 800a3e0:	f7f6 f9d8 	bl	8000794 <HAL_GetTick>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	4b17      	ldr	r3, [pc, #92]	; (800a448 <put_obj+0x2ec>)
 800a3ea:	601a      	str	r2, [r3, #0]
							flag = 1;
 800a3ec:	4b15      	ldr	r3, [pc, #84]	; (800a444 <put_obj+0x2e8>)
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	701a      	strb	r2, [r3, #0]
 800a3f2:	e143      	b.n	800a67c <put_obj+0x520>
 800a3f4:	2400008c 	.word	0x2400008c
 800a3f8:	24000320 	.word	0x24000320
 800a3fc:	24000316 	.word	0x24000316
 800a400:	240002f1 	.word	0x240002f1
 800a404:	240002e0 	.word	0x240002e0
 800a408:	24000324 	.word	0x24000324
 800a40c:	24000090 	.word	0x24000090
 800a410:	24000a2c 	.word	0x24000a2c
 800a414:	240013f0 	.word	0x240013f0
 800a418:	24000078 	.word	0x24000078
 800a41c:	24001904 	.word	0x24001904
 800a420:	24000315 	.word	0x24000315
 800a424:	2400007c 	.word	0x2400007c
 800a428:	24000080 	.word	0x24000080
 800a42c:	240002f4 	.word	0x240002f4
 800a430:	24000318 	.word	0x24000318
 800a434:	24001454 	.word	0x24001454
 800a438:	24001908 	.word	0x24001908
 800a43c:	24000a90 	.word	0x24000a90
 800a440:	24000f40 	.word	0x24000f40
 800a444:	24000328 	.word	0x24000328
 800a448:	2400032c 	.word	0x2400032c
						}
						else
						{
							if (timer+(long)obj_drop_x[state_package]<HAL_GetTick())
 800a44c:	4b8d      	ldr	r3, [pc, #564]	; (800a684 <put_obj+0x528>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a8d      	ldr	r2, [pc, #564]	; (800a688 <put_obj+0x52c>)
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	4413      	add	r3, r2
 800a456:	edd3 7a00 	vldr	s15, [r3]
 800a45a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a45e:	ee17 2a90 	vmov	r2, s15
 800a462:	4b8a      	ldr	r3, [pc, #552]	; (800a68c <put_obj+0x530>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4413      	add	r3, r2
 800a468:	461c      	mov	r4, r3
 800a46a:	f7f6 f993 	bl	8000794 <HAL_GetTick>
 800a46e:	4603      	mov	r3, r0
 800a470:	429c      	cmp	r4, r3
 800a472:	f080 8103 	bcs.w	800a67c <put_obj+0x520>
							{
							flag = 0;
 800a476:	4b86      	ldr	r3, [pc, #536]	; (800a690 <put_obj+0x534>)
 800a478:	2200      	movs	r2, #0
 800a47a:	701a      	strb	r2, [r3, #0]
							state_package++;
 800a47c:	4b81      	ldr	r3, [pc, #516]	; (800a684 <put_obj+0x528>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3301      	adds	r3, #1
 800a482:	4a80      	ldr	r2, [pc, #512]	; (800a684 <put_obj+0x528>)
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	e0f9      	b.n	800a67c <put_obj+0x520>
							}
						}

					}
					else if(mode_motion[state_package] == 12) //Управление вакуумом
 800a488:	4b7e      	ldr	r3, [pc, #504]	; (800a684 <put_obj+0x528>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a81      	ldr	r2, [pc, #516]	; (800a694 <put_obj+0x538>)
 800a48e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a492:	2b0c      	cmp	r3, #12
 800a494:	f040 80f2 	bne.w	800a67c <put_obj+0x520>
					{

						if ((int)obj_drop_x[state_package]==1) vacuum_on();
 800a498:	4b7a      	ldr	r3, [pc, #488]	; (800a684 <put_obj+0x528>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a7a      	ldr	r2, [pc, #488]	; (800a688 <put_obj+0x52c>)
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	4413      	add	r3, r2
 800a4a2:	edd3 7a00 	vldr	s15, [r3]
 800a4a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4aa:	ee17 3a90 	vmov	r3, s15
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d102      	bne.n	800a4b8 <put_obj+0x35c>
 800a4b2:	f7ff fa05 	bl	80098c0 <vacuum_on>
 800a4b6:	e00e      	b.n	800a4d6 <put_obj+0x37a>
						else if ((int)obj_drop_x[state_package]==0) vacuum_off();
 800a4b8:	4b72      	ldr	r3, [pc, #456]	; (800a684 <put_obj+0x528>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a72      	ldr	r2, [pc, #456]	; (800a688 <put_obj+0x52c>)
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	4413      	add	r3, r2
 800a4c2:	edd3 7a00 	vldr	s15, [r3]
 800a4c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4ca:	ee17 3a90 	vmov	r3, s15
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d101      	bne.n	800a4d6 <put_obj+0x37a>
 800a4d2:	f7ff fa07 	bl	80098e4 <vacuum_off>

						static long timer;
						static uint8_t flag = 0;
						if (flag == 0)
 800a4d6:	4b70      	ldr	r3, [pc, #448]	; (800a698 <put_obj+0x53c>)
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10e      	bne.n	800a4fc <put_obj+0x3a0>
						{
							translate_step(state_package);
 800a4de:	4b69      	ldr	r3, [pc, #420]	; (800a684 <put_obj+0x528>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fa10 	bl	800a908 <translate_step>
							timer = HAL_GetTick();
 800a4e8:	f7f6 f954 	bl	8000794 <HAL_GetTick>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	4b6a      	ldr	r3, [pc, #424]	; (800a69c <put_obj+0x540>)
 800a4f2:	601a      	str	r2, [r3, #0]
							flag = 1;
 800a4f4:	4b68      	ldr	r3, [pc, #416]	; (800a698 <put_obj+0x53c>)
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	701a      	strb	r2, [r3, #0]
 800a4fa:	e0bf      	b.n	800a67c <put_obj+0x520>
						}
						else
						{
							if (timer+(long)obj_drop_y[state_package]<HAL_GetTick())
 800a4fc:	4b61      	ldr	r3, [pc, #388]	; (800a684 <put_obj+0x528>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a67      	ldr	r2, [pc, #412]	; (800a6a0 <put_obj+0x544>)
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	edd3 7a00 	vldr	s15, [r3]
 800a50a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a50e:	ee17 2a90 	vmov	r2, s15
 800a512:	4b62      	ldr	r3, [pc, #392]	; (800a69c <put_obj+0x540>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4413      	add	r3, r2
 800a518:	461c      	mov	r4, r3
 800a51a:	f7f6 f93b 	bl	8000794 <HAL_GetTick>
 800a51e:	4603      	mov	r3, r0
 800a520:	429c      	cmp	r4, r3
 800a522:	f080 80ab 	bcs.w	800a67c <put_obj+0x520>
							{
					  	translate_step(state_package);
 800a526:	4b57      	ldr	r3, [pc, #348]	; (800a684 <put_obj+0x528>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 f9ec 	bl	800a908 <translate_step>
							flag = 0;
 800a530:	4b59      	ldr	r3, [pc, #356]	; (800a698 <put_obj+0x53c>)
 800a532:	2200      	movs	r2, #0
 800a534:	701a      	strb	r2, [r3, #0]
							state_package++;
 800a536:	4b53      	ldr	r3, [pc, #332]	; (800a684 <put_obj+0x528>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	3301      	adds	r3, #1
 800a53c:	4a51      	ldr	r2, [pc, #324]	; (800a684 <put_obj+0x528>)
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	e09c      	b.n	800a67c <put_obj+0x520>
						}

					}
			}
	}
	else if (state == 5)	// peremrshenie v tochku zahvata sled cely
 800a542:	4b58      	ldr	r3, [pc, #352]	; (800a6a4 <put_obj+0x548>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b05      	cmp	r3, #5
 800a548:	d175      	bne.n	800a636 <put_obj+0x4da>
	{
		if (flag_do_move == 0)
 800a54a:	4b57      	ldr	r3, [pc, #348]	; (800a6a8 <put_obj+0x54c>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f040 8094 	bne.w	800a67c <put_obj+0x520>
			{

				//vacuum_off();
				//HAL_Delay(100);
		float x,y;
				if (obj_y[i_curr_obj]>detection_line && obj_y[i_curr_obj]<capture_line && obj_en[i_curr_obj]==1) //если объект в очереди, но еще не доступен для захвата
 800a554:	4b55      	ldr	r3, [pc, #340]	; (800a6ac <put_obj+0x550>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a55      	ldr	r2, [pc, #340]	; (800a6b0 <put_obj+0x554>)
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	ed93 7a00 	vldr	s14, [r3]
 800a562:	4b54      	ldr	r3, [pc, #336]	; (800a6b4 <put_obj+0x558>)
 800a564:	edd3 7a00 	vldr	s15, [r3]
 800a568:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a570:	dd1f      	ble.n	800a5b2 <put_obj+0x456>
 800a572:	4b4e      	ldr	r3, [pc, #312]	; (800a6ac <put_obj+0x550>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a4e      	ldr	r2, [pc, #312]	; (800a6b0 <put_obj+0x554>)
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	ed93 7a00 	vldr	s14, [r3]
 800a580:	4b4d      	ldr	r3, [pc, #308]	; (800a6b8 <put_obj+0x55c>)
 800a582:	edd3 7a00 	vldr	s15, [r3]
 800a586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58e:	d510      	bpl.n	800a5b2 <put_obj+0x456>
 800a590:	4b46      	ldr	r3, [pc, #280]	; (800a6ac <put_obj+0x550>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a49      	ldr	r2, [pc, #292]	; (800a6bc <put_obj+0x560>)
 800a596:	5cd3      	ldrb	r3, [r2, r3]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d10a      	bne.n	800a5b2 <put_obj+0x456>
		{
			y = capture_line; //подводим устройство к линии захвата
 800a59c:	4b46      	ldr	r3, [pc, #280]	; (800a6b8 <put_obj+0x55c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	603b      	str	r3, [r7, #0]
			x = obj_x[i_curr_obj];
 800a5a2:	4b42      	ldr	r3, [pc, #264]	; (800a6ac <put_obj+0x550>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a46      	ldr	r2, [pc, #280]	; (800a6c0 <put_obj+0x564>)
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	607b      	str	r3, [r7, #4]
 800a5b0:	e030      	b.n	800a614 <put_obj+0x4b8>
		}
    else if (obj_y[i_curr_obj]>detection_line && obj_en[i_curr_obj]==1) //если объект в зоне захвата
 800a5b2:	4b3e      	ldr	r3, [pc, #248]	; (800a6ac <put_obj+0x550>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a3e      	ldr	r2, [pc, #248]	; (800a6b0 <put_obj+0x554>)
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	4413      	add	r3, r2
 800a5bc:	ed93 7a00 	vldr	s14, [r3]
 800a5c0:	4b3c      	ldr	r3, [pc, #240]	; (800a6b4 <put_obj+0x558>)
 800a5c2:	edd3 7a00 	vldr	s15, [r3]
 800a5c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5ce:	dd1b      	ble.n	800a608 <put_obj+0x4ac>
 800a5d0:	4b36      	ldr	r3, [pc, #216]	; (800a6ac <put_obj+0x550>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a39      	ldr	r2, [pc, #228]	; (800a6bc <put_obj+0x560>)
 800a5d6:	5cd3      	ldrb	r3, [r2, r3]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d115      	bne.n	800a608 <put_obj+0x4ac>
		{
			y = obj_y[i_curr_obj]+add_y_dist; //подводим непосредственно к объекту и вычитаем добавку
 800a5dc:	4b33      	ldr	r3, [pc, #204]	; (800a6ac <put_obj+0x550>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a33      	ldr	r2, [pc, #204]	; (800a6b0 <put_obj+0x554>)
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	ed93 7a00 	vldr	s14, [r3]
 800a5ea:	4b36      	ldr	r3, [pc, #216]	; (800a6c4 <put_obj+0x568>)
 800a5ec:	edd3 7a00 	vldr	s15, [r3]
 800a5f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5f4:	edc7 7a00 	vstr	s15, [r7]
			x = obj_x[i_curr_obj];
 800a5f8:	4b2c      	ldr	r3, [pc, #176]	; (800a6ac <put_obj+0x550>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a30      	ldr	r2, [pc, #192]	; (800a6c0 <put_obj+0x564>)
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	607b      	str	r3, [r7, #4]
 800a606:	e005      	b.n	800a614 <put_obj+0x4b8>
		}
  		else
		{
		y = capture_line;//в остальных случаях просто оставляем над лентой
 800a608:	4b2b      	ldr	r3, [pc, #172]	; (800a6b8 <put_obj+0x55c>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	603b      	str	r3, [r7, #0]
		x = zero_x_line;
 800a60e:	4b2e      	ldr	r3, [pc, #184]	; (800a6c8 <put_obj+0x56c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	607b      	str	r3, [r7, #4]
	/*	printstr("x: ");
		printfloat(obj_x[i_curr_obj]);
		printstr("y: ");
		printfloat(y);
		printstr("=======");*/
		domotion(x, y, z_before_capture);
 800a614:	4b2d      	ldr	r3, [pc, #180]	; (800a6cc <put_obj+0x570>)
 800a616:	edd3 7a00 	vldr	s15, [r3]
 800a61a:	eeb0 1a67 	vmov.f32	s2, s15
 800a61e:	edd7 0a00 	vldr	s1, [r7]
 800a622:	ed97 0a01 	vldr	s0, [r7, #4]
 800a626:	f7ff f925 	bl	8009874 <domotion>
		state++;
 800a62a:	4b1e      	ldr	r3, [pc, #120]	; (800a6a4 <put_obj+0x548>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	3301      	adds	r3, #1
 800a630:	4a1c      	ldr	r2, [pc, #112]	; (800a6a4 <put_obj+0x548>)
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	e022      	b.n	800a67c <put_obj+0x520>
  	}
	}

		else if (state == 6)
 800a636:	4b1b      	ldr	r3, [pc, #108]	; (800a6a4 <put_obj+0x548>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b06      	cmp	r3, #6
 800a63c:	d11e      	bne.n	800a67c <put_obj+0x520>
	{
		if (flag_do_move == 0)
 800a63e:	4b1a      	ldr	r3, [pc, #104]	; (800a6a8 <put_obj+0x54c>)
 800a640:	781b      	ldrb	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d11a      	bne.n	800a67c <put_obj+0x520>
			{
			state = 0;
 800a646:	4b17      	ldr	r3, [pc, #92]	; (800a6a4 <put_obj+0x548>)
 800a648:	2200      	movs	r2, #0
 800a64a:	601a      	str	r2, [r3, #0]
			put_obj_busy = 0;
 800a64c:	4b20      	ldr	r3, [pc, #128]	; (800a6d0 <put_obj+0x574>)
 800a64e:	2200      	movs	r2, #0
 800a650:	701a      	strb	r2, [r3, #0]
	  	flag_put_obj=-2;
 800a652:	4b20      	ldr	r3, [pc, #128]	; (800a6d4 <put_obj+0x578>)
 800a654:	f06f 0201 	mvn.w	r2, #1
 800a658:	601a      	str	r2, [r3, #0]
			obj_counter++ ;
 800a65a:	4b1f      	ldr	r3, [pc, #124]	; (800a6d8 <put_obj+0x57c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	3301      	adds	r3, #1
 800a660:	4a1d      	ldr	r2, [pc, #116]	; (800a6d8 <put_obj+0x57c>)
 800a662:	6013      	str	r3, [r2, #0]
			sprintf(serial_string,"obj_count: %d\r",obj_counter);
 800a664:	4b1c      	ldr	r3, [pc, #112]	; (800a6d8 <put_obj+0x57c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	461a      	mov	r2, r3
 800a66a:	491c      	ldr	r1, [pc, #112]	; (800a6dc <put_obj+0x580>)
 800a66c:	481c      	ldr	r0, [pc, #112]	; (800a6e0 <put_obj+0x584>)
 800a66e:	f003 f927 	bl	800d8c0 <siprintf>
		  flasg_send_str = 1;
 800a672:	4b1c      	ldr	r3, [pc, #112]	; (800a6e4 <put_obj+0x588>)
 800a674:	2201      	movs	r2, #1
 800a676:	701a      	strb	r2, [r3, #0]
 800a678:	e000      	b.n	800a67c <put_obj+0x520>
	if (flag_put_obj==-2)return;
 800a67a:	bf00      	nop
			}
	}
}
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd90      	pop	{r4, r7, pc}
 800a682:	bf00      	nop
 800a684:	24000318 	.word	0x24000318
 800a688:	24001908 	.word	0x24001908
 800a68c:	2400032c 	.word	0x2400032c
 800a690:	24000328 	.word	0x24000328
 800a694:	24001454 	.word	0x24001454
 800a698:	24000330 	.word	0x24000330
 800a69c:	24000334 	.word	0x24000334
 800a6a0:	24000a90 	.word	0x24000a90
 800a6a4:	24000320 	.word	0x24000320
 800a6a8:	240002e0 	.word	0x240002e0
 800a6ac:	24000088 	.word	0x24000088
 800a6b0:	240013f0 	.word	0x240013f0
 800a6b4:	24000060 	.word	0x24000060
 800a6b8:	24000064 	.word	0x24000064
 800a6bc:	240002f4 	.word	0x240002f4
 800a6c0:	24000a2c 	.word	0x24000a2c
 800a6c4:	24000068 	.word	0x24000068
 800a6c8:	24000074 	.word	0x24000074
 800a6cc:	24000078 	.word	0x24000078
 800a6d0:	24000316 	.word	0x24000316
 800a6d4:	2400008c 	.word	0x2400008c
 800a6d8:	24000310 	.word	0x24000310
 800a6dc:	08010a88 	.word	0x08010a88
 800a6e0:	24001e88 	.word	0x24001e88
 800a6e4:	24001e84 	.word	0x24001e84

0800a6e8 <do_demo>:

void do_demo(int state_package)
{
 800a6e8:	b590      	push	{r4, r7, lr}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
	        printfloat(obj_drop_x[state_package]);
 800a6f0:	4a7b      	ldr	r2, [pc, #492]	; (800a8e0 <do_demo+0x1f8>)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	edd3 7a00 	vldr	s15, [r3]
 800a6fc:	eeb0 0a67 	vmov.f32	s0, s15
 800a700:	f002 fed4 	bl	800d4ac <printfloat>
					printfloat(obj_drop_y[state_package]);
 800a704:	4a77      	ldr	r2, [pc, #476]	; (800a8e4 <do_demo+0x1fc>)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	edd3 7a00 	vldr	s15, [r3]
 800a710:	eeb0 0a67 	vmov.f32	s0, s15
 800a714:	f002 feca 	bl	800d4ac <printfloat>
					printfloat(obj_drop_z[state_package]);
 800a718:	4a73      	ldr	r2, [pc, #460]	; (800a8e8 <do_demo+0x200>)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	edd3 7a00 	vldr	s15, [r3]
 800a724:	eeb0 0a67 	vmov.f32	s0, s15
 800a728:	f002 fec0 	bl	800d4ac <printfloat>
					printint(mode_motion[state_package]);
 800a72c:	4a6f      	ldr	r2, [pc, #444]	; (800a8ec <do_demo+0x204>)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a734:	4618      	mov	r0, r3
 800a736:	f002 fe55 	bl	800d3e4 <printint>
					printstr("-----------");
 800a73a:	486d      	ldr	r0, [pc, #436]	; (800a8f0 <do_demo+0x208>)
 800a73c:	f002 fe7e 	bl	800d43c <printstr>

	if (flag_do_move == 0)
 800a740:	4b6c      	ldr	r3, [pc, #432]	; (800a8f4 <do_demo+0x20c>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	2b00      	cmp	r3, #0
 800a746:	f040 80c6 	bne.w	800a8d6 <do_demo+0x1ee>
			{

					if(mode_motion[state_package] == 0) //перемещение и переход к сл. действию
 800a74a:	4a68      	ldr	r2, [pc, #416]	; (800a8ec <do_demo+0x204>)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d11d      	bne.n	800a792 <do_demo+0xaa>
					{
					translate_step(state_package);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f8d6 	bl	800a908 <translate_step>
					domotion(obj_drop_x[state_package],obj_drop_y[state_package] , obj_drop_z[state_package]);
 800a75c:	4a60      	ldr	r2, [pc, #384]	; (800a8e0 <do_demo+0x1f8>)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	4413      	add	r3, r2
 800a764:	edd3 7a00 	vldr	s15, [r3]
 800a768:	4a5e      	ldr	r2, [pc, #376]	; (800a8e4 <do_demo+0x1fc>)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	ed93 7a00 	vldr	s14, [r3]
 800a774:	4a5c      	ldr	r2, [pc, #368]	; (800a8e8 <do_demo+0x200>)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	4413      	add	r3, r2
 800a77c:	edd3 6a00 	vldr	s13, [r3]
 800a780:	eeb0 1a66 	vmov.f32	s2, s13
 800a784:	eef0 0a47 	vmov.f32	s1, s14
 800a788:	eeb0 0a67 	vmov.f32	s0, s15
 800a78c:	f7ff f872 	bl	8009874 <domotion>
							}
						}

					}
			}
}
 800a790:	e0a1      	b.n	800a8d6 <do_demo+0x1ee>
          else if(mode_motion[state_package] == 1) //Конец операции, переход к сл. стадии
 800a792:	4a56      	ldr	r2, [pc, #344]	; (800a8ec <do_demo+0x204>)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d103      	bne.n	800a7a6 <do_demo+0xbe>
						translate_step(state_package);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f8b2 	bl	800a908 <translate_step>
}
 800a7a4:	e097      	b.n	800a8d6 <do_demo+0x1ee>
					else if(mode_motion[state_package] == 2) //Конец цикла, переход к первой команде
 800a7a6:	4a51      	ldr	r2, [pc, #324]	; (800a8ec <do_demo+0x204>)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d103      	bne.n	800a7ba <do_demo+0xd2>
						translate_step(state_package);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f8a8 	bl	800a908 <translate_step>
}
 800a7b8:	e08d      	b.n	800a8d6 <do_demo+0x1ee>
					else if(mode_motion[state_package] == 10) //Изменить ускорение. Значение хранится в переменной X
 800a7ba:	4a4c      	ldr	r2, [pc, #304]	; (800a8ec <do_demo+0x204>)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7c2:	2b0a      	cmp	r3, #10
 800a7c4:	d10f      	bne.n	800a7e6 <do_demo+0xfe>
						translate_step(state_package);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f89e 	bl	800a908 <translate_step>
						set_acceleration((int)obj_drop_x[state_package]);
 800a7cc:	4a44      	ldr	r2, [pc, #272]	; (800a8e0 <do_demo+0x1f8>)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	4413      	add	r3, r2
 800a7d4:	edd3 7a00 	vldr	s15, [r3]
 800a7d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7dc:	ee17 0a90 	vmov	r0, s15
 800a7e0:	f7ff f90a 	bl	80099f8 <set_acceleration>
}
 800a7e4:	e077      	b.n	800a8d6 <do_demo+0x1ee>
					else if(mode_motion[state_package] == 11) //Включить задержку.Зачение хранится в переменной X
 800a7e6:	4a41      	ldr	r2, [pc, #260]	; (800a8ec <do_demo+0x204>)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ee:	2b0b      	cmp	r3, #11
 800a7f0:	d127      	bne.n	800a842 <do_demo+0x15a>
						translate_step(state_package);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f888 	bl	800a908 <translate_step>
						if (flag == 0)
 800a7f8:	4b3f      	ldr	r3, [pc, #252]	; (800a8f8 <do_demo+0x210>)
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d109      	bne.n	800a814 <do_demo+0x12c>
							timer = HAL_GetTick();
 800a800:	f7f5 ffc8 	bl	8000794 <HAL_GetTick>
 800a804:	4603      	mov	r3, r0
 800a806:	461a      	mov	r2, r3
 800a808:	4b3c      	ldr	r3, [pc, #240]	; (800a8fc <do_demo+0x214>)
 800a80a:	601a      	str	r2, [r3, #0]
							flag = 1;
 800a80c:	4b3a      	ldr	r3, [pc, #232]	; (800a8f8 <do_demo+0x210>)
 800a80e:	2201      	movs	r2, #1
 800a810:	701a      	strb	r2, [r3, #0]
}
 800a812:	e060      	b.n	800a8d6 <do_demo+0x1ee>
							if (timer+(long)obj_drop_x[state_package]<HAL_GetTick())
 800a814:	4a32      	ldr	r2, [pc, #200]	; (800a8e0 <do_demo+0x1f8>)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	edd3 7a00 	vldr	s15, [r3]
 800a820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a824:	ee17 2a90 	vmov	r2, s15
 800a828:	4b34      	ldr	r3, [pc, #208]	; (800a8fc <do_demo+0x214>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4413      	add	r3, r2
 800a82e:	461c      	mov	r4, r3
 800a830:	f7f5 ffb0 	bl	8000794 <HAL_GetTick>
 800a834:	4603      	mov	r3, r0
 800a836:	429c      	cmp	r4, r3
 800a838:	d24d      	bcs.n	800a8d6 <do_demo+0x1ee>
							flag = 0;
 800a83a:	4b2f      	ldr	r3, [pc, #188]	; (800a8f8 <do_demo+0x210>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	701a      	strb	r2, [r3, #0]
}
 800a840:	e049      	b.n	800a8d6 <do_demo+0x1ee>
					else if(mode_motion[state_package] == 12) //Управление вакуумом
 800a842:	4a2a      	ldr	r2, [pc, #168]	; (800a8ec <do_demo+0x204>)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a84a:	2b0c      	cmp	r3, #12
 800a84c:	d143      	bne.n	800a8d6 <do_demo+0x1ee>
						translate_step(state_package);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f85a 	bl	800a908 <translate_step>
						if ((int)obj_drop_x[state_package]==1) vacuum_on();
 800a854:	4a22      	ldr	r2, [pc, #136]	; (800a8e0 <do_demo+0x1f8>)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	4413      	add	r3, r2
 800a85c:	edd3 7a00 	vldr	s15, [r3]
 800a860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a864:	ee17 3a90 	vmov	r3, s15
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d102      	bne.n	800a872 <do_demo+0x18a>
 800a86c:	f7ff f828 	bl	80098c0 <vacuum_on>
 800a870:	e00d      	b.n	800a88e <do_demo+0x1a6>
						else if ((int)obj_drop_x[state_package]==0) vacuum_off();
 800a872:	4a1b      	ldr	r2, [pc, #108]	; (800a8e0 <do_demo+0x1f8>)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	edd3 7a00 	vldr	s15, [r3]
 800a87e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a882:	ee17 3a90 	vmov	r3, s15
 800a886:	2b00      	cmp	r3, #0
 800a888:	d101      	bne.n	800a88e <do_demo+0x1a6>
 800a88a:	f7ff f82b 	bl	80098e4 <vacuum_off>
						if (flag == 0)
 800a88e:	4b1c      	ldr	r3, [pc, #112]	; (800a900 <do_demo+0x218>)
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d109      	bne.n	800a8aa <do_demo+0x1c2>
							timer = HAL_GetTick();
 800a896:	f7f5 ff7d 	bl	8000794 <HAL_GetTick>
 800a89a:	4603      	mov	r3, r0
 800a89c:	461a      	mov	r2, r3
 800a89e:	4b19      	ldr	r3, [pc, #100]	; (800a904 <do_demo+0x21c>)
 800a8a0:	601a      	str	r2, [r3, #0]
							flag = 1;
 800a8a2:	4b17      	ldr	r3, [pc, #92]	; (800a900 <do_demo+0x218>)
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	701a      	strb	r2, [r3, #0]
}
 800a8a8:	e015      	b.n	800a8d6 <do_demo+0x1ee>
							if (timer+(long)obj_drop_y[state_package]<HAL_GetTick())
 800a8aa:	4a0e      	ldr	r2, [pc, #56]	; (800a8e4 <do_demo+0x1fc>)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	edd3 7a00 	vldr	s15, [r3]
 800a8b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8ba:	ee17 2a90 	vmov	r2, s15
 800a8be:	4b11      	ldr	r3, [pc, #68]	; (800a904 <do_demo+0x21c>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	461c      	mov	r4, r3
 800a8c6:	f7f5 ff65 	bl	8000794 <HAL_GetTick>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	429c      	cmp	r4, r3
 800a8ce:	d202      	bcs.n	800a8d6 <do_demo+0x1ee>
							flag = 0;
 800a8d0:	4b0b      	ldr	r3, [pc, #44]	; (800a900 <do_demo+0x218>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	701a      	strb	r2, [r3, #0]
}
 800a8d6:	bf00      	nop
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd90      	pop	{r4, r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	24001908 	.word	0x24001908
 800a8e4:	24000a90 	.word	0x24000a90
 800a8e8:	24000f40 	.word	0x24000f40
 800a8ec:	24001454 	.word	0x24001454
 800a8f0:	08010a98 	.word	0x08010a98
 800a8f4:	240002e0 	.word	0x240002e0
 800a8f8:	24000338 	.word	0x24000338
 800a8fc:	2400033c 	.word	0x2400033c
 800a900:	24000340 	.word	0x24000340
 800a904:	24000344 	.word	0x24000344

0800a908 <translate_step>:


void translate_step(int n)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]

	sprintf(serial_string,"cstp: %d\r",n);
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	4905      	ldr	r1, [pc, #20]	; (800a928 <translate_step+0x20>)
 800a914:	4805      	ldr	r0, [pc, #20]	; (800a92c <translate_step+0x24>)
 800a916:	f002 ffd3 	bl	800d8c0 <siprintf>
	flasg_send_str = 1;
 800a91a:	4b05      	ldr	r3, [pc, #20]	; (800a930 <translate_step+0x28>)
 800a91c:	2201      	movs	r2, #1
 800a91e:	701a      	strb	r2, [r3, #0]
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	08010aa4 	.word	0x08010aa4
 800a92c:	24001e88 	.word	0x24001e88
 800a930:	24001e84 	.word	0x24001e84

0800a934 <reset_seq_steps>:

void reset_seq_steps()
{
 800a934:	b480      	push	{r7}
 800a936:	af00      	add	r7, sp, #0
	state_package = 0;
 800a938:	4b03      	ldr	r3, [pc, #12]	; (800a948 <reset_seq_steps+0x14>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
}
 800a93e:	bf00      	nop
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	24000318 	.word	0x24000318

0800a94c <timers_ini>:
int8_t flag_axis_c_busy=0;



void timers_ini()
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0

	int timer_frec = 2*counter_period;
 800a952:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <timers_ini+0x34>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	607b      	str	r3, [r7, #4]
	prescaller = SYS_CLOCK/timer_frec;
 800a95a:	4a0a      	ldr	r2, [pc, #40]	; (800a984 <timers_ini+0x38>)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a962:	4a09      	ldr	r2, [pc, #36]	; (800a988 <timers_ini+0x3c>)
 800a964:	6013      	str	r3, [r2, #0]
    htim6.Init.Prescaler = prescaller-1;
 800a966:	4b08      	ldr	r3, [pc, #32]	; (800a988 <timers_ini+0x3c>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	461a      	mov	r2, r3
 800a96e:	4b07      	ldr	r3, [pc, #28]	; (800a98c <timers_ini+0x40>)
 800a970:	605a      	str	r2, [r3, #4]
	//htim7.Init.Prescaler = prescaller-1;

	 HAL_TIM_Base_Init(&htim6);
 800a972:	4806      	ldr	r0, [pc, #24]	; (800a98c <timers_ini+0x40>)
 800a974:	f7f9 fc20 	bl	80041b8 <HAL_TIM_Base_Init>

	/* if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
  {
    _//Error_Handler(__FILE__, __LINE__);
  }*/
}
 800a978:	bf00      	nop
 800a97a:	3708      	adds	r7, #8
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	24000094 	.word	0x24000094
 800a984:	0e4e1c00 	.word	0x0e4e1c00
 800a988:	24001e3c 	.word	0x24001e3c
 800a98c:	240008b8 	.word	0x240008b8

0800a990 <axis_a_motion_ini>:
	float accel,
	float brake,
	float  time_to_start_brake,
	float	motion_time,
	uint8_t direction)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b088      	sub	sp, #32
 800a994:	af00      	add	r7, sp, #0
 800a996:	61f8      	str	r0, [r7, #28]
 800a998:	ed87 0a06 	vstr	s0, [r7, #24]
 800a99c:	edc7 0a05 	vstr	s1, [r7, #20]
 800a9a0:	ed87 1a04 	vstr	s2, [r7, #16]
 800a9a4:	edc7 1a03 	vstr	s3, [r7, #12]
 800a9a8:	ed87 2a02 	vstr	s4, [r7, #8]
 800a9ac:	edc7 2a01 	vstr	s5, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	70fb      	strb	r3, [r7, #3]
	a.motion_time = motion_time;
 800a9b4:	4a2e      	ldr	r2, [pc, #184]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	61d3      	str	r3, [r2, #28]
	a.max_speed = max_speed;
 800a9ba:	4a2d      	ldr	r2, [pc, #180]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	6113      	str	r3, [r2, #16]
	a.min_speed = min_speed;
 800a9c0:	4a2b      	ldr	r2, [pc, #172]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	6153      	str	r3, [r2, #20]
	a.accel = accel;
 800a9c6:	4a2a      	ldr	r2, [pc, #168]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	6093      	str	r3, [r2, #8]
	a.brake = brake;
 800a9cc:	4a28      	ldr	r2, [pc, #160]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	60d3      	str	r3, [r2, #12]
	a.time_to_start_brake = time_to_start_brake;
 800a9d2:	4a27      	ldr	r2, [pc, #156]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	6193      	str	r3, [r2, #24]
	a.target_pulses = pulses;
 800a9d8:	4a25      	ldr	r2, [pc, #148]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	62d3      	str	r3, [r2, #44]	; 0x2c
	a.dir = direction;
 800a9de:	4a24      	ldr	r2, [pc, #144]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9e0:	78fb      	ldrb	r3, [r7, #3]
 800a9e2:	f882 3020 	strb.w	r3, [r2, #32]

	a.speedadd=a.accel/counter_period;
 800a9e6:	4b22      	ldr	r3, [pc, #136]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9e8:	edd3 6a02 	vldr	s13, [r3, #8]
 800a9ec:	4b21      	ldr	r3, [pc, #132]	; (800aa74 <axis_a_motion_ini+0xe4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	ee07 3a90 	vmov	s15, r3
 800a9f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9fc:	4b1c      	ldr	r3, [pc, #112]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800a9fe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	a.speedsub=a.brake/counter_period;
 800aa02:	4b1b      	ldr	r3, [pc, #108]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800aa04:	edd3 6a03 	vldr	s13, [r3, #12]
 800aa08:	4b1a      	ldr	r3, [pc, #104]	; (800aa74 <axis_a_motion_ini+0xe4>)
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	ee07 3a90 	vmov	s15, r3
 800aa10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa18:	4b15      	ldr	r3, [pc, #84]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800aa1a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	a.ticks_to_start_brake=(counter_period*a.time_to_start_brake);
 800aa1e:	4b15      	ldr	r3, [pc, #84]	; (800aa74 <axis_a_motion_ini+0xe4>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	ee07 3a90 	vmov	s15, r3
 800aa26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa2a:	4b11      	ldr	r3, [pc, #68]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800aa2c:	edd3 7a06 	vldr	s15, [r3, #24]
 800aa30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aa38:	ee17 2a90 	vmov	r2, s15
 800aa3c:	4b0c      	ldr	r3, [pc, #48]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800aa3e:	625a      	str	r2, [r3, #36]	; 0x24
    a.pulls_to_start_brake = time_to_start_brake;
 800aa40:	edd7 7a02 	vldr	s15, [r7, #8]
 800aa44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa48:	ee17 2a90 	vmov	r2, s15
 800aa4c:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800aa4e:	629a      	str	r2, [r3, #40]	; 0x28
	a.flag_accel=1;
 800aa50:	4b07      	ldr	r3, [pc, #28]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800aa52:	2201      	movs	r2, #1
 800aa54:	705a      	strb	r2, [r3, #1]

	a.sys_tick_start = HAL_GetTick();
 800aa56:	f7f5 fe9d 	bl	8000794 <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <axis_a_motion_ini+0xe0>)
 800aa5e:	63da      	str	r2, [r3, #60]	; 0x3c


	flag_axis_a_busy = 1;
 800aa60:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <axis_a_motion_ini+0xe8>)
 800aa62:	2201      	movs	r2, #1
 800aa64:	701a      	strb	r2, [r3, #0]

}
 800aa66:	bf00      	nop
 800aa68:	3720      	adds	r7, #32
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	24001e44 	.word	0x24001e44
 800aa74:	24000094 	.word	0x24000094
 800aa78:	2400034b 	.word	0x2400034b

0800aa7c <axis_a_timer>:



void axis_a_timer()
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0

	static unsigned long ticks_motion=0;
	static  float tics=0;
	static  float compensator=0;
	static unsigned int pulses=0;
 if (a_flag_go==2)
 800aa82:	4bb0      	ldr	r3, [pc, #704]	; (800ad44 <axis_a_timer+0x2c8>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	d117      	bne.n	800aaba <axis_a_timer+0x3e>
 {
	 ticks_motion=0;
 800aa8a:	4baf      	ldr	r3, [pc, #700]	; (800ad48 <axis_a_timer+0x2cc>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	601a      	str	r2, [r3, #0]
	 tics=0;
 800aa90:	4bae      	ldr	r3, [pc, #696]	; (800ad4c <axis_a_timer+0x2d0>)
 800aa92:	f04f 0200 	mov.w	r2, #0
 800aa96:	601a      	str	r2, [r3, #0]
	 compensator=0;
 800aa98:	4bad      	ldr	r3, [pc, #692]	; (800ad50 <axis_a_timer+0x2d4>)
 800aa9a:	f04f 0200 	mov.w	r2, #0
 800aa9e:	601a      	str	r2, [r3, #0]
	 pulses=0;
 800aaa0:	4bac      	ldr	r3, [pc, #688]	; (800ad54 <axis_a_timer+0x2d8>)
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	601a      	str	r2, [r3, #0]
	 flag_axis_a_busy=0;
 800aaa6:	4bac      	ldr	r3, [pc, #688]	; (800ad58 <axis_a_timer+0x2dc>)
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	701a      	strb	r2, [r3, #0]
	 a.cur_speed=0;
 800aaac:	4bab      	ldr	r3, [pc, #684]	; (800ad5c <axis_a_timer+0x2e0>)
 800aaae:	f04f 0200 	mov.w	r2, #0
 800aab2:	605a      	str	r2, [r3, #4]
	 a_flag_go=0;
 800aab4:	4ba3      	ldr	r3, [pc, #652]	; (800ad44 <axis_a_timer+0x2c8>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	701a      	strb	r2, [r3, #0]
 }
 if (a_flag_go==0) return;
 800aaba:	4ba2      	ldr	r3, [pc, #648]	; (800ad44 <axis_a_timer+0x2c8>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 813a 	beq.w	800ad38 <axis_a_timer+0x2bc>

	  ticks_motion++;
 800aac4:	4ba0      	ldr	r3, [pc, #640]	; (800ad48 <axis_a_timer+0x2cc>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3301      	adds	r3, #1
 800aaca:	4a9f      	ldr	r2, [pc, #636]	; (800ad48 <axis_a_timer+0x2cc>)
 800aacc:	6013      	str	r3, [r2, #0]
		tics++;
 800aace:	4b9f      	ldr	r3, [pc, #636]	; (800ad4c <axis_a_timer+0x2d0>)
 800aad0:	edd3 7a00 	vldr	s15, [r3]
 800aad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aad8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aadc:	4b9b      	ldr	r3, [pc, #620]	; (800ad4c <axis_a_timer+0x2d0>)
 800aade:	edc3 7a00 	vstr	s15, [r3]

	if (a.flag_accel==1)a.cur_speed+=a.speedadd; 	// фаза ускорения
 800aae2:	4b9e      	ldr	r3, [pc, #632]	; (800ad5c <axis_a_timer+0x2e0>)
 800aae4:	785b      	ldrb	r3, [r3, #1]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d10a      	bne.n	800ab00 <axis_a_timer+0x84>
 800aaea:	4b9c      	ldr	r3, [pc, #624]	; (800ad5c <axis_a_timer+0x2e0>)
 800aaec:	ed93 7a01 	vldr	s14, [r3, #4]
 800aaf0:	4b9a      	ldr	r3, [pc, #616]	; (800ad5c <axis_a_timer+0x2e0>)
 800aaf2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800aaf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aafa:	4b98      	ldr	r3, [pc, #608]	; (800ad5c <axis_a_timer+0x2e0>)
 800aafc:	edc3 7a01 	vstr	s15, [r3, #4]
	if (a.cur_speed >=a.max_speed)// фаза равномерного движения
 800ab00:	4b96      	ldr	r3, [pc, #600]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab02:	ed93 7a01 	vldr	s14, [r3, #4]
 800ab06:	4b95      	ldr	r3, [pc, #596]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab08:	edd3 7a04 	vldr	s15, [r3, #16]
 800ab0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ab10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab14:	db02      	blt.n	800ab1c <axis_a_timer+0xa0>
		{
			a.flag_accel=0;
 800ab16:	4b91      	ldr	r3, [pc, #580]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	705a      	strb	r2, [r3, #1]
		}


	if (a.flag_accel==0 && a.flag_brake==1 /*&& ticks_motion>=a.ticks_to_start_brake*/) // фаза замедления
 800ab1c:	4b8f      	ldr	r3, [pc, #572]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab1e:	785b      	ldrb	r3, [r3, #1]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10e      	bne.n	800ab42 <axis_a_timer+0xc6>
 800ab24:	4b8d      	ldr	r3, [pc, #564]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab26:	789b      	ldrb	r3, [r3, #2]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d10a      	bne.n	800ab42 <axis_a_timer+0xc6>
	{

		a.cur_speed-=a.speedsub;
 800ab2c:	4b8b      	ldr	r3, [pc, #556]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab2e:	ed93 7a01 	vldr	s14, [r3, #4]
 800ab32:	4b8a      	ldr	r3, [pc, #552]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab34:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ab38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab3c:	4b87      	ldr	r3, [pc, #540]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab3e:	edc3 7a01 	vstr	s15, [r3, #4]


	}
	if (a.flag_last_pull==1) // фаза временнОго выравнивания последнего толчка
 800ab42:	4b86      	ldr	r3, [pc, #536]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab44:	78db      	ldrb	r3, [r3, #3]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d128      	bne.n	800ab9c <axis_a_timer+0x120>
	{
		a.flag_last_pull=0;
 800ab4a:	4b84      	ldr	r3, [pc, #528]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	70da      	strb	r2, [r3, #3]
		a.cur_speed=count_last_pulls/(((a.motion_time/*-0.009*/)*counter_period-ticks_motion)/counter_period);/*a.motion_time*/
 800ab50:	4b83      	ldr	r3, [pc, #524]	; (800ad60 <axis_a_timer+0x2e4>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	ee07 3a90 	vmov	s15, r3
 800ab58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ab5c:	4b7f      	ldr	r3, [pc, #508]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab5e:	ed93 7a07 	vldr	s14, [r3, #28]
 800ab62:	4b80      	ldr	r3, [pc, #512]	; (800ad64 <axis_a_timer+0x2e8>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab72:	4b75      	ldr	r3, [pc, #468]	; (800ad48 <axis_a_timer+0x2cc>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7e:	ee37 6a67 	vsub.f32	s12, s14, s15
 800ab82:	4b78      	ldr	r3, [pc, #480]	; (800ad64 <axis_a_timer+0x2e8>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ab8e:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800ab92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab96:	4b71      	ldr	r3, [pc, #452]	; (800ad5c <axis_a_timer+0x2e0>)
 800ab98:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	a.target_period=counter_period/a.cur_speed;
 800ab9c:	4b71      	ldr	r3, [pc, #452]	; (800ad64 <axis_a_timer+0x2e8>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	ee07 3a90 	vmov	s15, r3
 800aba4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800aba8:	4b6c      	ldr	r3, [pc, #432]	; (800ad5c <axis_a_timer+0x2e0>)
 800abaa:	ed93 7a01 	vldr	s14, [r3, #4]
 800abae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abb2:	4b6a      	ldr	r3, [pc, #424]	; (800ad5c <axis_a_timer+0x2e0>)
 800abb4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	//=====================
   a.target_period=a.target_period/2;
 800abb8:	4b68      	ldr	r3, [pc, #416]	; (800ad5c <axis_a_timer+0x2e0>)
 800abba:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800abbe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800abc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800abc6:	4b65      	ldr	r3, [pc, #404]	; (800ad5c <axis_a_timer+0x2e0>)
 800abc8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		/*if (debag_flag == 1)
		{
			debug_var_a=a.target_period;
		}
		*/
	if (tics<a.target_period) return;
 800abcc:	4b63      	ldr	r3, [pc, #396]	; (800ad5c <axis_a_timer+0x2e0>)
 800abce:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800abd2:	4b5e      	ldr	r3, [pc, #376]	; (800ad4c <axis_a_timer+0x2d0>)
 800abd4:	edd3 7a00 	vldr	s15, [r3]
 800abd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe0:	f300 80ac 	bgt.w	800ad3c <axis_a_timer+0x2c0>

	compensator += (tics - a.target_period);
 800abe4:	4b59      	ldr	r3, [pc, #356]	; (800ad4c <axis_a_timer+0x2d0>)
 800abe6:	ed93 7a00 	vldr	s14, [r3]
 800abea:	4b5c      	ldr	r3, [pc, #368]	; (800ad5c <axis_a_timer+0x2e0>)
 800abec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800abf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800abf4:	4b56      	ldr	r3, [pc, #344]	; (800ad50 <axis_a_timer+0x2d4>)
 800abf6:	edd3 7a00 	vldr	s15, [r3]
 800abfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abfe:	4b54      	ldr	r3, [pc, #336]	; (800ad50 <axis_a_timer+0x2d4>)
 800ac00:	edc3 7a00 	vstr	s15, [r3]
	tics=0;
 800ac04:	4b51      	ldr	r3, [pc, #324]	; (800ad4c <axis_a_timer+0x2d0>)
 800ac06:	f04f 0200 	mov.w	r2, #0
 800ac0a:	601a      	str	r2, [r3, #0]

	if (compensator>1.00)
 800ac0c:	4b50      	ldr	r3, [pc, #320]	; (800ad50 <axis_a_timer+0x2d4>)
 800ac0e:	edd3 7a00 	vldr	s15, [r3]
 800ac12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac16:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1e:	dd13      	ble.n	800ac48 <axis_a_timer+0x1cc>
	{
		compensator-=1.00;
 800ac20:	4b4b      	ldr	r3, [pc, #300]	; (800ad50 <axis_a_timer+0x2d4>)
 800ac22:	edd3 7a00 	vldr	s15, [r3]
 800ac26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac2e:	4b48      	ldr	r3, [pc, #288]	; (800ad50 <axis_a_timer+0x2d4>)
 800ac30:	edc3 7a00 	vstr	s15, [r3]
    	tics+=1.00;
 800ac34:	4b45      	ldr	r3, [pc, #276]	; (800ad4c <axis_a_timer+0x2d0>)
 800ac36:	edd3 7a00 	vldr	s15, [r3]
 800ac3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac42:	4b42      	ldr	r3, [pc, #264]	; (800ad4c <axis_a_timer+0x2d0>)
 800ac44:	edc3 7a00 	vstr	s15, [r3]
	}



	if (a.dir == 1) HAL_GPIO_WritePin(DIR_PORT_A, DIR_PIN_A, GPIO_PIN_RESET);
 800ac48:	4b44      	ldr	r3, [pc, #272]	; (800ad5c <axis_a_timer+0x2e0>)
 800ac4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d106      	bne.n	800ac60 <axis_a_timer+0x1e4>
 800ac52:	2200      	movs	r2, #0
 800ac54:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac58:	4843      	ldr	r0, [pc, #268]	; (800ad68 <axis_a_timer+0x2ec>)
 800ac5a:	f7f7 f82b 	bl	8001cb4 <HAL_GPIO_WritePin>
 800ac5e:	e00a      	b.n	800ac76 <axis_a_timer+0x1fa>
	else if (a.dir == 0) HAL_GPIO_WritePin(DIR_PORT_A, DIR_PIN_A, GPIO_PIN_SET);
 800ac60:	4b3e      	ldr	r3, [pc, #248]	; (800ad5c <axis_a_timer+0x2e0>)
 800ac62:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d105      	bne.n	800ac76 <axis_a_timer+0x1fa>
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac70:	483d      	ldr	r0, [pc, #244]	; (800ad68 <axis_a_timer+0x2ec>)
 800ac72:	f7f7 f81f 	bl	8001cb4 <HAL_GPIO_WritePin>

	static uint8_t pin_flag=0;
	long Total_time;

	if (pin_flag == 0)
 800ac76:	4b3d      	ldr	r3, [pc, #244]	; (800ad6c <axis_a_timer+0x2f0>)
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d133      	bne.n	800ace6 <axis_a_timer+0x26a>
	{
		HAL_GPIO_WritePin(STEP_PORT_A, STEP_PIN_A, GPIO_PIN_SET);
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ac84:	483a      	ldr	r0, [pc, #232]	; (800ad70 <axis_a_timer+0x2f4>)
 800ac86:	f7f7 f815 	bl	8001cb4 <HAL_GPIO_WritePin>
		pin_flag=1;
 800ac8a:	4b38      	ldr	r3, [pc, #224]	; (800ad6c <axis_a_timer+0x2f0>)
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	701a      	strb	r2, [r3, #0]
		pulses++;
 800ac90:	4b30      	ldr	r3, [pc, #192]	; (800ad54 <axis_a_timer+0x2d8>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	3301      	adds	r3, #1
 800ac96:	4a2f      	ldr	r2, [pc, #188]	; (800ad54 <axis_a_timer+0x2d8>)
 800ac98:	6013      	str	r3, [r2, #0]
		if (pulses == a.pulls_to_start_brake-1){a.flag_brake = 1;}
 800ac9a:	4b30      	ldr	r3, [pc, #192]	; (800ad5c <axis_a_timer+0x2e0>)
 800ac9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	461a      	mov	r2, r3
 800aca2:	4b2c      	ldr	r3, [pc, #176]	; (800ad54 <axis_a_timer+0x2d8>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d102      	bne.n	800acb0 <axis_a_timer+0x234>
 800acaa:	4b2c      	ldr	r3, [pc, #176]	; (800ad5c <axis_a_timer+0x2e0>)
 800acac:	2201      	movs	r2, #1
 800acae:	709a      	strb	r2, [r3, #2]
		if (pulses == a.target_pulses-count_last_pulls){a.flag_brake = 0;a.flag_last_pull = 1;}
 800acb0:	4b2a      	ldr	r3, [pc, #168]	; (800ad5c <axis_a_timer+0x2e0>)
 800acb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb4:	4b2a      	ldr	r3, [pc, #168]	; (800ad60 <axis_a_timer+0x2e4>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	4b25      	ldr	r3, [pc, #148]	; (800ad54 <axis_a_timer+0x2d8>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d105      	bne.n	800acd0 <axis_a_timer+0x254>
 800acc4:	4b25      	ldr	r3, [pc, #148]	; (800ad5c <axis_a_timer+0x2e0>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	709a      	strb	r2, [r3, #2]
 800acca:	4b24      	ldr	r3, [pc, #144]	; (800ad5c <axis_a_timer+0x2e0>)
 800accc:	2201      	movs	r2, #1
 800acce:	70da      	strb	r2, [r3, #3]
		if (pulses == a.target_pulses)
 800acd0:	4b22      	ldr	r3, [pc, #136]	; (800ad5c <axis_a_timer+0x2e0>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	461a      	mov	r2, r3
 800acd6:	4b1f      	ldr	r3, [pc, #124]	; (800ad54 <axis_a_timer+0x2d8>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d12f      	bne.n	800ad3e <axis_a_timer+0x2c2>
	{
		ticks_motion=0;
 800acde:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <axis_a_timer+0x2cc>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	e02b      	b.n	800ad3e <axis_a_timer+0x2c2>
	}

	}
	else
	{
		HAL_GPIO_WritePin(STEP_PORT_A, STEP_PIN_A, GPIO_PIN_RESET);
 800ace6:	2200      	movs	r2, #0
 800ace8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800acec:	4820      	ldr	r0, [pc, #128]	; (800ad70 <axis_a_timer+0x2f4>)
 800acee:	f7f6 ffe1 	bl	8001cb4 <HAL_GPIO_WritePin>
		pin_flag=0;
 800acf2:	4b1e      	ldr	r3, [pc, #120]	; (800ad6c <axis_a_timer+0x2f0>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	701a      	strb	r2, [r3, #0]


		if (pulses == a.target_pulses)
 800acf8:	4b18      	ldr	r3, [pc, #96]	; (800ad5c <axis_a_timer+0x2e0>)
 800acfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfc:	461a      	mov	r2, r3
 800acfe:	4b15      	ldr	r3, [pc, #84]	; (800ad54 <axis_a_timer+0x2d8>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d11b      	bne.n	800ad3e <axis_a_timer+0x2c2>
	{
			a_flag_go=0;
 800ad06:	4b0f      	ldr	r3, [pc, #60]	; (800ad44 <axis_a_timer+0x2c8>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	701a      	strb	r2, [r3, #0]
			pulses = 0;
 800ad0c:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <axis_a_timer+0x2d8>)
 800ad0e:	2200      	movs	r2, #0
 800ad10:	601a      	str	r2, [r3, #0]
			tics=0;
 800ad12:	4b0e      	ldr	r3, [pc, #56]	; (800ad4c <axis_a_timer+0x2d0>)
 800ad14:	f04f 0200 	mov.w	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
			flag_axis_a_busy=0;
 800ad1a:	4b0f      	ldr	r3, [pc, #60]	; (800ad58 <axis_a_timer+0x2dc>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	701a      	strb	r2, [r3, #0]
			a.cur_speed=0;
 800ad20:	4b0e      	ldr	r3, [pc, #56]	; (800ad5c <axis_a_timer+0x2e0>)
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	605a      	str	r2, [r3, #4]
			Total_time=HAL_GetTick()-a.sys_tick_start;
 800ad28:	f7f5 fd34 	bl	8000794 <HAL_GetTick>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	4b0b      	ldr	r3, [pc, #44]	; (800ad5c <axis_a_timer+0x2e0>)
 800ad30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	e002      	b.n	800ad3e <axis_a_timer+0x2c2>
 if (a_flag_go==0) return;
 800ad38:	bf00      	nop
 800ad3a:	e000      	b.n	800ad3e <axis_a_timer+0x2c2>
	if (tics<a.target_period) return;
 800ad3c:	bf00      	nop
	}

	}


}
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	24000348 	.word	0x24000348
 800ad48:	24000350 	.word	0x24000350
 800ad4c:	24000354 	.word	0x24000354
 800ad50:	24000358 	.word	0x24000358
 800ad54:	2400035c 	.word	0x2400035c
 800ad58:	2400034b 	.word	0x2400034b
 800ad5c:	24001e44 	.word	0x24001e44
 800ad60:	24000098 	.word	0x24000098
 800ad64:	24000094 	.word	0x24000094
 800ad68:	58021000 	.word	0x58021000
 800ad6c:	24000360 	.word	0x24000360
 800ad70:	58020400 	.word	0x58020400

0800ad74 <axis_b_motion_ini>:
	float accel,
  float brake,
	float  time_to_start_brake,
	float	motion_time,
	uint8_t direction)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	61f8      	str	r0, [r7, #28]
 800ad7c:	ed87 0a06 	vstr	s0, [r7, #24]
 800ad80:	edc7 0a05 	vstr	s1, [r7, #20]
 800ad84:	ed87 1a04 	vstr	s2, [r7, #16]
 800ad88:	edc7 1a03 	vstr	s3, [r7, #12]
 800ad8c:	ed87 2a02 	vstr	s4, [r7, #8]
 800ad90:	edc7 2a01 	vstr	s5, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
	b.motion_time = motion_time;
 800ad98:	4a2e      	ldr	r2, [pc, #184]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	61d3      	str	r3, [r2, #28]
	b.max_speed = max_speed;
 800ad9e:	4a2d      	ldr	r2, [pc, #180]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	6113      	str	r3, [r2, #16]
	b.min_speed = min_speed;
 800ada4:	4a2b      	ldr	r2, [pc, #172]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	6153      	str	r3, [r2, #20]
	b.accel = accel;
 800adaa:	4a2a      	ldr	r2, [pc, #168]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	6093      	str	r3, [r2, #8]
	b.brake = brake;
 800adb0:	4a28      	ldr	r2, [pc, #160]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	60d3      	str	r3, [r2, #12]
	b.time_to_start_brake = time_to_start_brake;
 800adb6:	4a27      	ldr	r2, [pc, #156]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	6193      	str	r3, [r2, #24]
	b.target_pulses = pulses;
 800adbc:	4a25      	ldr	r2, [pc, #148]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	62d3      	str	r3, [r2, #44]	; 0x2c
	b.dir = direction;
 800adc2:	4a24      	ldr	r2, [pc, #144]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800adc4:	78fb      	ldrb	r3, [r7, #3]
 800adc6:	f882 3020 	strb.w	r3, [r2, #32]

	b.speedadd=b.accel/counter_period;
 800adca:	4b22      	ldr	r3, [pc, #136]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800adcc:	edd3 6a02 	vldr	s13, [r3, #8]
 800add0:	4b21      	ldr	r3, [pc, #132]	; (800ae58 <axis_b_motion_ini+0xe4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	ee07 3a90 	vmov	s15, r3
 800add8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800addc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ade0:	4b1c      	ldr	r3, [pc, #112]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ade2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	b.speedsub=b.brake/counter_period;
 800ade6:	4b1b      	ldr	r3, [pc, #108]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ade8:	edd3 6a03 	vldr	s13, [r3, #12]
 800adec:	4b1a      	ldr	r3, [pc, #104]	; (800ae58 <axis_b_motion_ini+0xe4>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	ee07 3a90 	vmov	s15, r3
 800adf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800adf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adfc:	4b15      	ldr	r3, [pc, #84]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800adfe:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	b.ticks_to_start_brake=(counter_period*b.time_to_start_brake);
 800ae02:	4b15      	ldr	r3, [pc, #84]	; (800ae58 <axis_b_motion_ini+0xe4>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ae0e:	4b11      	ldr	r3, [pc, #68]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ae10:	edd3 7a06 	vldr	s15, [r3, #24]
 800ae14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae1c:	ee17 2a90 	vmov	r2, s15
 800ae20:	4b0c      	ldr	r3, [pc, #48]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ae22:	625a      	str	r2, [r3, #36]	; 0x24
  b.pulls_to_start_brake = time_to_start_brake;
 800ae24:	edd7 7a02 	vldr	s15, [r7, #8]
 800ae28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae2c:	ee17 2a90 	vmov	r2, s15
 800ae30:	4b08      	ldr	r3, [pc, #32]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ae32:	629a      	str	r2, [r3, #40]	; 0x28
	b.flag_accel=1;
 800ae34:	4b07      	ldr	r3, [pc, #28]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ae36:	2201      	movs	r2, #1
 800ae38:	705a      	strb	r2, [r3, #1]

	b.sys_tick_start = HAL_GetTick();
 800ae3a:	f7f5 fcab 	bl	8000794 <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	4b04      	ldr	r3, [pc, #16]	; (800ae54 <axis_b_motion_ini+0xe0>)
 800ae42:	63da      	str	r2, [r3, #60]	; 0x3c
	flag_axis_b_busy = 1;
 800ae44:	4b05      	ldr	r3, [pc, #20]	; (800ae5c <axis_b_motion_ini+0xe8>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]

}
 800ae4a:	bf00      	nop
 800ae4c:	3720      	adds	r7, #32
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	24001db8 	.word	0x24001db8
 800ae58:	24000094 	.word	0x24000094
 800ae5c:	2400034c 	.word	0x2400034c

0800ae60 <axis_b_timer>:



void axis_b_timer()
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
	static unsigned long ticks_motion=0;
	static  float tics=0;
	static  float compensator=0;
	static unsigned int pulses=0;

	 if (b_flag_go==2)
 800ae66:	4baf      	ldr	r3, [pc, #700]	; (800b124 <axis_b_timer+0x2c4>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d117      	bne.n	800ae9e <axis_b_timer+0x3e>
 {
	 ticks_motion=0;
 800ae6e:	4bae      	ldr	r3, [pc, #696]	; (800b128 <axis_b_timer+0x2c8>)
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
	 tics=0;
 800ae74:	4bad      	ldr	r3, [pc, #692]	; (800b12c <axis_b_timer+0x2cc>)
 800ae76:	f04f 0200 	mov.w	r2, #0
 800ae7a:	601a      	str	r2, [r3, #0]
	 compensator=0;
 800ae7c:	4bac      	ldr	r3, [pc, #688]	; (800b130 <axis_b_timer+0x2d0>)
 800ae7e:	f04f 0200 	mov.w	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]
	 pulses=0;
 800ae84:	4bab      	ldr	r3, [pc, #684]	; (800b134 <axis_b_timer+0x2d4>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	601a      	str	r2, [r3, #0]
	 flag_axis_b_busy=0;
 800ae8a:	4bab      	ldr	r3, [pc, #684]	; (800b138 <axis_b_timer+0x2d8>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	701a      	strb	r2, [r3, #0]
	 b.cur_speed=0;
 800ae90:	4baa      	ldr	r3, [pc, #680]	; (800b13c <axis_b_timer+0x2dc>)
 800ae92:	f04f 0200 	mov.w	r2, #0
 800ae96:	605a      	str	r2, [r3, #4]
	 b_flag_go=0;
 800ae98:	4ba2      	ldr	r3, [pc, #648]	; (800b124 <axis_b_timer+0x2c4>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	701a      	strb	r2, [r3, #0]
 }

	if (b_flag_go==0) return;
 800ae9e:	4ba1      	ldr	r3, [pc, #644]	; (800b124 <axis_b_timer+0x2c4>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8138 	beq.w	800b118 <axis_b_timer+0x2b8>
	//=====================

	  ticks_motion++;
 800aea8:	4b9f      	ldr	r3, [pc, #636]	; (800b128 <axis_b_timer+0x2c8>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3301      	adds	r3, #1
 800aeae:	4a9e      	ldr	r2, [pc, #632]	; (800b128 <axis_b_timer+0x2c8>)
 800aeb0:	6013      	str	r3, [r2, #0]
		tics++;
 800aeb2:	4b9e      	ldr	r3, [pc, #632]	; (800b12c <axis_b_timer+0x2cc>)
 800aeb4:	edd3 7a00 	vldr	s15, [r3]
 800aeb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aec0:	4b9a      	ldr	r3, [pc, #616]	; (800b12c <axis_b_timer+0x2cc>)
 800aec2:	edc3 7a00 	vstr	s15, [r3]

	if (b.flag_accel==1)b.cur_speed+=b.speedadd; 	// фаза ускорения
 800aec6:	4b9d      	ldr	r3, [pc, #628]	; (800b13c <axis_b_timer+0x2dc>)
 800aec8:	785b      	ldrb	r3, [r3, #1]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d10a      	bne.n	800aee4 <axis_b_timer+0x84>
 800aece:	4b9b      	ldr	r3, [pc, #620]	; (800b13c <axis_b_timer+0x2dc>)
 800aed0:	ed93 7a01 	vldr	s14, [r3, #4]
 800aed4:	4b99      	ldr	r3, [pc, #612]	; (800b13c <axis_b_timer+0x2dc>)
 800aed6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800aeda:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aede:	4b97      	ldr	r3, [pc, #604]	; (800b13c <axis_b_timer+0x2dc>)
 800aee0:	edc3 7a01 	vstr	s15, [r3, #4]
	if (b.cur_speed >=b.max_speed)// фаза равномерного движения
 800aee4:	4b95      	ldr	r3, [pc, #596]	; (800b13c <axis_b_timer+0x2dc>)
 800aee6:	ed93 7a01 	vldr	s14, [r3, #4]
 800aeea:	4b94      	ldr	r3, [pc, #592]	; (800b13c <axis_b_timer+0x2dc>)
 800aeec:	edd3 7a04 	vldr	s15, [r3, #16]
 800aef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aef8:	db02      	blt.n	800af00 <axis_b_timer+0xa0>
		{
			b.flag_accel=0;
 800aefa:	4b90      	ldr	r3, [pc, #576]	; (800b13c <axis_b_timer+0x2dc>)
 800aefc:	2200      	movs	r2, #0
 800aefe:	705a      	strb	r2, [r3, #1]
		}


	if (b.flag_accel==0 && b.flag_brake==1 /*&& ticks_motion>=a.ticks_to_start_brake*/) // фаза замедления
 800af00:	4b8e      	ldr	r3, [pc, #568]	; (800b13c <axis_b_timer+0x2dc>)
 800af02:	785b      	ldrb	r3, [r3, #1]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10e      	bne.n	800af26 <axis_b_timer+0xc6>
 800af08:	4b8c      	ldr	r3, [pc, #560]	; (800b13c <axis_b_timer+0x2dc>)
 800af0a:	789b      	ldrb	r3, [r3, #2]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d10a      	bne.n	800af26 <axis_b_timer+0xc6>
	{

		b.cur_speed-=b.speedsub;
 800af10:	4b8a      	ldr	r3, [pc, #552]	; (800b13c <axis_b_timer+0x2dc>)
 800af12:	ed93 7a01 	vldr	s14, [r3, #4]
 800af16:	4b89      	ldr	r3, [pc, #548]	; (800b13c <axis_b_timer+0x2dc>)
 800af18:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800af1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af20:	4b86      	ldr	r3, [pc, #536]	; (800b13c <axis_b_timer+0x2dc>)
 800af22:	edc3 7a01 	vstr	s15, [r3, #4]


	}
	if (b.flag_last_pull==1) // фаза временнОго выравнивания последнего толчка
 800af26:	4b85      	ldr	r3, [pc, #532]	; (800b13c <axis_b_timer+0x2dc>)
 800af28:	78db      	ldrb	r3, [r3, #3]
 800af2a:	2b01      	cmp	r3, #1
 800af2c:	d128      	bne.n	800af80 <axis_b_timer+0x120>
	{
		b.flag_last_pull=0;
 800af2e:	4b83      	ldr	r3, [pc, #524]	; (800b13c <axis_b_timer+0x2dc>)
 800af30:	2200      	movs	r2, #0
 800af32:	70da      	strb	r2, [r3, #3]
		b.cur_speed=count_last_pulls/(((b.motion_time/*-0.009*/)*counter_period-ticks_motion)/counter_period);/*a.motion_time*/
 800af34:	4b82      	ldr	r3, [pc, #520]	; (800b140 <axis_b_timer+0x2e0>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	ee07 3a90 	vmov	s15, r3
 800af3c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800af40:	4b7e      	ldr	r3, [pc, #504]	; (800b13c <axis_b_timer+0x2dc>)
 800af42:	ed93 7a07 	vldr	s14, [r3, #28]
 800af46:	4b7f      	ldr	r3, [pc, #508]	; (800b144 <axis_b_timer+0x2e4>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af56:	4b74      	ldr	r3, [pc, #464]	; (800b128 <axis_b_timer+0x2c8>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	ee37 6a67 	vsub.f32	s12, s14, s15
 800af66:	4b77      	ldr	r3, [pc, #476]	; (800b144 <axis_b_timer+0x2e4>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	ee07 3a90 	vmov	s15, r3
 800af6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800af72:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800af76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af7a:	4b70      	ldr	r3, [pc, #448]	; (800b13c <axis_b_timer+0x2dc>)
 800af7c:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	b.target_period=counter_period/b.cur_speed;
 800af80:	4b70      	ldr	r3, [pc, #448]	; (800b144 <axis_b_timer+0x2e4>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	ee07 3a90 	vmov	s15, r3
 800af88:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800af8c:	4b6b      	ldr	r3, [pc, #428]	; (800b13c <axis_b_timer+0x2dc>)
 800af8e:	ed93 7a01 	vldr	s14, [r3, #4]
 800af92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af96:	4b69      	ldr	r3, [pc, #420]	; (800b13c <axis_b_timer+0x2dc>)
 800af98:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	//=====================
   b.target_period=b.target_period/2;
 800af9c:	4b67      	ldr	r3, [pc, #412]	; (800b13c <axis_b_timer+0x2dc>)
 800af9e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800afa2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800afa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800afaa:	4b64      	ldr	r3, [pc, #400]	; (800b13c <axis_b_timer+0x2dc>)
 800afac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		/*if (debag_flag == 1)
		{
			debug_var_a=a.target_period;
		}
		*/
	if (tics<b.target_period) return;
 800afb0:	4b62      	ldr	r3, [pc, #392]	; (800b13c <axis_b_timer+0x2dc>)
 800afb2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800afb6:	4b5d      	ldr	r3, [pc, #372]	; (800b12c <axis_b_timer+0x2cc>)
 800afb8:	edd3 7a00 	vldr	s15, [r3]
 800afbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc4:	f300 80aa 	bgt.w	800b11c <axis_b_timer+0x2bc>

	compensator += (tics - b.target_period);
 800afc8:	4b58      	ldr	r3, [pc, #352]	; (800b12c <axis_b_timer+0x2cc>)
 800afca:	ed93 7a00 	vldr	s14, [r3]
 800afce:	4b5b      	ldr	r3, [pc, #364]	; (800b13c <axis_b_timer+0x2dc>)
 800afd0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800afd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800afd8:	4b55      	ldr	r3, [pc, #340]	; (800b130 <axis_b_timer+0x2d0>)
 800afda:	edd3 7a00 	vldr	s15, [r3]
 800afde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afe2:	4b53      	ldr	r3, [pc, #332]	; (800b130 <axis_b_timer+0x2d0>)
 800afe4:	edc3 7a00 	vstr	s15, [r3]
	tics=0;
 800afe8:	4b50      	ldr	r3, [pc, #320]	; (800b12c <axis_b_timer+0x2cc>)
 800afea:	f04f 0200 	mov.w	r2, #0
 800afee:	601a      	str	r2, [r3, #0]

	if (compensator>1.00)
 800aff0:	4b4f      	ldr	r3, [pc, #316]	; (800b130 <axis_b_timer+0x2d0>)
 800aff2:	edd3 7a00 	vldr	s15, [r3]
 800aff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800affa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800affe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b002:	dd13      	ble.n	800b02c <axis_b_timer+0x1cc>
	{
		compensator-=1.00;
 800b004:	4b4a      	ldr	r3, [pc, #296]	; (800b130 <axis_b_timer+0x2d0>)
 800b006:	edd3 7a00 	vldr	s15, [r3]
 800b00a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b00e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b012:	4b47      	ldr	r3, [pc, #284]	; (800b130 <axis_b_timer+0x2d0>)
 800b014:	edc3 7a00 	vstr	s15, [r3]
    	tics+=1.00;
 800b018:	4b44      	ldr	r3, [pc, #272]	; (800b12c <axis_b_timer+0x2cc>)
 800b01a:	edd3 7a00 	vldr	s15, [r3]
 800b01e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b022:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b026:	4b41      	ldr	r3, [pc, #260]	; (800b12c <axis_b_timer+0x2cc>)
 800b028:	edc3 7a00 	vstr	s15, [r3]
	}



	if (b.dir == 1) HAL_GPIO_WritePin(DIR_PORT_B, DIR_PIN_B, GPIO_PIN_RESET);
 800b02c:	4b43      	ldr	r3, [pc, #268]	; (800b13c <axis_b_timer+0x2dc>)
 800b02e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d106      	bne.n	800b044 <axis_b_timer+0x1e4>
 800b036:	2200      	movs	r2, #0
 800b038:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b03c:	4842      	ldr	r0, [pc, #264]	; (800b148 <axis_b_timer+0x2e8>)
 800b03e:	f7f6 fe39 	bl	8001cb4 <HAL_GPIO_WritePin>
 800b042:	e00a      	b.n	800b05a <axis_b_timer+0x1fa>
	else if (b.dir == 0) HAL_GPIO_WritePin(DIR_PORT_B, DIR_PIN_B, GPIO_PIN_SET);
 800b044:	4b3d      	ldr	r3, [pc, #244]	; (800b13c <axis_b_timer+0x2dc>)
 800b046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d105      	bne.n	800b05a <axis_b_timer+0x1fa>
 800b04e:	2201      	movs	r2, #1
 800b050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b054:	483c      	ldr	r0, [pc, #240]	; (800b148 <axis_b_timer+0x2e8>)
 800b056:	f7f6 fe2d 	bl	8001cb4 <HAL_GPIO_WritePin>

	static uint8_t pin_flag=0;
	long Total_time;

	if (pin_flag == 0)
 800b05a:	4b3c      	ldr	r3, [pc, #240]	; (800b14c <axis_b_timer+0x2ec>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d132      	bne.n	800b0c8 <axis_b_timer+0x268>
	{
		HAL_GPIO_WritePin(STEP_PORT_B, STEP_PIN_B, GPIO_PIN_SET);
 800b062:	2201      	movs	r2, #1
 800b064:	2180      	movs	r1, #128	; 0x80
 800b066:	483a      	ldr	r0, [pc, #232]	; (800b150 <axis_b_timer+0x2f0>)
 800b068:	f7f6 fe24 	bl	8001cb4 <HAL_GPIO_WritePin>
		pin_flag=1;
 800b06c:	4b37      	ldr	r3, [pc, #220]	; (800b14c <axis_b_timer+0x2ec>)
 800b06e:	2201      	movs	r2, #1
 800b070:	701a      	strb	r2, [r3, #0]
		pulses++;
 800b072:	4b30      	ldr	r3, [pc, #192]	; (800b134 <axis_b_timer+0x2d4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	3301      	adds	r3, #1
 800b078:	4a2e      	ldr	r2, [pc, #184]	; (800b134 <axis_b_timer+0x2d4>)
 800b07a:	6013      	str	r3, [r2, #0]
		if (pulses == b.pulls_to_start_brake-1){b.flag_brake = 1;}
 800b07c:	4b2f      	ldr	r3, [pc, #188]	; (800b13c <axis_b_timer+0x2dc>)
 800b07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b080:	3b01      	subs	r3, #1
 800b082:	461a      	mov	r2, r3
 800b084:	4b2b      	ldr	r3, [pc, #172]	; (800b134 <axis_b_timer+0x2d4>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d102      	bne.n	800b092 <axis_b_timer+0x232>
 800b08c:	4b2b      	ldr	r3, [pc, #172]	; (800b13c <axis_b_timer+0x2dc>)
 800b08e:	2201      	movs	r2, #1
 800b090:	709a      	strb	r2, [r3, #2]
		if (pulses == b.target_pulses-count_last_pulls){b.flag_brake = 0;b.flag_last_pull = 1;}
 800b092:	4b2a      	ldr	r3, [pc, #168]	; (800b13c <axis_b_timer+0x2dc>)
 800b094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b096:	4b2a      	ldr	r3, [pc, #168]	; (800b140 <axis_b_timer+0x2e0>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	461a      	mov	r2, r3
 800b09e:	4b25      	ldr	r3, [pc, #148]	; (800b134 <axis_b_timer+0x2d4>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d105      	bne.n	800b0b2 <axis_b_timer+0x252>
 800b0a6:	4b25      	ldr	r3, [pc, #148]	; (800b13c <axis_b_timer+0x2dc>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	709a      	strb	r2, [r3, #2]
 800b0ac:	4b23      	ldr	r3, [pc, #140]	; (800b13c <axis_b_timer+0x2dc>)
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	70da      	strb	r2, [r3, #3]
		if (pulses == b.target_pulses)
 800b0b2:	4b22      	ldr	r3, [pc, #136]	; (800b13c <axis_b_timer+0x2dc>)
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	4b1e      	ldr	r3, [pc, #120]	; (800b134 <axis_b_timer+0x2d4>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d12e      	bne.n	800b11e <axis_b_timer+0x2be>
	{
		ticks_motion=0;
 800b0c0:	4b19      	ldr	r3, [pc, #100]	; (800b128 <axis_b_timer+0x2c8>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	e02a      	b.n	800b11e <axis_b_timer+0x2be>
	}

	}
	else
	{
		HAL_GPIO_WritePin(STEP_PORT_B, STEP_PIN_B, GPIO_PIN_RESET);
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	2180      	movs	r1, #128	; 0x80
 800b0cc:	4820      	ldr	r0, [pc, #128]	; (800b150 <axis_b_timer+0x2f0>)
 800b0ce:	f7f6 fdf1 	bl	8001cb4 <HAL_GPIO_WritePin>
		pin_flag=0;
 800b0d2:	4b1e      	ldr	r3, [pc, #120]	; (800b14c <axis_b_timer+0x2ec>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	701a      	strb	r2, [r3, #0]


		if (pulses == b.target_pulses)
 800b0d8:	4b18      	ldr	r3, [pc, #96]	; (800b13c <axis_b_timer+0x2dc>)
 800b0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4b15      	ldr	r3, [pc, #84]	; (800b134 <axis_b_timer+0x2d4>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d11b      	bne.n	800b11e <axis_b_timer+0x2be>
	{
		b_flag_go=0;
 800b0e6:	4b0f      	ldr	r3, [pc, #60]	; (800b124 <axis_b_timer+0x2c4>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
		pulses = 0;
 800b0ec:	4b11      	ldr	r3, [pc, #68]	; (800b134 <axis_b_timer+0x2d4>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	601a      	str	r2, [r3, #0]
		tics=0;
 800b0f2:	4b0e      	ldr	r3, [pc, #56]	; (800b12c <axis_b_timer+0x2cc>)
 800b0f4:	f04f 0200 	mov.w	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
		flag_axis_b_busy=0;
 800b0fa:	4b0f      	ldr	r3, [pc, #60]	; (800b138 <axis_b_timer+0x2d8>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	701a      	strb	r2, [r3, #0]
		b.cur_speed=0;
 800b100:	4b0e      	ldr	r3, [pc, #56]	; (800b13c <axis_b_timer+0x2dc>)
 800b102:	f04f 0200 	mov.w	r2, #0
 800b106:	605a      	str	r2, [r3, #4]
			Total_time=HAL_GetTick()-b.sys_tick_start;
 800b108:	f7f5 fb44 	bl	8000794 <HAL_GetTick>
 800b10c:	4602      	mov	r2, r0
 800b10e:	4b0b      	ldr	r3, [pc, #44]	; (800b13c <axis_b_timer+0x2dc>)
 800b110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b112:	1ad3      	subs	r3, r2, r3
 800b114:	607b      	str	r3, [r7, #4]
 800b116:	e002      	b.n	800b11e <axis_b_timer+0x2be>
	if (b_flag_go==0) return;
 800b118:	bf00      	nop
 800b11a:	e000      	b.n	800b11e <axis_b_timer+0x2be>
	if (tics<b.target_period) return;
 800b11c:	bf00      	nop
	}

	}


}
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	24000349 	.word	0x24000349
 800b128:	24000364 	.word	0x24000364
 800b12c:	24000368 	.word	0x24000368
 800b130:	2400036c 	.word	0x2400036c
 800b134:	24000370 	.word	0x24000370
 800b138:	2400034c 	.word	0x2400034c
 800b13c:	24001db8 	.word	0x24001db8
 800b140:	24000098 	.word	0x24000098
 800b144:	24000094 	.word	0x24000094
 800b148:	58021000 	.word	0x58021000
 800b14c:	24000374 	.word	0x24000374
 800b150:	58020400 	.word	0x58020400

0800b154 <axis_c_motion_ini>:
	float accel,
  float brake,
	float  time_to_start_brake,
	float	motion_time,
	uint8_t direction)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b088      	sub	sp, #32
 800b158:	af00      	add	r7, sp, #0
 800b15a:	61f8      	str	r0, [r7, #28]
 800b15c:	ed87 0a06 	vstr	s0, [r7, #24]
 800b160:	edc7 0a05 	vstr	s1, [r7, #20]
 800b164:	ed87 1a04 	vstr	s2, [r7, #16]
 800b168:	edc7 1a03 	vstr	s3, [r7, #12]
 800b16c:	ed87 2a02 	vstr	s4, [r7, #8]
 800b170:	edc7 2a01 	vstr	s5, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
	c.motion_time = motion_time;
 800b178:	4a2e      	ldr	r2, [pc, #184]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	61d3      	str	r3, [r2, #28]
	c.max_speed = max_speed;
 800b17e:	4a2d      	ldr	r2, [pc, #180]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	6113      	str	r3, [r2, #16]
	c.min_speed = min_speed;
 800b184:	4a2b      	ldr	r2, [pc, #172]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	6153      	str	r3, [r2, #20]
	c.accel = accel;
 800b18a:	4a2a      	ldr	r2, [pc, #168]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	6093      	str	r3, [r2, #8]
	c.brake = brake;
 800b190:	4a28      	ldr	r2, [pc, #160]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	60d3      	str	r3, [r2, #12]
	c.time_to_start_brake = time_to_start_brake;
 800b196:	4a27      	ldr	r2, [pc, #156]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	6193      	str	r3, [r2, #24]
	c.target_pulses = pulses;
 800b19c:	4a25      	ldr	r2, [pc, #148]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	62d3      	str	r3, [r2, #44]	; 0x2c
	c.dir = direction;
 800b1a2:	4a24      	ldr	r2, [pc, #144]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b1a4:	78fb      	ldrb	r3, [r7, #3]
 800b1a6:	f882 3020 	strb.w	r3, [r2, #32]

	c.speedadd=b.accel/counter_period;
 800b1aa:	4b23      	ldr	r3, [pc, #140]	; (800b238 <axis_c_motion_ini+0xe4>)
 800b1ac:	edd3 6a02 	vldr	s13, [r3, #8]
 800b1b0:	4b22      	ldr	r3, [pc, #136]	; (800b23c <axis_c_motion_ini+0xe8>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	ee07 3a90 	vmov	s15, r3
 800b1b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b1bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1c0:	4b1c      	ldr	r3, [pc, #112]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b1c2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	c.speedsub=b.brake/counter_period;
 800b1c6:	4b1c      	ldr	r3, [pc, #112]	; (800b238 <axis_c_motion_ini+0xe4>)
 800b1c8:	edd3 6a03 	vldr	s13, [r3, #12]
 800b1cc:	4b1b      	ldr	r3, [pc, #108]	; (800b23c <axis_c_motion_ini+0xe8>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	ee07 3a90 	vmov	s15, r3
 800b1d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b1d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1dc:	4b15      	ldr	r3, [pc, #84]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b1de:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	c.ticks_to_start_brake=(counter_period*c.time_to_start_brake);
 800b1e2:	4b16      	ldr	r3, [pc, #88]	; (800b23c <axis_c_motion_ini+0xe8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b1ee:	4b11      	ldr	r3, [pc, #68]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b1f0:	edd3 7a06 	vldr	s15, [r3, #24]
 800b1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1fc:	ee17 2a90 	vmov	r2, s15
 800b200:	4b0c      	ldr	r3, [pc, #48]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b202:	625a      	str	r2, [r3, #36]	; 0x24
  c.pulls_to_start_brake = time_to_start_brake;
 800b204:	edd7 7a02 	vldr	s15, [r7, #8]
 800b208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b20c:	ee17 2a90 	vmov	r2, s15
 800b210:	4b08      	ldr	r3, [pc, #32]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b212:	629a      	str	r2, [r3, #40]	; 0x28
	c.flag_accel=1;
 800b214:	4b07      	ldr	r3, [pc, #28]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b216:	2201      	movs	r2, #1
 800b218:	705a      	strb	r2, [r3, #1]

	c.sys_tick_start = HAL_GetTick();
 800b21a:	f7f5 fabb 	bl	8000794 <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	4b04      	ldr	r3, [pc, #16]	; (800b234 <axis_c_motion_ini+0xe0>)
 800b222:	63da      	str	r2, [r3, #60]	; 0x3c
	flag_axis_c_busy = 1;
 800b224:	4b06      	ldr	r3, [pc, #24]	; (800b240 <axis_c_motion_ini+0xec>)
 800b226:	2201      	movs	r2, #1
 800b228:	701a      	strb	r2, [r3, #0]

}
 800b22a:	bf00      	nop
 800b22c:	3720      	adds	r7, #32
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	24001dfc 	.word	0x24001dfc
 800b238:	24001db8 	.word	0x24001db8
 800b23c:	24000094 	.word	0x24000094
 800b240:	2400034d 	.word	0x2400034d

0800b244 <axis_c_timer>:

void axis_c_timer()
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
		static unsigned long ticks_motion=0;
	static  float tics=0;
	static  float compensator=0;
	static unsigned int pulses=0;

	 if (c_flag_go==2)
 800b24a:	4baf      	ldr	r3, [pc, #700]	; (800b508 <axis_c_timer+0x2c4>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d117      	bne.n	800b282 <axis_c_timer+0x3e>
 {
	 ticks_motion=0;
 800b252:	4bae      	ldr	r3, [pc, #696]	; (800b50c <axis_c_timer+0x2c8>)
 800b254:	2200      	movs	r2, #0
 800b256:	601a      	str	r2, [r3, #0]
	 tics=0;
 800b258:	4bad      	ldr	r3, [pc, #692]	; (800b510 <axis_c_timer+0x2cc>)
 800b25a:	f04f 0200 	mov.w	r2, #0
 800b25e:	601a      	str	r2, [r3, #0]
	 compensator=0;
 800b260:	4bac      	ldr	r3, [pc, #688]	; (800b514 <axis_c_timer+0x2d0>)
 800b262:	f04f 0200 	mov.w	r2, #0
 800b266:	601a      	str	r2, [r3, #0]
	 pulses=0;
 800b268:	4bab      	ldr	r3, [pc, #684]	; (800b518 <axis_c_timer+0x2d4>)
 800b26a:	2200      	movs	r2, #0
 800b26c:	601a      	str	r2, [r3, #0]
	 flag_axis_c_busy=0;
 800b26e:	4bab      	ldr	r3, [pc, #684]	; (800b51c <axis_c_timer+0x2d8>)
 800b270:	2200      	movs	r2, #0
 800b272:	701a      	strb	r2, [r3, #0]
	 c.cur_speed=0;
 800b274:	4baa      	ldr	r3, [pc, #680]	; (800b520 <axis_c_timer+0x2dc>)
 800b276:	f04f 0200 	mov.w	r2, #0
 800b27a:	605a      	str	r2, [r3, #4]
	 c_flag_go=0;
 800b27c:	4ba2      	ldr	r3, [pc, #648]	; (800b508 <axis_c_timer+0x2c4>)
 800b27e:	2200      	movs	r2, #0
 800b280:	701a      	strb	r2, [r3, #0]
 }


	if (c_flag_go==0) return;
 800b282:	4ba1      	ldr	r3, [pc, #644]	; (800b508 <axis_c_timer+0x2c4>)
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 8138 	beq.w	800b4fc <axis_c_timer+0x2b8>
	//=====================

	  ticks_motion++;
 800b28c:	4b9f      	ldr	r3, [pc, #636]	; (800b50c <axis_c_timer+0x2c8>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3301      	adds	r3, #1
 800b292:	4a9e      	ldr	r2, [pc, #632]	; (800b50c <axis_c_timer+0x2c8>)
 800b294:	6013      	str	r3, [r2, #0]
		tics++;
 800b296:	4b9e      	ldr	r3, [pc, #632]	; (800b510 <axis_c_timer+0x2cc>)
 800b298:	edd3 7a00 	vldr	s15, [r3]
 800b29c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b2a4:	4b9a      	ldr	r3, [pc, #616]	; (800b510 <axis_c_timer+0x2cc>)
 800b2a6:	edc3 7a00 	vstr	s15, [r3]

	if (c.flag_accel==1)c.cur_speed+=c.speedadd; 	// фаза ускорения
 800b2aa:	4b9d      	ldr	r3, [pc, #628]	; (800b520 <axis_c_timer+0x2dc>)
 800b2ac:	785b      	ldrb	r3, [r3, #1]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d10a      	bne.n	800b2c8 <axis_c_timer+0x84>
 800b2b2:	4b9b      	ldr	r3, [pc, #620]	; (800b520 <axis_c_timer+0x2dc>)
 800b2b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800b2b8:	4b99      	ldr	r3, [pc, #612]	; (800b520 <axis_c_timer+0x2dc>)
 800b2ba:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b2be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2c2:	4b97      	ldr	r3, [pc, #604]	; (800b520 <axis_c_timer+0x2dc>)
 800b2c4:	edc3 7a01 	vstr	s15, [r3, #4]
	if (c.cur_speed >=c.max_speed)// фаза равномерного движения
 800b2c8:	4b95      	ldr	r3, [pc, #596]	; (800b520 <axis_c_timer+0x2dc>)
 800b2ca:	ed93 7a01 	vldr	s14, [r3, #4]
 800b2ce:	4b94      	ldr	r3, [pc, #592]	; (800b520 <axis_c_timer+0x2dc>)
 800b2d0:	edd3 7a04 	vldr	s15, [r3, #16]
 800b2d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2dc:	db02      	blt.n	800b2e4 <axis_c_timer+0xa0>
		{
			c.flag_accel=0;
 800b2de:	4b90      	ldr	r3, [pc, #576]	; (800b520 <axis_c_timer+0x2dc>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	705a      	strb	r2, [r3, #1]
		}


	if (c.flag_accel==0 && c.flag_brake==1 /*&& ticks_motion>=a.ticks_to_start_brake*/) // фаза замедления
 800b2e4:	4b8e      	ldr	r3, [pc, #568]	; (800b520 <axis_c_timer+0x2dc>)
 800b2e6:	785b      	ldrb	r3, [r3, #1]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10e      	bne.n	800b30a <axis_c_timer+0xc6>
 800b2ec:	4b8c      	ldr	r3, [pc, #560]	; (800b520 <axis_c_timer+0x2dc>)
 800b2ee:	789b      	ldrb	r3, [r3, #2]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d10a      	bne.n	800b30a <axis_c_timer+0xc6>
	{

		c.cur_speed-=c.speedsub;
 800b2f4:	4b8a      	ldr	r3, [pc, #552]	; (800b520 <axis_c_timer+0x2dc>)
 800b2f6:	ed93 7a01 	vldr	s14, [r3, #4]
 800b2fa:	4b89      	ldr	r3, [pc, #548]	; (800b520 <axis_c_timer+0x2dc>)
 800b2fc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800b300:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b304:	4b86      	ldr	r3, [pc, #536]	; (800b520 <axis_c_timer+0x2dc>)
 800b306:	edc3 7a01 	vstr	s15, [r3, #4]


	}
	if (c.flag_last_pull==1) // фаза временнОго выравнивания последнего толчка
 800b30a:	4b85      	ldr	r3, [pc, #532]	; (800b520 <axis_c_timer+0x2dc>)
 800b30c:	78db      	ldrb	r3, [r3, #3]
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d128      	bne.n	800b364 <axis_c_timer+0x120>
	{
		c.flag_last_pull=0;
 800b312:	4b83      	ldr	r3, [pc, #524]	; (800b520 <axis_c_timer+0x2dc>)
 800b314:	2200      	movs	r2, #0
 800b316:	70da      	strb	r2, [r3, #3]
		c.cur_speed=count_last_pulls/(((c.motion_time/*-0.009*/)*counter_period-ticks_motion)/counter_period);/*a.motion_time*/
 800b318:	4b82      	ldr	r3, [pc, #520]	; (800b524 <axis_c_timer+0x2e0>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	ee07 3a90 	vmov	s15, r3
 800b320:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b324:	4b7e      	ldr	r3, [pc, #504]	; (800b520 <axis_c_timer+0x2dc>)
 800b326:	ed93 7a07 	vldr	s14, [r3, #28]
 800b32a:	4b7f      	ldr	r3, [pc, #508]	; (800b528 <axis_c_timer+0x2e4>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	ee07 3a90 	vmov	s15, r3
 800b332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b336:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b33a:	4b74      	ldr	r3, [pc, #464]	; (800b50c <axis_c_timer+0x2c8>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	ee07 3a90 	vmov	s15, r3
 800b342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b346:	ee37 6a67 	vsub.f32	s12, s14, s15
 800b34a:	4b77      	ldr	r3, [pc, #476]	; (800b528 <axis_c_timer+0x2e4>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b356:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800b35a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b35e:	4b70      	ldr	r3, [pc, #448]	; (800b520 <axis_c_timer+0x2dc>)
 800b360:	edc3 7a01 	vstr	s15, [r3, #4]
	}

	c.target_period=counter_period/c.cur_speed;
 800b364:	4b70      	ldr	r3, [pc, #448]	; (800b528 <axis_c_timer+0x2e4>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	ee07 3a90 	vmov	s15, r3
 800b36c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b370:	4b6b      	ldr	r3, [pc, #428]	; (800b520 <axis_c_timer+0x2dc>)
 800b372:	ed93 7a01 	vldr	s14, [r3, #4]
 800b376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b37a:	4b69      	ldr	r3, [pc, #420]	; (800b520 <axis_c_timer+0x2dc>)
 800b37c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	//=====================
   c.target_period=c.target_period/2;
 800b380:	4b67      	ldr	r3, [pc, #412]	; (800b520 <axis_c_timer+0x2dc>)
 800b382:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b386:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b38a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b38e:	4b64      	ldr	r3, [pc, #400]	; (800b520 <axis_c_timer+0x2dc>)
 800b390:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30


	if (tics<c.target_period) return;
 800b394:	4b62      	ldr	r3, [pc, #392]	; (800b520 <axis_c_timer+0x2dc>)
 800b396:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800b39a:	4b5d      	ldr	r3, [pc, #372]	; (800b510 <axis_c_timer+0x2cc>)
 800b39c:	edd3 7a00 	vldr	s15, [r3]
 800b3a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a8:	f300 80aa 	bgt.w	800b500 <axis_c_timer+0x2bc>

	compensator += (tics - c.target_period);
 800b3ac:	4b58      	ldr	r3, [pc, #352]	; (800b510 <axis_c_timer+0x2cc>)
 800b3ae:	ed93 7a00 	vldr	s14, [r3]
 800b3b2:	4b5b      	ldr	r3, [pc, #364]	; (800b520 <axis_c_timer+0x2dc>)
 800b3b4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b3b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b3bc:	4b55      	ldr	r3, [pc, #340]	; (800b514 <axis_c_timer+0x2d0>)
 800b3be:	edd3 7a00 	vldr	s15, [r3]
 800b3c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3c6:	4b53      	ldr	r3, [pc, #332]	; (800b514 <axis_c_timer+0x2d0>)
 800b3c8:	edc3 7a00 	vstr	s15, [r3]
	tics=0;
 800b3cc:	4b50      	ldr	r3, [pc, #320]	; (800b510 <axis_c_timer+0x2cc>)
 800b3ce:	f04f 0200 	mov.w	r2, #0
 800b3d2:	601a      	str	r2, [r3, #0]

	if (compensator>1.00)
 800b3d4:	4b4f      	ldr	r3, [pc, #316]	; (800b514 <axis_c_timer+0x2d0>)
 800b3d6:	edd3 7a00 	vldr	s15, [r3]
 800b3da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3de:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e6:	dd13      	ble.n	800b410 <axis_c_timer+0x1cc>
	{
		compensator-=1.00;
 800b3e8:	4b4a      	ldr	r3, [pc, #296]	; (800b514 <axis_c_timer+0x2d0>)
 800b3ea:	edd3 7a00 	vldr	s15, [r3]
 800b3ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b3f6:	4b47      	ldr	r3, [pc, #284]	; (800b514 <axis_c_timer+0x2d0>)
 800b3f8:	edc3 7a00 	vstr	s15, [r3]
    	tics+=1.00;
 800b3fc:	4b44      	ldr	r3, [pc, #272]	; (800b510 <axis_c_timer+0x2cc>)
 800b3fe:	edd3 7a00 	vldr	s15, [r3]
 800b402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b40a:	4b41      	ldr	r3, [pc, #260]	; (800b510 <axis_c_timer+0x2cc>)
 800b40c:	edc3 7a00 	vstr	s15, [r3]
	}



	if (c.dir == 1) HAL_GPIO_WritePin(DIR_PORT_C, DIR_PIN_C, GPIO_PIN_RESET);
 800b410:	4b43      	ldr	r3, [pc, #268]	; (800b520 <axis_c_timer+0x2dc>)
 800b412:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d106      	bne.n	800b428 <axis_c_timer+0x1e4>
 800b41a:	2200      	movs	r2, #0
 800b41c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b420:	4842      	ldr	r0, [pc, #264]	; (800b52c <axis_c_timer+0x2e8>)
 800b422:	f7f6 fc47 	bl	8001cb4 <HAL_GPIO_WritePin>
 800b426:	e00a      	b.n	800b43e <axis_c_timer+0x1fa>
	else if (c.dir == 0) HAL_GPIO_WritePin(DIR_PORT_C, DIR_PIN_C, GPIO_PIN_SET);
 800b428:	4b3d      	ldr	r3, [pc, #244]	; (800b520 <axis_c_timer+0x2dc>)
 800b42a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d105      	bne.n	800b43e <axis_c_timer+0x1fa>
 800b432:	2201      	movs	r2, #1
 800b434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b438:	483c      	ldr	r0, [pc, #240]	; (800b52c <axis_c_timer+0x2e8>)
 800b43a:	f7f6 fc3b 	bl	8001cb4 <HAL_GPIO_WritePin>

	static uint8_t pin_flag=0;
	long Total_time;

	if (pin_flag == 0)
 800b43e:	4b3c      	ldr	r3, [pc, #240]	; (800b530 <axis_c_timer+0x2ec>)
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d132      	bne.n	800b4ac <axis_c_timer+0x268>
	{
		HAL_GPIO_WritePin(STEP_PORT_C, STEP_PIN_C, GPIO_PIN_SET);
 800b446:	2201      	movs	r2, #1
 800b448:	2101      	movs	r1, #1
 800b44a:	483a      	ldr	r0, [pc, #232]	; (800b534 <axis_c_timer+0x2f0>)
 800b44c:	f7f6 fc32 	bl	8001cb4 <HAL_GPIO_WritePin>
		pin_flag=1;
 800b450:	4b37      	ldr	r3, [pc, #220]	; (800b530 <axis_c_timer+0x2ec>)
 800b452:	2201      	movs	r2, #1
 800b454:	701a      	strb	r2, [r3, #0]
		pulses++;
 800b456:	4b30      	ldr	r3, [pc, #192]	; (800b518 <axis_c_timer+0x2d4>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	3301      	adds	r3, #1
 800b45c:	4a2e      	ldr	r2, [pc, #184]	; (800b518 <axis_c_timer+0x2d4>)
 800b45e:	6013      	str	r3, [r2, #0]
		if (pulses == c.pulls_to_start_brake-1){c.flag_brake = 1;}
 800b460:	4b2f      	ldr	r3, [pc, #188]	; (800b520 <axis_c_timer+0x2dc>)
 800b462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b464:	3b01      	subs	r3, #1
 800b466:	461a      	mov	r2, r3
 800b468:	4b2b      	ldr	r3, [pc, #172]	; (800b518 <axis_c_timer+0x2d4>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d102      	bne.n	800b476 <axis_c_timer+0x232>
 800b470:	4b2b      	ldr	r3, [pc, #172]	; (800b520 <axis_c_timer+0x2dc>)
 800b472:	2201      	movs	r2, #1
 800b474:	709a      	strb	r2, [r3, #2]
		if (pulses == c.target_pulses-count_last_pulls){c.flag_brake = 0;c.flag_last_pull = 1;}
 800b476:	4b2a      	ldr	r3, [pc, #168]	; (800b520 <axis_c_timer+0x2dc>)
 800b478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47a:	4b2a      	ldr	r3, [pc, #168]	; (800b524 <axis_c_timer+0x2e0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	461a      	mov	r2, r3
 800b482:	4b25      	ldr	r3, [pc, #148]	; (800b518 <axis_c_timer+0x2d4>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d105      	bne.n	800b496 <axis_c_timer+0x252>
 800b48a:	4b25      	ldr	r3, [pc, #148]	; (800b520 <axis_c_timer+0x2dc>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	709a      	strb	r2, [r3, #2]
 800b490:	4b23      	ldr	r3, [pc, #140]	; (800b520 <axis_c_timer+0x2dc>)
 800b492:	2201      	movs	r2, #1
 800b494:	70da      	strb	r2, [r3, #3]
		if (pulses == c.target_pulses)
 800b496:	4b22      	ldr	r3, [pc, #136]	; (800b520 <axis_c_timer+0x2dc>)
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	461a      	mov	r2, r3
 800b49c:	4b1e      	ldr	r3, [pc, #120]	; (800b518 <axis_c_timer+0x2d4>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d12e      	bne.n	800b502 <axis_c_timer+0x2be>
	{
		ticks_motion=0;
 800b4a4:	4b19      	ldr	r3, [pc, #100]	; (800b50c <axis_c_timer+0x2c8>)
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	601a      	str	r2, [r3, #0]
 800b4aa:	e02a      	b.n	800b502 <axis_c_timer+0x2be>
	}

	}
	else
	{
		HAL_GPIO_WritePin(STEP_PORT_C, STEP_PIN_C, GPIO_PIN_RESET);
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2101      	movs	r1, #1
 800b4b0:	4820      	ldr	r0, [pc, #128]	; (800b534 <axis_c_timer+0x2f0>)
 800b4b2:	f7f6 fbff 	bl	8001cb4 <HAL_GPIO_WritePin>
		pin_flag=0;
 800b4b6:	4b1e      	ldr	r3, [pc, #120]	; (800b530 <axis_c_timer+0x2ec>)
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	701a      	strb	r2, [r3, #0]


		if (pulses == c.target_pulses)
 800b4bc:	4b18      	ldr	r3, [pc, #96]	; (800b520 <axis_c_timer+0x2dc>)
 800b4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b15      	ldr	r3, [pc, #84]	; (800b518 <axis_c_timer+0x2d4>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d11b      	bne.n	800b502 <axis_c_timer+0x2be>
	{
		c_flag_go=0;extern TIM_HandleTypeDef htim4;
 800b4ca:	4b0f      	ldr	r3, [pc, #60]	; (800b508 <axis_c_timer+0x2c4>)
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	701a      	strb	r2, [r3, #0]
		pulses = 0;
 800b4d0:	4b11      	ldr	r3, [pc, #68]	; (800b518 <axis_c_timer+0x2d4>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
		tics=0;
 800b4d6:	4b0e      	ldr	r3, [pc, #56]	; (800b510 <axis_c_timer+0x2cc>)
 800b4d8:	f04f 0200 	mov.w	r2, #0
 800b4dc:	601a      	str	r2, [r3, #0]
		flag_axis_c_busy=0;
 800b4de:	4b0f      	ldr	r3, [pc, #60]	; (800b51c <axis_c_timer+0x2d8>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	701a      	strb	r2, [r3, #0]
		c.cur_speed=0;
 800b4e4:	4b0e      	ldr	r3, [pc, #56]	; (800b520 <axis_c_timer+0x2dc>)
 800b4e6:	f04f 0200 	mov.w	r2, #0
 800b4ea:	605a      	str	r2, [r3, #4]
			Total_time=HAL_GetTick()-c.sys_tick_start;
 800b4ec:	f7f5 f952 	bl	8000794 <HAL_GetTick>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <axis_c_timer+0x2dc>)
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	607b      	str	r3, [r7, #4]
 800b4fa:	e002      	b.n	800b502 <axis_c_timer+0x2be>
	if (c_flag_go==0) return;
 800b4fc:	bf00      	nop
 800b4fe:	e000      	b.n	800b502 <axis_c_timer+0x2be>
	if (tics<c.target_period) return;
 800b500:	bf00      	nop
	}

	}


}
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	2400034a 	.word	0x2400034a
 800b50c:	24000378 	.word	0x24000378
 800b510:	2400037c 	.word	0x2400037c
 800b514:	24000380 	.word	0x24000380
 800b518:	24000384 	.word	0x24000384
 800b51c:	2400034d 	.word	0x2400034d
 800b520:	24001dfc 	.word	0x24001dfc
 800b524:	24000098 	.word	0x24000098
 800b528:	24000094 	.word	0x24000094
 800b52c:	58021000 	.word	0x58021000
 800b530:	24000388 	.word	0x24000388
 800b534:	58020400 	.word	0x58020400

0800b538 <parse_commands>:

	}
}

void parse_commands (char *buff_str) //user uart
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b0d4      	sub	sp, #336	; 0x150
 800b53c:	af08      	add	r7, sp, #32
 800b53e:	1d3b      	adds	r3, r7, #4
 800b540:	6018      	str	r0, [r3, #0]


char float_buff[30];


	if(startsWith(buff_str,"x"))
 800b542:	1d3b      	adds	r3, r7, #4
 800b544:	49ce      	ldr	r1, [pc, #824]	; (800b880 <parse_commands+0x348>)
 800b546:	6818      	ldr	r0, [r3, #0]
 800b548:	f7fc fbb6 	bl	8007cb8 <startsWith>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f000 8081 	beq.w	800b656 <parse_commands+0x11e>
	{
		//printstr(buff_str);
			if (flag_uart_busy == true)
 800b554:	4bcb      	ldr	r3, [pc, #812]	; (800b884 <parse_commands+0x34c>)
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d009      	beq.n	800b570 <parse_commands+0x38>
		{
			if (flag_do_move == 1)
 800b55c:	4bca      	ldr	r3, [pc, #808]	; (800b888 <parse_commands+0x350>)
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2b01      	cmp	r3, #1
 800b562:	f041 8103 	bne.w	800c76c <parse_commands+0x1234>
			 printstr("busy..");
 800b566:	48c9      	ldr	r0, [pc, #804]	; (800b88c <parse_commands+0x354>)
 800b568:	f001 ff68 	bl	800d43c <printstr>
			return;
 800b56c:	f001 b8fe 	b.w	800c76c <parse_commands+0x1234>
		}

		// flag_uart_blk = true; //флаг для запрета приема команд
		float x, y, z;
		uint8_t index_x=indexOf(buff_str,'x');
 800b570:	1d3b      	adds	r3, r7, #4
 800b572:	2178      	movs	r1, #120	; 0x78
 800b574:	6818      	ldr	r0, [r3, #0]
 800b576:	f7fc fb7d 	bl	8007c74 <indexOf>
 800b57a:	4603      	mov	r3, r0
 800b57c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		uint8_t index_y=indexOf(buff_str,'y');
 800b580:	1d3b      	adds	r3, r7, #4
 800b582:	2179      	movs	r1, #121	; 0x79
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	f7fc fb75 	bl	8007c74 <indexOf>
 800b58a:	4603      	mov	r3, r0
 800b58c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		uint8_t index_z=indexOf(buff_str,'z');
 800b590:	1d3b      	adds	r3, r7, #4
 800b592:	217a      	movs	r1, #122	; 0x7a
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	f7fc fb6d 	bl	8007c74 <indexOf>
 800b59a:	4603      	mov	r3, r0
 800b59c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		uint8_t last_s = length(buff_str);
 800b5a0:	1d3b      	adds	r3, r7, #4
 800b5a2:	6818      	ldr	r0, [r3, #0]
 800b5a4:	f7fc fb14 	bl	8007bd0 <length>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

		substring(buff_str, float_buff,index_x+1,index_y);
 800b5ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800b5b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b5bc:	1d38      	adds	r0, r7, #4
 800b5be:	6800      	ldr	r0, [r0, #0]
 800b5c0:	f7fc fba2 	bl	8007d08 <substring>
		x = atof(float_buff);
 800b5c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f002 f940 	bl	800d84e <atof>
 800b5ce:	eeb0 7b40 	vmov.f64	d7, d0
 800b5d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b5d6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

		substring(buff_str, float_buff,index_y+1,index_z);
 800b5da:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800b5de:	1c5a      	adds	r2, r3, #1
 800b5e0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800b5e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b5e8:	1d38      	adds	r0, r7, #4
 800b5ea:	6800      	ldr	r0, [r0, #0]
 800b5ec:	f7fc fb8c 	bl	8007d08 <substring>
		y = atof(float_buff);
 800b5f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f002 f92a 	bl	800d84e <atof>
 800b5fa:	eeb0 7b40 	vmov.f64	d7, d0
 800b5fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b602:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		substring(buff_str, float_buff,index_z+1,last_s);
 800b606:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800b610:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b614:	1d38      	adds	r0, r7, #4
 800b616:	6800      	ldr	r0, [r0, #0]
 800b618:	f7fc fb76 	bl	8007d08 <substring>
		z = atof(float_buff);
 800b61c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b620:	4618      	mov	r0, r3
 800b622:	f002 f914 	bl	800d84e <atof>
 800b626:	eeb0 7b40 	vmov.f64	d7, d0
 800b62a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b62e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	  flag_safe_mode_motion = 0; //флаг безопасного режима выключен (в случае, если координаты
 800b632:	4b97      	ldr	r3, [pc, #604]	; (800b890 <parse_commands+0x358>)
 800b634:	2200      	movs	r2, #0
 800b636:	701a      	strb	r2, [r3, #0]
		//команды будут выходить за пределы доступа, команда будет игнорироваться. При == 1 будет бесконенчый цикл.
		if (flag_auto != 1) domotion(x,y,z);
 800b638:	4b96      	ldr	r3, [pc, #600]	; (800b894 <parse_commands+0x35c>)
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	f001 8097 	beq.w	800c770 <parse_commands+0x1238>
 800b642:	ed97 1a18 	vldr	s2, [r7, #96]	; 0x60
 800b646:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 800b64a:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 800b64e:	f7fe f911 	bl	8009874 <domotion>
		//printstr(buff_str);
		//flag_uart_blk = false;
		return;
 800b652:	f001 b88d 	b.w	800c770 <parse_commands+0x1238>
	}
	else if(startsWith(buff_str,"s"))
 800b656:	1d3b      	adds	r3, r7, #4
 800b658:	498f      	ldr	r1, [pc, #572]	; (800b898 <parse_commands+0x360>)
 800b65a:	6818      	ldr	r0, [r3, #0]
 800b65c:	f7fc fb2c 	bl	8007cb8 <startsWith>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 8270 	beq.w	800bb48 <parse_commands+0x610>
	{
		uint8_t index=indexOf(buff_str,' ');
 800b668:	1d3b      	adds	r3, r7, #4
 800b66a:	2120      	movs	r1, #32
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	f7fc fb01 	bl	8007c74 <indexOf>
 800b672:	4603      	mov	r3, r0
 800b674:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		uint8_t last_s = length(buff_str);
 800b678:	1d3b      	adds	r3, r7, #4
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	f7fc faa8 	bl	8007bd0 <length>
 800b680:	4603      	mov	r3, r0
 800b682:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
		substring(buff_str, float_buff, 1,index);
 800b686:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 800b68a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b68e:	1d38      	adds	r0, r7, #4
 800b690:	2201      	movs	r2, #1
 800b692:	6800      	ldr	r0, [r0, #0]
 800b694:	f7fc fb38 	bl	8007d08 <substring>
		int set_num = toInt(float_buff);
 800b698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fc fc63 	bl	8007f68 <toInt>
 800b6a2:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8


		if (set_num == 1)
 800b6a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6aa:	2b01      	cmp	r3, #1
 800b6ac:	d120      	bne.n	800b6f0 <parse_commands+0x1b8>
		{
			substring(buff_str, float_buff,index,last_s);
 800b6ae:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b6b2:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b6b6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b6ba:	1d38      	adds	r0, r7, #4
 800b6bc:	6800      	ldr	r0, [r0, #0]
 800b6be:	f7fc fb23 	bl	8007d08 <substring>
		  float value = atof(float_buff);
 800b6c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f002 f8c1 	bl	800d84e <atof>
 800b6cc:	eeb0 7b40 	vmov.f64	d7, d0
 800b6d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b6d4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
			l_rod = value;
 800b6d8:	4a70      	ldr	r2, [pc, #448]	; (800b89c <parse_commands+0x364>)
 800b6da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6dc:	6013      	str	r3, [r2, #0]
			printstr("l_rod: ");
 800b6de:	4870      	ldr	r0, [pc, #448]	; (800b8a0 <parse_commands+0x368>)
 800b6e0:	f001 feac 	bl	800d43c <printstr>
			printfloat(value);
 800b6e4:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 800b6e8:	f001 fee0 	bl	800d4ac <printfloat>
 800b6ec:	f001 b833 	b.w	800c756 <parse_commands+0x121e>
		}
		else	if (set_num == 2)
 800b6f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d128      	bne.n	800b74a <parse_commands+0x212>
		{
	 		substring(buff_str, float_buff,index,last_s);
 800b6f8:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b6fc:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b700:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b704:	1d38      	adds	r0, r7, #4
 800b706:	6800      	ldr	r0, [r0, #0]
 800b708:	f7fc fafe 	bl	8007d08 <substring>
		  float value = atof(float_buff);
 800b70c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b710:	4618      	mov	r0, r3
 800b712:	f002 f89c 	bl	800d84e <atof>
 800b716:	eeb0 7b40 	vmov.f64	d7, d0
 800b71a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b71e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
			zero_A = value;
 800b722:	4a60      	ldr	r2, [pc, #384]	; (800b8a4 <parse_commands+0x36c>)
 800b724:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b726:	6013      	str	r3, [r2, #0]
			zero_B = value;
 800b728:	4a5f      	ldr	r2, [pc, #380]	; (800b8a8 <parse_commands+0x370>)
 800b72a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b72c:	6013      	str	r3, [r2, #0]
			zero_C = value;
 800b72e:	4a5f      	ldr	r2, [pc, #380]	; (800b8ac <parse_commands+0x374>)
 800b730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b732:	6013      	str	r3, [r2, #0]
			ini_calc();
 800b734:	f7fc fd94 	bl	8008260 <ini_calc>
			printstr("zero_legth: ");
 800b738:	485d      	ldr	r0, [pc, #372]	; (800b8b0 <parse_commands+0x378>)
 800b73a:	f001 fe7f 	bl	800d43c <printstr>
			printfloat(value);
 800b73e:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 800b742:	f001 feb3 	bl	800d4ac <printfloat>
 800b746:	f001 b806 	b.w	800c756 <parse_commands+0x121e>
		}
		else if (set_num == 3)
 800b74a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b74e:	2b03      	cmp	r3, #3
 800b750:	d11b      	bne.n	800b78a <parse_commands+0x252>
		{
			substring(buff_str, float_buff,index,last_s);
 800b752:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b756:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b75a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b75e:	1d38      	adds	r0, r7, #4
 800b760:	6800      	ldr	r0, [r0, #0]
 800b762:	f7fc fad1 	bl	8007d08 <substring>
	  	int value = atoi(float_buff);
 800b766:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b76a:	4618      	mov	r0, r3
 800b76c:	f002 f872 	bl	800d854 <atoi>
 800b770:	67b8      	str	r0, [r7, #120]	; 0x78
			flag_camera_en = value;
 800b772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b774:	b2da      	uxtb	r2, r3
 800b776:	4b4f      	ldr	r3, [pc, #316]	; (800b8b4 <parse_commands+0x37c>)
 800b778:	701a      	strb	r2, [r3, #0]
			printstr("action_camera_en");
 800b77a:	484f      	ldr	r0, [pc, #316]	; (800b8b8 <parse_commands+0x380>)
 800b77c:	f001 fe5e 	bl	800d43c <printstr>
			printint(value);
 800b780:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b782:	f001 fe2f 	bl	800d3e4 <printint>
 800b786:	f000 bfe6 	b.w	800c756 <parse_commands+0x121e>
		}
		else if (set_num == 4)
 800b78a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b78e:	2b04      	cmp	r3, #4
 800b790:	d11a      	bne.n	800b7c8 <parse_commands+0x290>
		{
			substring(buff_str, float_buff,index,last_s);
 800b792:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b796:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b79a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b79e:	1d38      	adds	r0, r7, #4
 800b7a0:	6800      	ldr	r0, [r0, #0]
 800b7a2:	f7fc fab1 	bl	8007d08 <substring>
	  	int value = atoi(float_buff);
 800b7a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f002 f852 	bl	800d854 <atoi>
 800b7b0:	67f8      	str	r0, [r7, #124]	; 0x7c
			set_acceleration(value);
 800b7b2:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b7b4:	f7fe f920 	bl	80099f8 <set_acceleration>
			printstr("acceleration");
 800b7b8:	4840      	ldr	r0, [pc, #256]	; (800b8bc <parse_commands+0x384>)
 800b7ba:	f001 fe3f 	bl	800d43c <printstr>
			printint(value);
 800b7be:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b7c0:	f001 fe10 	bl	800d3e4 <printint>
 800b7c4:	f000 bfc7 	b.w	800c756 <parse_commands+0x121e>
		}
			else if (set_num == 5)
 800b7c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b7cc:	2b05      	cmp	r3, #5
 800b7ce:	d125      	bne.n	800b81c <parse_commands+0x2e4>
		{
			substring(buff_str, float_buff,index,last_s);
 800b7d0:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b7d4:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b7d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b7dc:	1d38      	adds	r0, r7, #4
 800b7de:	6800      	ldr	r0, [r0, #0]
 800b7e0:	f7fc fa92 	bl	8007d08 <substring>
	  	float value = atof(float_buff);
 800b7e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f002 f830 	bl	800d84e <atof>
 800b7ee:	eeb0 7b40 	vmov.f64	d7, d0
 800b7f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b7f6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
			detection_line = value;
 800b7fa:	4a31      	ldr	r2, [pc, #196]	; (800b8c0 <parse_commands+0x388>)
 800b7fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b800:	6013      	str	r3, [r2, #0]
			printstr("detection_line");
 800b802:	4830      	ldr	r0, [pc, #192]	; (800b8c4 <parse_commands+0x38c>)
 800b804:	f001 fe1a 	bl	800d43c <printstr>
			printint(value);
 800b808:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b80c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b810:	ee17 0a90 	vmov	r0, s15
 800b814:	f001 fde6 	bl	800d3e4 <printint>
 800b818:	f000 bf9d 	b.w	800c756 <parse_commands+0x121e>
		}
				else if (set_num == 6)
 800b81c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b820:	2b06      	cmp	r3, #6
 800b822:	d153      	bne.n	800b8cc <parse_commands+0x394>
		{
			substring(buff_str, float_buff,index,last_s);
 800b824:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b828:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b82c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b830:	1d38      	adds	r0, r7, #4
 800b832:	6800      	ldr	r0, [r0, #0]
 800b834:	f7fc fa68 	bl	8007d08 <substring>
	  	float value = -atof(float_buff);
 800b838:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b83c:	4618      	mov	r0, r3
 800b83e:	f002 f806 	bl	800d84e <atof>
 800b842:	eeb0 7b40 	vmov.f64	d7, d0
 800b846:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b84a:	eef1 7a67 	vneg.f32	s15, s15
 800b84e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
			short_move(value, value, value);
 800b852:	ed97 1a21 	vldr	s2, [r7, #132]	; 0x84
 800b856:	edd7 0a21 	vldr	s1, [r7, #132]	; 0x84
 800b85a:	ed97 0a21 	vldr	s0, [r7, #132]	; 0x84
 800b85e:	f7fe fac3 	bl	8009de8 <short_move>
			printstr("short_move a b c mm");
 800b862:	4819      	ldr	r0, [pc, #100]	; (800b8c8 <parse_commands+0x390>)
 800b864:	f001 fdea 	bl	800d43c <printstr>
			printint(-value);
 800b868:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b86c:	eef1 7a67 	vneg.f32	s15, s15
 800b870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b874:	ee17 0a90 	vmov	r0, s15
 800b878:	f001 fdb4 	bl	800d3e4 <printint>
 800b87c:	f000 bf6b 	b.w	800c756 <parse_commands+0x121e>
 800b880:	08010ab4 	.word	0x08010ab4
 800b884:	24000390 	.word	0x24000390
 800b888:	240002e0 	.word	0x240002e0
 800b88c:	08010ab8 	.word	0x08010ab8
 800b890:	240002f1 	.word	0x240002f1
 800b894:	24000314 	.word	0x24000314
 800b898:	08010ac0 	.word	0x08010ac0
 800b89c:	24000008 	.word	0x24000008
 800b8a0:	08010ac4 	.word	0x08010ac4
 800b8a4:	24000030 	.word	0x24000030
 800b8a8:	24000034 	.word	0x24000034
 800b8ac:	24000038 	.word	0x24000038
 800b8b0:	08010acc 	.word	0x08010acc
 800b8b4:	2400005d 	.word	0x2400005d
 800b8b8:	08010adc 	.word	0x08010adc
 800b8bc:	08010af0 	.word	0x08010af0
 800b8c0:	24000060 	.word	0x24000060
 800b8c4:	08010b00 	.word	0x08010b00
 800b8c8:	08010b10 	.word	0x08010b10
		}
				else if (set_num == 7)
 800b8cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b8d0:	2b07      	cmp	r3, #7
 800b8d2:	d129      	bne.n	800b928 <parse_commands+0x3f0>
		{
			substring(buff_str, float_buff,index,last_s);
 800b8d4:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b8d8:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b8dc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b8e0:	1d38      	adds	r0, r7, #4
 800b8e2:	6800      	ldr	r0, [r0, #0]
 800b8e4:	f7fc fa10 	bl	8007d08 <substring>
	  	float value = atof(float_buff);
 800b8e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 ffae 	bl	800d84e <atof>
 800b8f2:	eeb0 7b40 	vmov.f64	d7, d0
 800b8f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b8fa:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
			k_axis[0]=value;
 800b8fe:	4aca      	ldr	r2, [pc, #808]	; (800bc28 <parse_commands+0x6f0>)
 800b900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b904:	6013      	str	r3, [r2, #0]
			k_axis[1]=value;
 800b906:	4ac8      	ldr	r2, [pc, #800]	; (800bc28 <parse_commands+0x6f0>)
 800b908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b90c:	6053      	str	r3, [r2, #4]
			k_axis[2]=value;
 800b90e:	4ac6      	ldr	r2, [pc, #792]	; (800bc28 <parse_commands+0x6f0>)
 800b910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b914:	6093      	str	r3, [r2, #8]
			printstr("k_axises");
 800b916:	48c5      	ldr	r0, [pc, #788]	; (800bc2c <parse_commands+0x6f4>)
 800b918:	f001 fd90 	bl	800d43c <printstr>
			printfloat(value);
 800b91c:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 800b920:	f001 fdc4 	bl	800d4ac <printfloat>
 800b924:	f000 bf17 	b.w	800c756 <parse_commands+0x121e>
		}
			else if (set_num == 8)
 800b928:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	d121      	bne.n	800b974 <parse_commands+0x43c>
		{
			substring(buff_str, float_buff,index,last_s);
 800b930:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b934:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b938:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b93c:	1d38      	adds	r0, r7, #4
 800b93e:	6800      	ldr	r0, [r0, #0]
 800b940:	f7fc f9e2 	bl	8007d08 <substring>
	  	float value = atof(float_buff);
 800b944:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 ff80 	bl	800d84e <atof>
 800b94e:	eeb0 7b40 	vmov.f64	d7, d0
 800b952:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b956:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
			z_before_capture=value;
 800b95a:	4ab5      	ldr	r2, [pc, #724]	; (800bc30 <parse_commands+0x6f8>)
 800b95c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b960:	6013      	str	r3, [r2, #0]
			printstr("z_before_capture");
 800b962:	48b4      	ldr	r0, [pc, #720]	; (800bc34 <parse_commands+0x6fc>)
 800b964:	f001 fd6a 	bl	800d43c <printstr>
			printfloat(value);
 800b968:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 800b96c:	f001 fd9e 	bl	800d4ac <printfloat>
 800b970:	f000 bef1 	b.w	800c756 <parse_commands+0x121e>
		}
			else if (set_num == 9)
 800b974:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b978:	2b09      	cmp	r3, #9
 800b97a:	d121      	bne.n	800b9c0 <parse_commands+0x488>
		{
			substring(buff_str, float_buff,index,last_s);
 800b97c:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b980:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b984:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b988:	1d38      	adds	r0, r7, #4
 800b98a:	6800      	ldr	r0, [r0, #0]
 800b98c:	f7fc f9bc 	bl	8007d08 <substring>
	  	float value = atof(float_buff);
 800b990:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b994:	4618      	mov	r0, r3
 800b996:	f001 ff5a 	bl	800d84e <atof>
 800b99a:	eeb0 7b40 	vmov.f64	d7, d0
 800b99e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b9a2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
			z_capture=value;
 800b9a6:	4aa4      	ldr	r2, [pc, #656]	; (800bc38 <parse_commands+0x700>)
 800b9a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b9ac:	6013      	str	r3, [r2, #0]
			printstr("z_capture");
 800b9ae:	48a3      	ldr	r0, [pc, #652]	; (800bc3c <parse_commands+0x704>)
 800b9b0:	f001 fd44 	bl	800d43c <printstr>
			printfloat(value);
 800b9b4:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 800b9b8:	f001 fd78 	bl	800d4ac <printfloat>
 800b9bc:	f000 becb 	b.w	800c756 <parse_commands+0x121e>
		}
		 else if (set_num == 10)
 800b9c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b9c4:	2b0a      	cmp	r3, #10
 800b9c6:	d121      	bne.n	800ba0c <parse_commands+0x4d4>
		{
			substring(buff_str, float_buff,index,last_s);
 800b9c8:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800b9cc:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800b9d0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b9d4:	1d38      	adds	r0, r7, #4
 800b9d6:	6800      	ldr	r0, [r0, #0]
 800b9d8:	f7fc f996 	bl	8007d08 <substring>
	  	float value = atof(float_buff);
 800b9dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f001 ff34 	bl	800d84e <atof>
 800b9e6:	eeb0 7b40 	vmov.f64	d7, d0
 800b9ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b9ee:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
			z_past_capture=value;
 800b9f2:	4a93      	ldr	r2, [pc, #588]	; (800bc40 <parse_commands+0x708>)
 800b9f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b9f8:	6013      	str	r3, [r2, #0]
			printstr("z_past_capture");
 800b9fa:	4892      	ldr	r0, [pc, #584]	; (800bc44 <parse_commands+0x70c>)
 800b9fc:	f001 fd1e 	bl	800d43c <printstr>
			printfloat(value);
 800ba00:	ed97 0a25 	vldr	s0, [r7, #148]	; 0x94
 800ba04:	f001 fd52 	bl	800d4ac <printfloat>
 800ba08:	f000 bea5 	b.w	800c756 <parse_commands+0x121e>
		}
			else if (set_num == 11)
 800ba0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ba10:	2b0b      	cmp	r3, #11
 800ba12:	d121      	bne.n	800ba58 <parse_commands+0x520>
		{
			substring(buff_str, float_buff,index,last_s);
 800ba14:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800ba18:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800ba1c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ba20:	1d38      	adds	r0, r7, #4
 800ba22:	6800      	ldr	r0, [r0, #0]
 800ba24:	f7fc f970 	bl	8007d08 <substring>
	  	float value = atof(float_buff);
 800ba28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f001 ff0e 	bl	800d84e <atof>
 800ba32:	eeb0 7b40 	vmov.f64	d7, d0
 800ba36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ba3a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
			z_before_drop=value;
 800ba3e:	4a82      	ldr	r2, [pc, #520]	; (800bc48 <parse_commands+0x710>)
 800ba40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba44:	6013      	str	r3, [r2, #0]
			printstr("z_before_drop");
 800ba46:	4881      	ldr	r0, [pc, #516]	; (800bc4c <parse_commands+0x714>)
 800ba48:	f001 fcf8 	bl	800d43c <printstr>
			printfloat(value);
 800ba4c:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800ba50:	f001 fd2c 	bl	800d4ac <printfloat>
 800ba54:	f000 be7f 	b.w	800c756 <parse_commands+0x121e>
		}
			else if (set_num == 12)
 800ba58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ba5c:	2b0c      	cmp	r3, #12
 800ba5e:	d121      	bne.n	800baa4 <parse_commands+0x56c>
		{
			substring(buff_str, float_buff,index,last_s);
 800ba60:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800ba64:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800ba68:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800ba6c:	1d38      	adds	r0, r7, #4
 800ba6e:	6800      	ldr	r0, [r0, #0]
 800ba70:	f7fc f94a 	bl	8007d08 <substring>
	  	float value = atof(float_buff);
 800ba74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 fee8 	bl	800d84e <atof>
 800ba7e:	eeb0 7b40 	vmov.f64	d7, d0
 800ba82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800ba86:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
			capture_line=value;
 800ba8a:	4a71      	ldr	r2, [pc, #452]	; (800bc50 <parse_commands+0x718>)
 800ba8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba90:	6013      	str	r3, [r2, #0]
			printstr("capture_line");
 800ba92:	4870      	ldr	r0, [pc, #448]	; (800bc54 <parse_commands+0x71c>)
 800ba94:	f001 fcd2 	bl	800d43c <printstr>
			printfloat(value);
 800ba98:	ed97 0a27 	vldr	s0, [r7, #156]	; 0x9c
 800ba9c:	f001 fd06 	bl	800d4ac <printfloat>
 800baa0:	f000 be59 	b.w	800c756 <parse_commands+0x121e>
		}
			else if (set_num == 13)
 800baa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800baa8:	2b0d      	cmp	r3, #13
 800baaa:	d123      	bne.n	800baf4 <parse_commands+0x5bc>
		{
			substring(buff_str, float_buff,index,last_s);
 800baac:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800bab0:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800bab4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800bab8:	1d38      	adds	r0, r7, #4
 800baba:	6800      	ldr	r0, [r0, #0]
 800babc:	f7fc f924 	bl	8007d08 <substring>
	  	int value = atoi(float_buff);
 800bac0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bac4:	4618      	mov	r0, r3
 800bac6:	f001 fec5 	bl	800d854 <atoi>
 800baca:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
			accel_captur=value;
 800bace:	4a62      	ldr	r2, [pc, #392]	; (800bc58 <parse_commands+0x720>)
 800bad0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bad4:	6013      	str	r3, [r2, #0]
			printstr("accel_captur");
 800bad6:	4861      	ldr	r0, [pc, #388]	; (800bc5c <parse_commands+0x724>)
 800bad8:	f001 fcb0 	bl	800d43c <printstr>
			printfloat(accel_captur);
 800badc:	4b5e      	ldr	r3, [pc, #376]	; (800bc58 <parse_commands+0x720>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	ee07 3a90 	vmov	s15, r3
 800bae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bae8:	eeb0 0a67 	vmov.f32	s0, s15
 800baec:	f001 fcde 	bl	800d4ac <printfloat>
 800baf0:	f000 be31 	b.w	800c756 <parse_commands+0x121e>

		}
			else if (set_num == 14)
 800baf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800baf8:	2b0e      	cmp	r3, #14
 800bafa:	f040 862c 	bne.w	800c756 <parse_commands+0x121e>
		{
			substring(buff_str, float_buff,index,last_s);
 800bafe:	f897 20af 	ldrb.w	r2, [r7, #175]	; 0xaf
 800bb02:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 800bb06:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800bb0a:	1d38      	adds	r0, r7, #4
 800bb0c:	6800      	ldr	r0, [r0, #0]
 800bb0e:	f7fc f8fb 	bl	8007d08 <substring>
	  	float value = atof(float_buff);
 800bb12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bb16:	4618      	mov	r0, r3
 800bb18:	f001 fe99 	bl	800d84e <atof>
 800bb1c:	eeb0 7b40 	vmov.f64	d7, d0
 800bb20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bb24:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			zero_x_line=value;
 800bb28:	4a4d      	ldr	r2, [pc, #308]	; (800bc60 <parse_commands+0x728>)
 800bb2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bb2e:	6013      	str	r3, [r2, #0]
			printstr("zero_x_line");
 800bb30:	484c      	ldr	r0, [pc, #304]	; (800bc64 <parse_commands+0x72c>)
 800bb32:	f001 fc83 	bl	800d43c <printstr>
			printfloat(zero_x_line);
 800bb36:	4b4a      	ldr	r3, [pc, #296]	; (800bc60 <parse_commands+0x728>)
 800bb38:	edd3 7a00 	vldr	s15, [r3]
 800bb3c:	eeb0 0a67 	vmov.f32	s0, s15
 800bb40:	f001 fcb4 	bl	800d4ac <printfloat>
 800bb44:	f000 be07 	b.w	800c756 <parse_commands+0x121e>

		}


	}
	else if(startsWith(buff_str,"c"))
 800bb48:	1d3b      	adds	r3, r7, #4
 800bb4a:	4947      	ldr	r1, [pc, #284]	; (800bc68 <parse_commands+0x730>)
 800bb4c:	6818      	ldr	r0, [r3, #0]
 800bb4e:	f7fc f8b3 	bl	8007cb8 <startsWith>
 800bb52:	4603      	mov	r3, r0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 85a1 	beq.w	800c69c <parse_commands+0x1164>
	{

		uint8_t index_c=indexOf(buff_str,'c');
 800bb5a:	1d3b      	adds	r3, r7, #4
 800bb5c:	2163      	movs	r1, #99	; 0x63
 800bb5e:	6818      	ldr	r0, [r3, #0]
 800bb60:	f7fc f888 	bl	8007c74 <indexOf>
 800bb64:	4603      	mov	r3, r0
 800bb66:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
		uint8_t last_s = length(buff_str);
 800bb6a:	1d3b      	adds	r3, r7, #4
 800bb6c:	6818      	ldr	r0, [r3, #0]
 800bb6e:	f7fc f82f 	bl	8007bd0 <length>
 800bb72:	4603      	mov	r3, r0
 800bb74:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
		substring(buff_str, float_buff,index_c+1,index_c+3);
 800bb78:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800bb7c:	1c5a      	adds	r2, r3, #1
 800bb7e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800bb82:	3303      	adds	r3, #3
 800bb84:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800bb88:	1d38      	adds	r0, r7, #4
 800bb8a:	6800      	ldr	r0, [r0, #0]
 800bb8c:	f7fc f8bc 	bl	8007d08 <substring>
		int set_num = toInt(float_buff);
 800bb90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fc f9e7 	bl	8007f68 <toInt>
 800bb9a:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
			if (set_num == 1)
 800bb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d109      	bne.n	800bbba <parse_commands+0x682>
			{
				if (flag_auto == 0) flag_axises_zero = 1;
 800bba6:	4b31      	ldr	r3, [pc, #196]	; (800bc6c <parse_commands+0x734>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	f040 85d3 	bne.w	800c756 <parse_commands+0x121e>
 800bbb0:	4b2f      	ldr	r3, [pc, #188]	; (800bc70 <parse_commands+0x738>)
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	701a      	strb	r2, [r3, #0]
 800bbb6:	f000 bdce 	b.w	800c756 <parse_commands+0x121e>
			}
			else if (set_num == 2)
 800bbba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d106      	bne.n	800bbd0 <parse_commands+0x698>
			{
		  	vacuum_on();
 800bbc2:	f7fd fe7d 	bl	80098c0 <vacuum_on>
				printstr("manual_vacc_on");
 800bbc6:	482b      	ldr	r0, [pc, #172]	; (800bc74 <parse_commands+0x73c>)
 800bbc8:	f001 fc38 	bl	800d43c <printstr>
 800bbcc:	f000 bdc3 	b.w	800c756 <parse_commands+0x121e>
			}
			else if (set_num == 3)
 800bbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	d106      	bne.n	800bbe6 <parse_commands+0x6ae>
			{
				vacuum_off();
 800bbd8:	f7fd fe84 	bl	80098e4 <vacuum_off>
				printstr("manual_vacc_off");
 800bbdc:	4826      	ldr	r0, [pc, #152]	; (800bc78 <parse_commands+0x740>)
 800bbde:	f001 fc2d 	bl	800d43c <printstr>
 800bbe2:	f000 bdb8 	b.w	800c756 <parse_commands+0x121e>
			}
				else if (set_num == 4)
 800bbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbea:	2b04      	cmp	r3, #4
 800bbec:	d107      	bne.n	800bbfe <parse_commands+0x6c6>
			{
		  	global_switch_vacuum = true;
 800bbee:	4b23      	ldr	r3, [pc, #140]	; (800bc7c <parse_commands+0x744>)
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	701a      	strb	r2, [r3, #0]
				printstr("auto_vacc_on");
 800bbf4:	4822      	ldr	r0, [pc, #136]	; (800bc80 <parse_commands+0x748>)
 800bbf6:	f001 fc21 	bl	800d43c <printstr>
 800bbfa:	f000 bdac 	b.w	800c756 <parse_commands+0x121e>
			}
			else if (set_num == 5)
 800bbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc02:	2b05      	cmp	r3, #5
 800bc04:	d107      	bne.n	800bc16 <parse_commands+0x6de>
			{
				global_switch_vacuum = false;
 800bc06:	4b1d      	ldr	r3, [pc, #116]	; (800bc7c <parse_commands+0x744>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	701a      	strb	r2, [r3, #0]
				printstr("auto_vacc_off");
 800bc0c:	481d      	ldr	r0, [pc, #116]	; (800bc84 <parse_commands+0x74c>)
 800bc0e:	f001 fc15 	bl	800d43c <printstr>
 800bc12:	f000 bda0 	b.w	800c756 <parse_commands+0x121e>
			}
				else if (set_num == 6)
 800bc16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1a:	2b06      	cmp	r3, #6
 800bc1c:	d134      	bne.n	800bc88 <parse_commands+0x750>
			{
					save_data();
 800bc1e:	f000 fe4b 	bl	800c8b8 <save_data>
 800bc22:	f000 bd98 	b.w	800c756 <parse_commands+0x121e>
 800bc26:	bf00      	nop
 800bc28:	24000044 	.word	0x24000044
 800bc2c:	08010b24 	.word	0x08010b24
 800bc30:	24000078 	.word	0x24000078
 800bc34:	08010b30 	.word	0x08010b30
 800bc38:	2400007c 	.word	0x2400007c
 800bc3c:	08010b44 	.word	0x08010b44
 800bc40:	24000080 	.word	0x24000080
 800bc44:	08010b50 	.word	0x08010b50
 800bc48:	24000084 	.word	0x24000084
 800bc4c:	08010b60 	.word	0x08010b60
 800bc50:	24000064 	.word	0x24000064
 800bc54:	08010b70 	.word	0x08010b70
 800bc58:	24000090 	.word	0x24000090
 800bc5c:	08010b80 	.word	0x08010b80
 800bc60:	24000074 	.word	0x24000074
 800bc64:	08010b90 	.word	0x08010b90
 800bc68:	08010b9c 	.word	0x08010b9c
 800bc6c:	24000314 	.word	0x24000314
 800bc70:	240002e1 	.word	0x240002e1
 800bc74:	08010ba0 	.word	0x08010ba0
 800bc78:	08010bb0 	.word	0x08010bb0
 800bc7c:	2400005c 	.word	0x2400005c
 800bc80:	08010bc0 	.word	0x08010bc0
 800bc84:	08010bd0 	.word	0x08010bd0

			}
				else if (set_num == 7)
 800bc88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc8c:	2b07      	cmp	r3, #7
 800bc8e:	d143      	bne.n	800bd18 <parse_commands+0x7e0>
			{
				printstr("prog_seq: ");
 800bc90:	489c      	ldr	r0, [pc, #624]	; (800bf04 <parse_commands+0x9cc>)
 800bc92:	f001 fbd3 	bl	800d43c <printstr>
				for (int i = 0; ; i++)
 800bc96:	2300      	movs	r3, #0
 800bc98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				{
					printint(i);
 800bc9c:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800bca0:	f001 fba0 	bl	800d3e4 <printint>
					printfloat(obj_drop_x[i]);
 800bca4:	4a98      	ldr	r2, [pc, #608]	; (800bf08 <parse_commands+0x9d0>)
 800bca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcaa:	009b      	lsls	r3, r3, #2
 800bcac:	4413      	add	r3, r2
 800bcae:	edd3 7a00 	vldr	s15, [r3]
 800bcb2:	eeb0 0a67 	vmov.f32	s0, s15
 800bcb6:	f001 fbf9 	bl	800d4ac <printfloat>
					printfloat(obj_drop_y[i]);
 800bcba:	4a94      	ldr	r2, [pc, #592]	; (800bf0c <parse_commands+0x9d4>)
 800bcbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4413      	add	r3, r2
 800bcc4:	edd3 7a00 	vldr	s15, [r3]
 800bcc8:	eeb0 0a67 	vmov.f32	s0, s15
 800bccc:	f001 fbee 	bl	800d4ac <printfloat>
					printfloat(obj_drop_z[i]);
 800bcd0:	4a8f      	ldr	r2, [pc, #572]	; (800bf10 <parse_commands+0x9d8>)
 800bcd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4413      	add	r3, r2
 800bcda:	edd3 7a00 	vldr	s15, [r3]
 800bcde:	eeb0 0a67 	vmov.f32	s0, s15
 800bce2:	f001 fbe3 	bl	800d4ac <printfloat>
					printint(mode_motion[i]);
 800bce6:	4a8b      	ldr	r2, [pc, #556]	; (800bf14 <parse_commands+0x9dc>)
 800bce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bcec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f001 fb77 	bl	800d3e4 <printint>
					printstr("-----------");
 800bcf6:	4888      	ldr	r0, [pc, #544]	; (800bf18 <parse_commands+0x9e0>)
 800bcf8:	f001 fba0 	bl	800d43c <printstr>
					if (mode_motion[i] == 2) break;
 800bcfc:	4a85      	ldr	r2, [pc, #532]	; (800bf14 <parse_commands+0x9dc>)
 800bcfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	f000 851e 	beq.w	800c748 <parse_commands+0x1210>
				for (int i = 0; ; i++)
 800bd0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd10:	3301      	adds	r3, #1
 800bd12:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
					printint(i);
 800bd16:	e7c1      	b.n	800bc9c <parse_commands+0x764>
				}

			}
				else if (set_num == 8)
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1c:	2b08      	cmp	r3, #8
 800bd1e:	f040 809d 	bne.w	800be5c <parse_commands+0x924>
			{
				uint8_t index_n=indexOf(buff_str,' ');
 800bd22:	1d3b      	adds	r3, r7, #4
 800bd24:	2120      	movs	r1, #32
 800bd26:	6818      	ldr	r0, [r3, #0]
 800bd28:	f7fb ffa4 	bl	8007c74 <indexOf>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
				uint8_t index_f=indexOf(buff_str,'f');
 800bd32:	1d3b      	adds	r3, r7, #4
 800bd34:	2166      	movs	r1, #102	; 0x66
 800bd36:	6818      	ldr	r0, [r3, #0]
 800bd38:	f7fb ff9c 	bl	8007c74 <indexOf>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
				substring(buff_str, float_buff,index_n+1,index_f);
 800bd42:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800bd46:	1c5a      	adds	r2, r3, #1
 800bd48:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800bd4c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800bd50:	1d38      	adds	r0, r7, #4
 800bd52:	6800      	ldr	r0, [r0, #0]
 800bd54:	f7fb ffd8 	bl	8007d08 <substring>
				int n = atoi(float_buff);
 800bd58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f001 fd79 	bl	800d854 <atoi>
 800bd62:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
				obj_drop_x[n] = cur_x;
 800bd66:	4b6d      	ldr	r3, [pc, #436]	; (800bf1c <parse_commands+0x9e4>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	4967      	ldr	r1, [pc, #412]	; (800bf08 <parse_commands+0x9d0>)
 800bd6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	440b      	add	r3, r1
 800bd74:	601a      	str	r2, [r3, #0]
				obj_drop_y[n] = cur_y;
 800bd76:	4b6a      	ldr	r3, [pc, #424]	; (800bf20 <parse_commands+0x9e8>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	4964      	ldr	r1, [pc, #400]	; (800bf0c <parse_commands+0x9d4>)
 800bd7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	440b      	add	r3, r1
 800bd84:	601a      	str	r2, [r3, #0]
				obj_drop_z[n] = cur_z;
 800bd86:	4b67      	ldr	r3, [pc, #412]	; (800bf24 <parse_commands+0x9ec>)
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	4961      	ldr	r1, [pc, #388]	; (800bf10 <parse_commands+0x9d8>)
 800bd8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	440b      	add	r3, r1
 800bd94:	601a      	str	r2, [r3, #0]
				substring(buff_str, float_buff,index_f+1,last_s);
 800bd96:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800bda0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800bda4:	1d38      	adds	r0, r7, #4
 800bda6:	6800      	ldr	r0, [r0, #0]
 800bda8:	f7fb ffae 	bl	8007d08 <substring>
				int flag = atoi(float_buff);
 800bdac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 fd4f 	bl	800d854 <atoi>
 800bdb6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
		   	mode_motion[n] = flag;
 800bdba:	4956      	ldr	r1, [pc, #344]	; (800bf14 <parse_commands+0x9dc>)
 800bdbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bdc0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bdc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				for (int i =0; i<100; i++)
 800bdc8:	2300      	movs	r3, #0
 800bdca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800bdce:	e03f      	b.n	800be50 <parse_commands+0x918>
				{
				char str[50];
				sprintf(str,"step: %d,%.3f,%.3f,%.3f,%d\r",i,obj_drop_x[i],obj_drop_y[i],obj_drop_z[i],mode_motion[i]);
 800bdd0:	4a4d      	ldr	r2, [pc, #308]	; (800bf08 <parse_commands+0x9d0>)
 800bdd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	edd3 7a00 	vldr	s15, [r3]
 800bdde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bde2:	4a4a      	ldr	r2, [pc, #296]	; (800bf0c <parse_commands+0x9d4>)
 800bde4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	4413      	add	r3, r2
 800bdec:	edd3 6a00 	vldr	s13, [r3]
 800bdf0:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800bdf4:	4a46      	ldr	r2, [pc, #280]	; (800bf10 <parse_commands+0x9d8>)
 800bdf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	edd3 5a00 	vldr	s11, [r3]
 800be02:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800be06:	4a43      	ldr	r2, [pc, #268]	; (800bf14 <parse_commands+0x9dc>)
 800be08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be10:	f107 000c 	add.w	r0, r7, #12
 800be14:	9306      	str	r3, [sp, #24]
 800be16:	ed8d 5b04 	vstr	d5, [sp, #16]
 800be1a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800be1e:	ed8d 7b00 	vstr	d7, [sp]
 800be22:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800be26:	4940      	ldr	r1, [pc, #256]	; (800bf28 <parse_commands+0x9f0>)
 800be28:	f001 fd4a 	bl	800d8c0 <siprintf>
				printstr_(str);
 800be2c:	f107 030c 	add.w	r3, r7, #12
 800be30:	4618      	mov	r0, r3
 800be32:	f001 fb25 	bl	800d480 <printstr_>
				if (mode_motion[i] == 2) break;
 800be36:	4a37      	ldr	r2, [pc, #220]	; (800bf14 <parse_commands+0x9dc>)
 800be38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be40:	2b02      	cmp	r3, #2
 800be42:	f000 8483 	beq.w	800c74c <parse_commands+0x1214>
				for (int i =0; i<100; i++)
 800be46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be4a:	3301      	adds	r3, #1
 800be4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800be50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be54:	2b63      	cmp	r3, #99	; 0x63
 800be56:	ddbb      	ble.n	800bdd0 <parse_commands+0x898>
 800be58:	f000 bc7d 	b.w	800c756 <parse_commands+0x121e>
				}

			}
					else if (set_num == 9)
 800be5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be60:	2b09      	cmp	r3, #9
 800be62:	d165      	bne.n	800bf30 <parse_commands+0x9f8>
			{
				save_data();
 800be64:	f000 fd28 	bl	800c8b8 <save_data>
				printstr("array obj drop coords saved");
 800be68:	4830      	ldr	r0, [pc, #192]	; (800bf2c <parse_commands+0x9f4>)
 800be6a:	f001 fae7 	bl	800d43c <printstr>

						for (int i =0; i<100; i++)
 800be6e:	2300      	movs	r3, #0
 800be70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800be74:	e03f      	b.n	800bef6 <parse_commands+0x9be>
				{
				char str[50];
				sprintf(str,"step: %d,%.3f,%.3f,%.3f,%d\r",i,obj_drop_x[i],obj_drop_y[i],obj_drop_z[i],mode_motion[i]);
 800be76:	4a24      	ldr	r2, [pc, #144]	; (800bf08 <parse_commands+0x9d0>)
 800be78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	edd3 7a00 	vldr	s15, [r3]
 800be84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800be88:	4a20      	ldr	r2, [pc, #128]	; (800bf0c <parse_commands+0x9d4>)
 800be8a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	edd3 6a00 	vldr	s13, [r3]
 800be96:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800be9a:	4a1d      	ldr	r2, [pc, #116]	; (800bf10 <parse_commands+0x9d8>)
 800be9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	edd3 5a00 	vldr	s11, [r3]
 800bea8:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800beac:	4a19      	ldr	r2, [pc, #100]	; (800bf14 <parse_commands+0x9dc>)
 800beae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800beb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800beb6:	f107 000c 	add.w	r0, r7, #12
 800beba:	9306      	str	r3, [sp, #24]
 800bebc:	ed8d 5b04 	vstr	d5, [sp, #16]
 800bec0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bec4:	ed8d 7b00 	vstr	d7, [sp]
 800bec8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800becc:	4916      	ldr	r1, [pc, #88]	; (800bf28 <parse_commands+0x9f0>)
 800bece:	f001 fcf7 	bl	800d8c0 <siprintf>
				printstr_(str);
 800bed2:	f107 030c 	add.w	r3, r7, #12
 800bed6:	4618      	mov	r0, r3
 800bed8:	f001 fad2 	bl	800d480 <printstr_>
				if (mode_motion[i] == 2) break;
 800bedc:	4a0d      	ldr	r2, [pc, #52]	; (800bf14 <parse_commands+0x9dc>)
 800bede:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee6:	2b02      	cmp	r3, #2
 800bee8:	f000 8432 	beq.w	800c750 <parse_commands+0x1218>
						for (int i =0; i<100; i++)
 800beec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bef0:	3301      	adds	r3, #1
 800bef2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800bef6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800befa:	2b63      	cmp	r3, #99	; 0x63
 800befc:	ddbb      	ble.n	800be76 <parse_commands+0x93e>
 800befe:	f000 bc2a 	b.w	800c756 <parse_commands+0x121e>
 800bf02:	bf00      	nop
 800bf04:	08010be0 	.word	0x08010be0
 800bf08:	24001908 	.word	0x24001908
 800bf0c:	24000a90 	.word	0x24000a90
 800bf10:	24000f40 	.word	0x24000f40
 800bf14:	24001454 	.word	0x24001454
 800bf18:	08010bec 	.word	0x08010bec
 800bf1c:	2400081c 	.word	0x2400081c
 800bf20:	240007fc 	.word	0x240007fc
 800bf24:	24000800 	.word	0x24000800
 800bf28:	08010bf8 	.word	0x08010bf8
 800bf2c:	08010c14 	.word	0x08010c14
				}

			}
						else if (set_num == 10)
 800bf30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf34:	2b0a      	cmp	r3, #10
 800bf36:	f040 8108 	bne.w	800c14a <parse_commands+0xc12>
			{
				uint8_t index_n=indexOf(buff_str,' ');
 800bf3a:	1d3b      	adds	r3, r7, #4
 800bf3c:	2120      	movs	r1, #32
 800bf3e:	6818      	ldr	r0, [r3, #0]
 800bf40:	f7fb fe98 	bl	8007c74 <indexOf>
 800bf44:	4603      	mov	r3, r0
 800bf46:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
				uint8_t index_f=indexOf(buff_str,'f');
 800bf4a:	1d3b      	adds	r3, r7, #4
 800bf4c:	2166      	movs	r1, #102	; 0x66
 800bf4e:	6818      	ldr	r0, [r3, #0]
 800bf50:	f7fb fe90 	bl	8007c74 <indexOf>
 800bf54:	4603      	mov	r3, r0
 800bf56:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
				uint8_t index_v=indexOf(buff_str,'v');
 800bf5a:	1d3b      	adds	r3, r7, #4
 800bf5c:	2176      	movs	r1, #118	; 0x76
 800bf5e:	6818      	ldr	r0, [r3, #0]
 800bf60:	f7fb fe88 	bl	8007c74 <indexOf>
 800bf64:	4603      	mov	r3, r0
 800bf66:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
				uint8_t index_y=indexOf(buff_str,'y');
 800bf6a:	1d3b      	adds	r3, r7, #4
 800bf6c:	2179      	movs	r1, #121	; 0x79
 800bf6e:	6818      	ldr	r0, [r3, #0]
 800bf70:	f7fb fe80 	bl	8007c74 <indexOf>
 800bf74:	4603      	mov	r3, r0
 800bf76:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
				substring(buff_str, float_buff,index_n+1,index_f);
 800bf7a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800bf7e:	1c5a      	adds	r2, r3, #1
 800bf80:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800bf84:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800bf88:	1d38      	adds	r0, r7, #4
 800bf8a:	6800      	ldr	r0, [r0, #0]
 800bf8c:	f7fb febc 	bl	8007d08 <substring>
				int n = atoi(float_buff);
 800bf90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf94:	4618      	mov	r0, r3
 800bf96:	f001 fc5d 	bl	800d854 <atoi>
 800bf9a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

				substring(buff_str, float_buff,index_f+1,index_v);
 800bf9e:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800bfa2:	1c5a      	adds	r2, r3, #1
 800bfa4:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 800bfa8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800bfac:	1d38      	adds	r0, r7, #4
 800bfae:	6800      	ldr	r0, [r0, #0]
 800bfb0:	f7fb feaa 	bl	8007d08 <substring>
				int flag = atoi(float_buff);
 800bfb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f001 fc4b 	bl	800d854 <atoi>
 800bfbe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
		   	mode_motion[n] = flag;
 800bfc2:	49b1      	ldr	r1, [pc, #708]	; (800c288 <parse_commands+0xd50>)
 800bfc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bfc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bfcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				substring(buff_str, float_buff,index_v+1,index_y);
 800bfd0:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 800bfd4:	1c5a      	adds	r2, r3, #1
 800bfd6:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800bfda:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800bfde:	1d38      	adds	r0, r7, #4
 800bfe0:	6800      	ldr	r0, [r0, #0]
 800bfe2:	f7fb fe91 	bl	8007d08 <substring>

				float val = atof(float_buff);
 800bfe6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 fc2f 	bl	800d84e <atof>
 800bff0:	eeb0 7b40 	vmov.f64	d7, d0
 800bff4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bff8:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
				obj_drop_x[n] = val;
 800bffc:	4aa3      	ldr	r2, [pc, #652]	; (800c28c <parse_commands+0xd54>)
 800bffe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c00a:	601a      	str	r2, [r3, #0]

				substring(buff_str, float_buff,index_y+1,last_s);
 800c00c:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800c010:	1c5a      	adds	r2, r3, #1
 800c012:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800c016:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c01a:	1d38      	adds	r0, r7, #4
 800c01c:	6800      	ldr	r0, [r0, #0]
 800c01e:	f7fb fe73 	bl	8007d08 <substring>
				val = atof(float_buff);
 800c022:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c026:	4618      	mov	r0, r3
 800c028:	f001 fc11 	bl	800d84e <atof>
 800c02c:	eeb0 7b40 	vmov.f64	d7, d0
 800c030:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c034:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
				obj_drop_y[n] = val;
 800c038:	4a95      	ldr	r2, [pc, #596]	; (800c290 <parse_commands+0xd58>)
 800c03a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c046:	601a      	str	r2, [r3, #0]
					for (int i =0; i<100; i++)
 800c048:	2300      	movs	r3, #0
 800c04a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c04e:	e03e      	b.n	800c0ce <parse_commands+0xb96>
				{
				char str[50];
				sprintf(str,"step: %d,%.3f,%.3f,%.3f,%d\r",i,obj_drop_x[i],obj_drop_y[i],obj_drop_z[i],mode_motion[i]);
 800c050:	4a8e      	ldr	r2, [pc, #568]	; (800c28c <parse_commands+0xd54>)
 800c052:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4413      	add	r3, r2
 800c05a:	edd3 7a00 	vldr	s15, [r3]
 800c05e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c062:	4a8b      	ldr	r2, [pc, #556]	; (800c290 <parse_commands+0xd58>)
 800c064:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4413      	add	r3, r2
 800c06c:	edd3 6a00 	vldr	s13, [r3]
 800c070:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800c074:	4a87      	ldr	r2, [pc, #540]	; (800c294 <parse_commands+0xd5c>)
 800c076:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	edd3 5a00 	vldr	s11, [r3]
 800c082:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800c086:	4a80      	ldr	r2, [pc, #512]	; (800c288 <parse_commands+0xd50>)
 800c088:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c08c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c090:	f107 000c 	add.w	r0, r7, #12
 800c094:	9306      	str	r3, [sp, #24]
 800c096:	ed8d 5b04 	vstr	d5, [sp, #16]
 800c09a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c09e:	ed8d 7b00 	vstr	d7, [sp]
 800c0a2:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c0a6:	497c      	ldr	r1, [pc, #496]	; (800c298 <parse_commands+0xd60>)
 800c0a8:	f001 fc0a 	bl	800d8c0 <siprintf>
				printstr_(str);
 800c0ac:	f107 030c 	add.w	r3, r7, #12
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f001 f9e5 	bl	800d480 <printstr_>
				if (mode_motion[i] == 2) break;
 800c0b6:	4a74      	ldr	r2, [pc, #464]	; (800c288 <parse_commands+0xd50>)
 800c0b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d009      	beq.n	800c0d8 <parse_commands+0xba0>
					for (int i =0; i<100; i++)
 800c0c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800c0ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c0d2:	2b63      	cmp	r3, #99	; 0x63
 800c0d4:	ddbc      	ble.n	800c050 <parse_commands+0xb18>
 800c0d6:	e000      	b.n	800c0da <parse_commands+0xba2>
				if (mode_motion[i] == 2) break;
 800c0d8:	bf00      	nop
				}

				if (flag == 10)
 800c0da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c0de:	2b0a      	cmp	r3, #10
 800c0e0:	d110      	bne.n	800c104 <parse_commands+0xbcc>
				{
			//	printstr("change accel:");
			//	printint(n);
			//	printfloat(obj_drop_x[n]);
        obj_drop_y[n] = 0;
 800c0e2:	4a6b      	ldr	r2, [pc, #428]	; (800c290 <parse_commands+0xd58>)
 800c0e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4413      	add	r3, r2
 800c0ec:	f04f 0200 	mov.w	r2, #0
 800c0f0:	601a      	str	r2, [r3, #0]
				obj_drop_z[n] = 0;
 800c0f2:	4a68      	ldr	r2, [pc, #416]	; (800c294 <parse_commands+0xd5c>)
 800c0f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f04f 0200 	mov.w	r2, #0
 800c100:	601a      	str	r2, [r3, #0]
 800c102:	e328      	b.n	800c756 <parse_commands+0x121e>
				}
				else if (flag == 11)
 800c104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c108:	2b0b      	cmp	r3, #11
 800c10a:	d110      	bne.n	800c12e <parse_commands+0xbf6>
				{
			//	printstr("delay:");
			//	printint(n);
			//	printfloat(obj_drop_x[n]);
				obj_drop_y[n] = 0;
 800c10c:	4a60      	ldr	r2, [pc, #384]	; (800c290 <parse_commands+0xd58>)
 800c10e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	f04f 0200 	mov.w	r2, #0
 800c11a:	601a      	str	r2, [r3, #0]
				obj_drop_z[n] = 0;
 800c11c:	4a5d      	ldr	r2, [pc, #372]	; (800c294 <parse_commands+0xd5c>)
 800c11e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	f04f 0200 	mov.w	r2, #0
 800c12a:	601a      	str	r2, [r3, #0]
 800c12c:	e313      	b.n	800c756 <parse_commands+0x121e>
				}
					else if (flag == 12)
 800c12e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c132:	2b0c      	cmp	r3, #12
 800c134:	f040 830f 	bne.w	800c756 <parse_commands+0x121e>
			//	printint(n);
			//	printstr("on/off");
			//	printfloat(obj_drop_x[n]);
			//	printstr("delay");
		//		printfloat(obj_drop_y[n]);
				obj_drop_z[n] = 0;
 800c138:	4a56      	ldr	r2, [pc, #344]	; (800c294 <parse_commands+0xd5c>)
 800c13a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	f04f 0200 	mov.w	r2, #0
 800c146:	601a      	str	r2, [r3, #0]
 800c148:	e305      	b.n	800c756 <parse_commands+0x121e>
				}

			}
						else if (set_num == 13)
 800c14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14e:	2b0d      	cmp	r3, #13
 800c150:	d128      	bne.n	800c1a4 <parse_commands+0xc6c>
				{
				printstr("demo:");
 800c152:	4852      	ldr	r0, [pc, #328]	; (800c29c <parse_commands+0xd64>)
 800c154:	f001 f972 	bl	800d43c <printstr>
				uint8_t index_n=indexOf(buff_str,' ');
 800c158:	1d3b      	adds	r3, r7, #4
 800c15a:	2120      	movs	r1, #32
 800c15c:	6818      	ldr	r0, [r3, #0]
 800c15e:	f7fb fd89 	bl	8007c74 <indexOf>
 800c162:	4603      	mov	r3, r0
 800c164:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
				//uint8_t index_f=indexOf(buff_str,'n');
				substring(buff_str, float_buff,index_n+1,last_s);
 800c168:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800c172:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c176:	1d38      	adds	r0, r7, #4
 800c178:	6800      	ldr	r0, [r0, #0]
 800c17a:	f7fb fdc5 	bl	8007d08 <substring>
				int stage = atoi(float_buff);
 800c17e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c182:	4618      	mov	r0, r3
 800c184:	f001 fb66 	bl	800d854 <atoi>
 800c188:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

				printstr_("stage");printint(stage);
 800c18c:	4844      	ldr	r0, [pc, #272]	; (800c2a0 <parse_commands+0xd68>)
 800c18e:	f001 f977 	bl	800d480 <printstr_>
 800c192:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c196:	f001 f925 	bl	800d3e4 <printint>
				do_demo(stage);
 800c19a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800c19e:	f7fe faa3 	bl	800a6e8 <do_demo>
 800c1a2:	e2d8      	b.n	800c756 <parse_commands+0x121e>

				}
				else if (set_num == 14)
 800c1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a8:	2b0e      	cmp	r3, #14
 800c1aa:	d105      	bne.n	800c1b8 <parse_commands+0xc80>
				{
					printstr("V0.5");
 800c1ac:	483d      	ldr	r0, [pc, #244]	; (800c2a4 <parse_commands+0xd6c>)
 800c1ae:	f001 f945 	bl	800d43c <printstr>
				  load_settings();
 800c1b2:	f000 fc21 	bl	800c9f8 <load_settings>
 800c1b6:	e2ce      	b.n	800c756 <parse_commands+0x121e>

				}
							else if (set_num == 15)
 800c1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1bc:	2b0f      	cmp	r3, #15
 800c1be:	d173      	bne.n	800c2a8 <parse_commands+0xd70>
			{
				uint8_t index_n=indexOf(buff_str,' ');
 800c1c0:	1d3b      	adds	r3, r7, #4
 800c1c2:	2120      	movs	r1, #32
 800c1c4:	6818      	ldr	r0, [r3, #0]
 800c1c6:	f7fb fd55 	bl	8007c74 <indexOf>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
				substring(buff_str, float_buff,index_n+1,last_s);
 800c1d0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800c1d4:	1c5a      	adds	r2, r3, #1
 800c1d6:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800c1da:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c1de:	1d38      	adds	r0, r7, #4
 800c1e0:	6800      	ldr	r0, [r0, #0]
 800c1e2:	f7fb fd91 	bl	8007d08 <substring>
				int n = atoi(float_buff);
 800c1e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f001 fb32 	bl	800d854 <atoi>
 800c1f0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
				for (int i =0; i<ARRAY_ACTIONS_SIZE; i++)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c1fa:	e03f      	b.n	800c27c <parse_commands+0xd44>
				{
				char str[50];
				sprintf(str,"step: %d,%.3f,%.3f,%.3f,%d\r",i,obj_drop_x[i],obj_drop_y[i],obj_drop_z[i],mode_motion[i]);
 800c1fc:	4a23      	ldr	r2, [pc, #140]	; (800c28c <parse_commands+0xd54>)
 800c1fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	4413      	add	r3, r2
 800c206:	edd3 7a00 	vldr	s15, [r3]
 800c20a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c20e:	4a20      	ldr	r2, [pc, #128]	; (800c290 <parse_commands+0xd58>)
 800c210:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	edd3 6a00 	vldr	s13, [r3]
 800c21c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800c220:	4a1c      	ldr	r2, [pc, #112]	; (800c294 <parse_commands+0xd5c>)
 800c222:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	4413      	add	r3, r2
 800c22a:	edd3 5a00 	vldr	s11, [r3]
 800c22e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800c232:	4a15      	ldr	r2, [pc, #84]	; (800c288 <parse_commands+0xd50>)
 800c234:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c23c:	f107 000c 	add.w	r0, r7, #12
 800c240:	9306      	str	r3, [sp, #24]
 800c242:	ed8d 5b04 	vstr	d5, [sp, #16]
 800c246:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c24a:	ed8d 7b00 	vstr	d7, [sp]
 800c24e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800c252:	4911      	ldr	r1, [pc, #68]	; (800c298 <parse_commands+0xd60>)
 800c254:	f001 fb34 	bl	800d8c0 <siprintf>
				printstr_(str);
 800c258:	f107 030c 	add.w	r3, r7, #12
 800c25c:	4618      	mov	r0, r3
 800c25e:	f001 f90f 	bl	800d480 <printstr_>
				if (mode_motion[i] == 2) break;
 800c262:	4a09      	ldr	r2, [pc, #36]	; (800c288 <parse_commands+0xd50>)
 800c264:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	f000 8271 	beq.w	800c754 <parse_commands+0x121c>
				for (int i =0; i<ARRAY_ACTIONS_SIZE; i++)
 800c272:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c276:	3301      	adds	r3, #1
 800c278:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800c27c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800c280:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c284:	dbba      	blt.n	800c1fc <parse_commands+0xcc4>
 800c286:	e266      	b.n	800c756 <parse_commands+0x121e>
 800c288:	24001454 	.word	0x24001454
 800c28c:	24001908 	.word	0x24001908
 800c290:	24000a90 	.word	0x24000a90
 800c294:	24000f40 	.word	0x24000f40
 800c298:	08010bf8 	.word	0x08010bf8
 800c29c:	08010c30 	.word	0x08010c30
 800c2a0:	08010c38 	.word	0x08010c38
 800c2a4:	08010c40 	.word	0x08010c40
				}

			}
					else if (set_num == 16)
 800c2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ac:	2b10      	cmp	r3, #16
 800c2ae:	f040 80c6 	bne.w	800c43e <parse_commands+0xf06>
			{

		    	uint8_t index_n=indexOf(buff_str,' ');
 800c2b2:	1d3b      	adds	r3, r7, #4
 800c2b4:	2120      	movs	r1, #32
 800c2b6:	6818      	ldr	r0, [r3, #0]
 800c2b8:	f7fb fcdc 	bl	8007c74 <indexOf>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	f887 30ee 	strb.w	r3, [r7, #238]	; 0xee
				uint8_t index_x=indexOf(buff_str,'x');
 800c2c2:	1d3b      	adds	r3, r7, #4
 800c2c4:	2178      	movs	r1, #120	; 0x78
 800c2c6:	6818      	ldr	r0, [r3, #0]
 800c2c8:	f7fb fcd4 	bl	8007c74 <indexOf>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	f887 30ed 	strb.w	r3, [r7, #237]	; 0xed
				uint8_t index_y=indexOf(buff_str,'y');
 800c2d2:	1d3b      	adds	r3, r7, #4
 800c2d4:	2179      	movs	r1, #121	; 0x79
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	f7fb fccc 	bl	8007c74 <indexOf>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
				uint8_t index_z=indexOf(buff_str,'z');
 800c2e2:	1d3b      	adds	r3, r7, #4
 800c2e4:	217a      	movs	r1, #122	; 0x7a
 800c2e6:	6818      	ldr	r0, [r3, #0]
 800c2e8:	f7fb fcc4 	bl	8007c74 <indexOf>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
				uint8_t index_f=indexOf(buff_str,'f');
 800c2f2:	1d3b      	adds	r3, r7, #4
 800c2f4:	2166      	movs	r1, #102	; 0x66
 800c2f6:	6818      	ldr	r0, [r3, #0]
 800c2f8:	f7fb fcbc 	bl	8007c74 <indexOf>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
				substring(buff_str, float_buff,index_n+1,index_x);
 800c302:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800c306:	1c5a      	adds	r2, r3, #1
 800c308:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800c30c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c310:	1d38      	adds	r0, r7, #4
 800c312:	6800      	ldr	r0, [r0, #0]
 800c314:	f7fb fcf8 	bl	8007d08 <substring>
				int n = atoi(float_buff);
 800c318:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c31c:	4618      	mov	r0, r3
 800c31e:	f001 fa99 	bl	800d854 <atoi>
 800c322:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
				substring(buff_str, float_buff,index_x+1,index_y);
 800c326:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800c32a:	1c5a      	adds	r2, r3, #1
 800c32c:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800c330:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c334:	1d38      	adds	r0, r7, #4
 800c336:	6800      	ldr	r0, [r0, #0]
 800c338:	f7fb fce6 	bl	8007d08 <substring>
				float val = atof(float_buff);
 800c33c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c340:	4618      	mov	r0, r3
 800c342:	f001 fa84 	bl	800d84e <atof>
 800c346:	eeb0 7b40 	vmov.f64	d7, d0
 800c34a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c34e:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				obj_drop_x[n] = val;
 800c352:	4ac2      	ldr	r2, [pc, #776]	; (800c65c <parse_commands+0x1124>)
 800c354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c360:	601a      	str	r2, [r3, #0]
				substring(buff_str, float_buff,index_y+1,index_z);
 800c362:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800c36c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c370:	1d38      	adds	r0, r7, #4
 800c372:	6800      	ldr	r0, [r0, #0]
 800c374:	f7fb fcc8 	bl	8007d08 <substring>
				val = atof(float_buff);
 800c378:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c37c:	4618      	mov	r0, r3
 800c37e:	f001 fa66 	bl	800d84e <atof>
 800c382:	eeb0 7b40 	vmov.f64	d7, d0
 800c386:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c38a:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				obj_drop_y[n] = val;
 800c38e:	4ab4      	ldr	r2, [pc, #720]	; (800c660 <parse_commands+0x1128>)
 800c390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4413      	add	r3, r2
 800c398:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c39c:	601a      	str	r2, [r3, #0]
				substring(buff_str, float_buff,index_z+1,index_f);
 800c39e:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 800c3a8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c3ac:	1d38      	adds	r0, r7, #4
 800c3ae:	6800      	ldr	r0, [r0, #0]
 800c3b0:	f7fb fcaa 	bl	8007d08 <substring>
				val = atof(float_buff);
 800c3b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f001 fa48 	bl	800d84e <atof>
 800c3be:	eeb0 7b40 	vmov.f64	d7, d0
 800c3c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c3c6:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0
				obj_drop_z[n] = val;
 800c3ca:	4aa6      	ldr	r2, [pc, #664]	; (800c664 <parse_commands+0x112c>)
 800c3cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c3d8:	601a      	str	r2, [r3, #0]
				substring(buff_str, float_buff,index_f+1,last_s);
 800c3da:	f897 30ea 	ldrb.w	r3, [r7, #234]	; 0xea
 800c3de:	1c5a      	adds	r2, r3, #1
 800c3e0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800c3e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c3e8:	1d38      	adds	r0, r7, #4
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	f7fb fc8c 	bl	8007d08 <substring>
				int flag = atoi(float_buff);
 800c3f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f001 fa2d 	bl	800d854 <atoi>
 800c3fa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
		    	mode_motion[n] = flag;
 800c3fe:	499a      	ldr	r1, [pc, #616]	; (800c668 <parse_commands+0x1130>)
 800c400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c404:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (n<100 && flag != 2)
 800c40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c410:	2b63      	cmp	r3, #99	; 0x63
 800c412:	f300 81a0 	bgt.w	800c756 <parse_commands+0x121e>
 800c416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	f000 819b 	beq.w	800c756 <parse_commands+0x121e>
				{
	 		  char buf[50];
					sprintf(buf,"stp_req: %d\r", n+1);
 800c420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	f107 030c 	add.w	r3, r7, #12
 800c42a:	4990      	ldr	r1, [pc, #576]	; (800c66c <parse_commands+0x1134>)
 800c42c:	4618      	mov	r0, r3
 800c42e:	f001 fa47 	bl	800d8c0 <siprintf>
		    printstr_(buf);
 800c432:	f107 030c 	add.w	r3, r7, #12
 800c436:	4618      	mov	r0, r3
 800c438:	f001 f822 	bl	800d480 <printstr_>
 800c43c:	e18b      	b.n	800c756 <parse_commands+0x121e>
				//	printstr_("stp_req ");printint(n+1);
				}
			}
				else if (set_num == 17)
 800c43e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c442:	2b11      	cmp	r3, #17
 800c444:	d11f      	bne.n	800c486 <parse_commands+0xf4e>
			{
				char str[50];
				sprintf(str,"curpos: %.3f,%.3f,%.3f\r",cur_x,cur_y,cur_z);
 800c446:	4b8a      	ldr	r3, [pc, #552]	; (800c670 <parse_commands+0x1138>)
 800c448:	edd3 7a00 	vldr	s15, [r3]
 800c44c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800c450:	4b88      	ldr	r3, [pc, #544]	; (800c674 <parse_commands+0x113c>)
 800c452:	edd3 7a00 	vldr	s15, [r3]
 800c456:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c45a:	4b87      	ldr	r3, [pc, #540]	; (800c678 <parse_commands+0x1140>)
 800c45c:	edd3 6a00 	vldr	s13, [r3]
 800c460:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800c464:	f107 000c 	add.w	r0, r7, #12
 800c468:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c46c:	ed8d 7b00 	vstr	d7, [sp]
 800c470:	ec53 2b15 	vmov	r2, r3, d5
 800c474:	4981      	ldr	r1, [pc, #516]	; (800c67c <parse_commands+0x1144>)
 800c476:	f001 fa23 	bl	800d8c0 <siprintf>
				printstr_(str);
 800c47a:	f107 030c 	add.w	r3, r7, #12
 800c47e:	4618      	mov	r0, r3
 800c480:	f000 fffe 	bl	800d480 <printstr_>
 800c484:	e167      	b.n	800c756 <parse_commands+0x121e>

			}
				else if (set_num == 18)
 800c486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c48a:	2b12      	cmp	r3, #18
 800c48c:	d105      	bne.n	800c49a <parse_commands+0xf62>
			{
				reset_seq_steps();
 800c48e:	f7fe fa51 	bl	800a934 <reset_seq_steps>
				printstr("reset_seq_steps");
 800c492:	487b      	ldr	r0, [pc, #492]	; (800c680 <parse_commands+0x1148>)
 800c494:	f000 ffd2 	bl	800d43c <printstr>
 800c498:	e15d      	b.n	800c756 <parse_commands+0x121e>

			}
				else if (set_num == 19)
 800c49a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c49e:	2b13      	cmp	r3, #19
 800c4a0:	d138      	bne.n	800c514 <parse_commands+0xfdc>
			{
					uint8_t index_n=indexOf(buff_str,' ');
 800c4a2:	1d3b      	adds	r3, r7, #4
 800c4a4:	2120      	movs	r1, #32
 800c4a6:	6818      	ldr	r0, [r3, #0]
 800c4a8:	f7fb fbe4 	bl	8007c74 <indexOf>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				//uint8_t index_f=indexOf(buff_str,'n');
				substring(buff_str, float_buff,index_n+1,last_s);
 800c4b2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800c4b6:	1c5a      	adds	r2, r3, #1
 800c4b8:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800c4bc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c4c0:	1d38      	adds	r0, r7, #4
 800c4c2:	6800      	ldr	r0, [r0, #0]
 800c4c4:	f7fb fc20 	bl	8007d08 <substring>
				flag_auto = atoi(float_buff);
 800c4c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f001 f9c1 	bl	800d854 <atoi>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	b2da      	uxtb	r2, r3
 800c4d6:	4b6b      	ldr	r3, [pc, #428]	; (800c684 <parse_commands+0x114c>)
 800c4d8:	701a      	strb	r2, [r3, #0]
				char str[50];
				sprintf(str,"auto_mode: %d\r",flag_auto);
 800c4da:	4b6a      	ldr	r3, [pc, #424]	; (800c684 <parse_commands+0x114c>)
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	f107 030c 	add.w	r3, r7, #12
 800c4e4:	4968      	ldr	r1, [pc, #416]	; (800c688 <parse_commands+0x1150>)
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f001 f9ea 	bl	800d8c0 <siprintf>
				printstr_(str);
 800c4ec:	f107 030c 	add.w	r3, r7, #12
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f000 ffc5 	bl	800d480 <printstr_>

				sprintf(str,"log: flag auto: %d\r",flag_auto);
 800c4f6:	4b63      	ldr	r3, [pc, #396]	; (800c684 <parse_commands+0x114c>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	f107 030c 	add.w	r3, r7, #12
 800c500:	4962      	ldr	r1, [pc, #392]	; (800c68c <parse_commands+0x1154>)
 800c502:	4618      	mov	r0, r3
 800c504:	f001 f9dc 	bl	800d8c0 <siprintf>
				printstr_(str);
 800c508:	f107 030c 	add.w	r3, r7, #12
 800c50c:	4618      	mov	r0, r3
 800c50e:	f000 ffb7 	bl	800d480 <printstr_>
 800c512:	e120      	b.n	800c756 <parse_commands+0x121e>

			}
				else if (set_num == 20)
 800c514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c518:	2b14      	cmp	r3, #20
 800c51a:	d13f      	bne.n	800c59c <parse_commands+0x1064>
			{
				uint8_t index_n=indexOf(buff_str,' ');
 800c51c:	1d3b      	adds	r3, r7, #4
 800c51e:	2120      	movs	r1, #32
 800c520:	6818      	ldr	r0, [r3, #0]
 800c522:	f7fb fba7 	bl	8007c74 <indexOf>
 800c526:	4603      	mov	r3, r0
 800c528:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
				substring(buff_str, float_buff,index_n+1,last_s);
 800c52c:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800c530:	1c5a      	adds	r2, r3, #1
 800c532:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800c536:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c53a:	1d38      	adds	r0, r7, #4
 800c53c:	6800      	ldr	r0, [r0, #0]
 800c53e:	f7fb fbe3 	bl	8007d08 <substring>
				int n = atoi(float_buff);
 800c542:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c546:	4618      	mov	r0, r3
 800c548:	f001 f984 	bl	800d854 <atoi>
 800c54c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
				for (int i =0; i<SETTING_SIZE; i++)
 800c550:	2300      	movs	r3, #0
 800c552:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c556:	e01c      	b.n	800c592 <parse_commands+0x105a>
				{
				char str[50];
				sprintf(str,"setting: %d,%.6f\r",i,setting[i]);
 800c558:	4a4d      	ldr	r2, [pc, #308]	; (800c690 <parse_commands+0x1158>)
 800c55a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	edd3 7a00 	vldr	s15, [r3]
 800c566:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c56a:	f107 030c 	add.w	r3, r7, #12
 800c56e:	ed8d 7b00 	vstr	d7, [sp]
 800c572:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800c576:	4947      	ldr	r1, [pc, #284]	; (800c694 <parse_commands+0x115c>)
 800c578:	4618      	mov	r0, r3
 800c57a:	f001 f9a1 	bl	800d8c0 <siprintf>
				printstr_(str);
 800c57e:	f107 030c 	add.w	r3, r7, #12
 800c582:	4618      	mov	r0, r3
 800c584:	f000 ff7c 	bl	800d480 <printstr_>
				for (int i =0; i<SETTING_SIZE; i++)
 800c588:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c58c:	3301      	adds	r3, #1
 800c58e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800c592:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800c596:	2b06      	cmp	r3, #6
 800c598:	ddde      	ble.n	800c558 <parse_commands+0x1020>
 800c59a:	e0dc      	b.n	800c756 <parse_commands+0x121e>
				}

			}
				else if (set_num == 21)
 800c59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a0:	2b15      	cmp	r3, #21
 800c5a2:	f040 80d8 	bne.w	800c756 <parse_commands+0x121e>
			{

		  	    uint8_t index_n=indexOf(buff_str,' ');
 800c5a6:	1d3b      	adds	r3, r7, #4
 800c5a8:	2120      	movs	r1, #32
 800c5aa:	6818      	ldr	r0, [r3, #0]
 800c5ac:	f7fb fb62 	bl	8007c74 <indexOf>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
				uint8_t index_x=indexOf(buff_str,'s');
 800c5b6:	1d3b      	adds	r3, r7, #4
 800c5b8:	2173      	movs	r1, #115	; 0x73
 800c5ba:	6818      	ldr	r0, [r3, #0]
 800c5bc:	f7fb fb5a 	bl	8007c74 <indexOf>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
				substring(buff_str, float_buff,index_n+1,index_x);
 800c5c6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800c5d0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c5d4:	1d38      	adds	r0, r7, #4
 800c5d6:	6800      	ldr	r0, [r0, #0]
 800c5d8:	f7fb fb96 	bl	8007d08 <substring>
				int n = atoi(float_buff);
 800c5dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f001 f937 	bl	800d854 <atoi>
 800c5e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
				substring(buff_str, float_buff,index_x+1,last_s);
 800c5ea:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 800c5ee:	1c5a      	adds	r2, r3, #1
 800c5f0:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800c5f4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c5f8:	1d38      	adds	r0, r7, #4
 800c5fa:	6800      	ldr	r0, [r0, #0]
 800c5fc:	f7fb fb84 	bl	8007d08 <substring>
				float val = atof(float_buff);
 800c600:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c604:	4618      	mov	r0, r3
 800c606:	f001 f922 	bl	800d84e <atof>
 800c60a:	eeb0 7b40 	vmov.f64	d7, d0
 800c60e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c612:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
				setting[n] = val;
 800c616:	4a1e      	ldr	r2, [pc, #120]	; (800c690 <parse_commands+0x1158>)
 800c618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c61c:	009b      	lsls	r3, r3, #2
 800c61e:	4413      	add	r3, r2
 800c620:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800c624:	601a      	str	r2, [r3, #0]
				if (n<SETTING_SIZE)
 800c626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c62a:	2b06      	cmp	r3, #6
 800c62c:	f300 8093 	bgt.w	800c756 <parse_commands+0x121e>
				{
				char buf[50];
	 		  	sprintf(buf,"sett_req: %d\r", n+1);
 800c630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c634:	1c5a      	adds	r2, r3, #1
 800c636:	f107 030c 	add.w	r3, r7, #12
 800c63a:	4917      	ldr	r1, [pc, #92]	; (800c698 <parse_commands+0x1160>)
 800c63c:	4618      	mov	r0, r3
 800c63e:	f001 f93f 	bl	800d8c0 <siprintf>
		        printstr_(buf);
 800c642:	f107 030c 	add.w	r3, r7, #12
 800c646:	4618      	mov	r0, r3
 800c648:	f000 ff1a 	bl	800d480 <printstr_>

		        if(n == SETTING_SIZE - 1) arrtoset(); //переносим из массива в переменные (костыль)
 800c64c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c650:	2b06      	cmp	r3, #6
 800c652:	f040 8080 	bne.w	800c756 <parse_commands+0x121e>
 800c656:	f000 f8b3 	bl	800c7c0 <arrtoset>
 800c65a:	e07c      	b.n	800c756 <parse_commands+0x121e>
 800c65c:	24001908 	.word	0x24001908
 800c660:	24000a90 	.word	0x24000a90
 800c664:	24000f40 	.word	0x24000f40
 800c668:	24001454 	.word	0x24001454
 800c66c:	08010c48 	.word	0x08010c48
 800c670:	2400081c 	.word	0x2400081c
 800c674:	240007fc 	.word	0x240007fc
 800c678:	24000800 	.word	0x24000800
 800c67c:	08010c58 	.word	0x08010c58
 800c680:	08010c70 	.word	0x08010c70
 800c684:	24000314 	.word	0x24000314
 800c688:	08010c80 	.word	0x08010c80
 800c68c:	08010c90 	.word	0x08010c90
 800c690:	24000a10 	.word	0x24000a10
 800c694:	08010ca4 	.word	0x08010ca4
 800c698:	08010cb8 	.word	0x08010cb8




	}
		else if(startsWith(buff_str,"o"))
 800c69c:	1d3b      	adds	r3, r7, #4
 800c69e:	4937      	ldr	r1, [pc, #220]	; (800c77c <parse_commands+0x1244>)
 800c6a0:	6818      	ldr	r0, [r3, #0]
 800c6a2:	f7fb fb09 	bl	8007cb8 <startsWith>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d054      	beq.n	800c756 <parse_commands+0x121e>
	{
		float x, y, z;
		uint8_t index_x=indexOf(buff_str,'x');
 800c6ac:	1d3b      	adds	r3, r7, #4
 800c6ae:	2178      	movs	r1, #120	; 0x78
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	f7fb fadf 	bl	8007c74 <indexOf>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		uint8_t index_y=indexOf(buff_str,'y');
 800c6bc:	1d3b      	adds	r3, r7, #4
 800c6be:	2179      	movs	r1, #121	; 0x79
 800c6c0:	6818      	ldr	r0, [r3, #0]
 800c6c2:	f7fb fad7 	bl	8007c74 <indexOf>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		//uint8_t index_z=indexOf(buff_str,'z');
		uint8_t last_s = length(buff_str);
 800c6cc:	1d3b      	adds	r3, r7, #4
 800c6ce:	6818      	ldr	r0, [r3, #0]
 800c6d0:	f7fb fa7e 	bl	8007bd0 <length>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		substring(buff_str, float_buff,index_x+1,index_y);
 800c6da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c6de:	1c5a      	adds	r2, r3, #1
 800c6e0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c6e4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c6e8:	1d38      	adds	r0, r7, #4
 800c6ea:	6800      	ldr	r0, [r0, #0]
 800c6ec:	f7fb fb0c 	bl	8007d08 <substring>
		x = atof(float_buff);
 800c6f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f001 f8aa 	bl	800d84e <atof>
 800c6fa:	eeb0 7b40 	vmov.f64	d7, d0
 800c6fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c702:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110

		substring(buff_str, float_buff,index_y+1,last_s);
 800c706:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800c710:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800c714:	1d38      	adds	r0, r7, #4
 800c716:	6800      	ldr	r0, [r0, #0]
 800c718:	f7fb faf6 	bl	8007d08 <substring>
		y = atof(float_buff);
 800c71c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c720:	4618      	mov	r0, r3
 800c722:	f001 f894 	bl	800d84e <atof>
 800c726:	eeb0 7b40 	vmov.f64	d7, d0
 800c72a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800c72e:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
		if (flag_auto == 1)add_object(x,y);
 800c732:	4b13      	ldr	r3, [pc, #76]	; (800c780 <parse_commands+0x1248>)
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d10d      	bne.n	800c756 <parse_commands+0x121e>
 800c73a:	edd7 0a43 	vldr	s1, [r7, #268]	; 0x10c
 800c73e:	ed97 0a44 	vldr	s0, [r7, #272]	; 0x110
 800c742:	f7fd fc41 	bl	8009fc8 <add_object>
 800c746:	e006      	b.n	800c756 <parse_commands+0x121e>
					if (mode_motion[i] == 2) break;
 800c748:	bf00      	nop
 800c74a:	e004      	b.n	800c756 <parse_commands+0x121e>
				if (mode_motion[i] == 2) break;
 800c74c:	bf00      	nop
 800c74e:	e002      	b.n	800c756 <parse_commands+0x121e>
				if (mode_motion[i] == 2) break;
 800c750:	bf00      	nop
 800c752:	e000      	b.n	800c756 <parse_commands+0x121e>
				if (mode_motion[i] == 2) break;
 800c754:	bf00      	nop

	}

	clearArray(float_buff,10);
 800c756:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c75a:	210a      	movs	r1, #10
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7fb fa6e 	bl	8007c3e <clearArray>
	flag_parse_serial_ua1 = BP_ERROR;
 800c762:	4b08      	ldr	r3, [pc, #32]	; (800c784 <parse_commands+0x124c>)
 800c764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	e002      	b.n	800c772 <parse_commands+0x123a>
			return;
 800c76c:	bf00      	nop
 800c76e:	e000      	b.n	800c772 <parse_commands+0x123a>
		return;
 800c770:	bf00      	nop
}
 800c772:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	08010ab0 	.word	0x08010ab0
 800c780:	24000314 	.word	0x24000314
 800c784:	2400038c 	.word	0x2400038c

0800c788 <msg_agent>:


char serial_string[150];
uint8_t flasg_send_str;
void msg_agent()
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	af00      	add	r7, sp, #0
	if (flasg_send_str==1)
 800c78c:	4b09      	ldr	r3, [pc, #36]	; (800c7b4 <msg_agent+0x2c>)
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	2b01      	cmp	r3, #1
 800c792:	d10c      	bne.n	800c7ae <msg_agent+0x26>
	{
	UART_TXD(serial_string);
 800c794:	4808      	ldr	r0, [pc, #32]	; (800c7b8 <msg_agent+0x30>)
 800c796:	f7fb fa1b 	bl	8007bd0 <length>
 800c79a:	4603      	mov	r3, r0
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	461a      	mov	r2, r3
 800c7a0:	4905      	ldr	r1, [pc, #20]	; (800c7b8 <msg_agent+0x30>)
 800c7a2:	4806      	ldr	r0, [pc, #24]	; (800c7bc <msg_agent+0x34>)
 800c7a4:	f7f8 f982 	bl	8004aac <HAL_UART_Transmit_DMA>
	flasg_send_str = 0;
 800c7a8:	4b02      	ldr	r3, [pc, #8]	; (800c7b4 <msg_agent+0x2c>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	701a      	strb	r2, [r3, #0]
	}
}
 800c7ae:	bf00      	nop
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	24001e84 	.word	0x24001e84
 800c7b8:	24001e88 	.word	0x24001e88
 800c7bc:	2400082c 	.word	0x2400082c

0800c7c0 <arrtoset>:
//write_flash32(A_ACCEL_CAPTURED, (uint32_t)accel_captur);
save_float(A_ZERO_X_LINE,zero_x_line);
printstr("settings saved");*/

void arrtoset()
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	af00      	add	r7, sp, #0
	l_rod = setting[0];
 800c7c4:	4b14      	ldr	r3, [pc, #80]	; (800c818 <arrtoset+0x58>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a14      	ldr	r2, [pc, #80]	; (800c81c <arrtoset+0x5c>)
 800c7ca:	6013      	str	r3, [r2, #0]
	zero_C = setting[1];
 800c7cc:	4b12      	ldr	r3, [pc, #72]	; (800c818 <arrtoset+0x58>)
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4a13      	ldr	r2, [pc, #76]	; (800c820 <arrtoset+0x60>)
 800c7d2:	6013      	str	r3, [r2, #0]
	z_before_capture = setting[2];
 800c7d4:	4b10      	ldr	r3, [pc, #64]	; (800c818 <arrtoset+0x58>)
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	4a12      	ldr	r2, [pc, #72]	; (800c824 <arrtoset+0x64>)
 800c7da:	6013      	str	r3, [r2, #0]
	z_capture = setting[3];
 800c7dc:	4b0e      	ldr	r3, [pc, #56]	; (800c818 <arrtoset+0x58>)
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	4a11      	ldr	r2, [pc, #68]	; (800c828 <arrtoset+0x68>)
 800c7e2:	6013      	str	r3, [r2, #0]
	z_past_capture = setting[4];
 800c7e4:	4b0c      	ldr	r3, [pc, #48]	; (800c818 <arrtoset+0x58>)
 800c7e6:	691b      	ldr	r3, [r3, #16]
 800c7e8:	4a10      	ldr	r2, [pc, #64]	; (800c82c <arrtoset+0x6c>)
 800c7ea:	6013      	str	r3, [r2, #0]
	//z_before_drop = setting[5];
	detection_line = setting[5];
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	; (800c818 <arrtoset+0x58>)
 800c7ee:	695b      	ldr	r3, [r3, #20]
 800c7f0:	4a0f      	ldr	r2, [pc, #60]	; (800c830 <arrtoset+0x70>)
 800c7f2:	6013      	str	r3, [r2, #0]
	accel_captur = (int)setting[6];
 800c7f4:	4b08      	ldr	r3, [pc, #32]	; (800c818 <arrtoset+0x58>)
 800c7f6:	edd3 7a06 	vldr	s15, [r3, #24]
 800c7fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7fe:	ee17 2a90 	vmov	r2, s15
 800c802:	4b0c      	ldr	r3, [pc, #48]	; (800c834 <arrtoset+0x74>)
 800c804:	601a      	str	r2, [r3, #0]
	zero_x_line = setting[7];
 800c806:	4b04      	ldr	r3, [pc, #16]	; (800c818 <arrtoset+0x58>)
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	4a0b      	ldr	r2, [pc, #44]	; (800c838 <arrtoset+0x78>)
 800c80c:	6013      	str	r3, [r2, #0]
}
 800c80e:	bf00      	nop
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	24000a10 	.word	0x24000a10
 800c81c:	24000008 	.word	0x24000008
 800c820:	24000038 	.word	0x24000038
 800c824:	24000078 	.word	0x24000078
 800c828:	2400007c 	.word	0x2400007c
 800c82c:	24000080 	.word	0x24000080
 800c830:	24000060 	.word	0x24000060
 800c834:	24000090 	.word	0x24000090
 800c838:	24000074 	.word	0x24000074

0800c83c <settoarr>:

void settoarr()
{
 800c83c:	b480      	push	{r7}
 800c83e:	af00      	add	r7, sp, #0
	 setting[0] = l_rod;
 800c840:	4b14      	ldr	r3, [pc, #80]	; (800c894 <settoarr+0x58>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	4a14      	ldr	r2, [pc, #80]	; (800c898 <settoarr+0x5c>)
 800c846:	6013      	str	r3, [r2, #0]
	 setting[1] = zero_C;
 800c848:	4b14      	ldr	r3, [pc, #80]	; (800c89c <settoarr+0x60>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a12      	ldr	r2, [pc, #72]	; (800c898 <settoarr+0x5c>)
 800c84e:	6053      	str	r3, [r2, #4]
	 setting[2] = z_before_capture;
 800c850:	4b13      	ldr	r3, [pc, #76]	; (800c8a0 <settoarr+0x64>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	4a10      	ldr	r2, [pc, #64]	; (800c898 <settoarr+0x5c>)
 800c856:	6093      	str	r3, [r2, #8]
	 setting[3] = z_capture;
 800c858:	4b12      	ldr	r3, [pc, #72]	; (800c8a4 <settoarr+0x68>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4a0e      	ldr	r2, [pc, #56]	; (800c898 <settoarr+0x5c>)
 800c85e:	60d3      	str	r3, [r2, #12]
	 setting[4] = z_past_capture;
 800c860:	4b11      	ldr	r3, [pc, #68]	; (800c8a8 <settoarr+0x6c>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a0c      	ldr	r2, [pc, #48]	; (800c898 <settoarr+0x5c>)
 800c866:	6113      	str	r3, [r2, #16]
	// setting[5] = z_before_drop;
	 setting[5] = detection_line;
 800c868:	4b10      	ldr	r3, [pc, #64]	; (800c8ac <settoarr+0x70>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a0a      	ldr	r2, [pc, #40]	; (800c898 <settoarr+0x5c>)
 800c86e:	6153      	str	r3, [r2, #20]
	 setting[6] = (float)accel_captur;
 800c870:	4b0f      	ldr	r3, [pc, #60]	; (800c8b0 <settoarr+0x74>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	ee07 3a90 	vmov	s15, r3
 800c878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c87c:	4b06      	ldr	r3, [pc, #24]	; (800c898 <settoarr+0x5c>)
 800c87e:	edc3 7a06 	vstr	s15, [r3, #24]
	 setting[7] = zero_x_line;
 800c882:	4b0c      	ldr	r3, [pc, #48]	; (800c8b4 <settoarr+0x78>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a04      	ldr	r2, [pc, #16]	; (800c898 <settoarr+0x5c>)
 800c888:	61d3      	str	r3, [r2, #28]
}
 800c88a:	bf00      	nop
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr
 800c894:	24000008 	.word	0x24000008
 800c898:	24000a10 	.word	0x24000a10
 800c89c:	24000038 	.word	0x24000038
 800c8a0:	24000078 	.word	0x24000078
 800c8a4:	2400007c 	.word	0x2400007c
 800c8a8:	24000080 	.word	0x24000080
 800c8ac:	24000060 	.word	0x24000060
 800c8b0:	24000090 	.word	0x24000090
 800c8b4:	24000074 	.word	0x24000074

0800c8b8 <save_data>:

void save_data()
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
	flash_earse(FLASH_SECTOR);	 //очищаем весь сектор т.к. он один на все сохраняемые данные
 800c8bc:	200f      	movs	r0, #15
 800c8be:	f7fc fca7 	bl	8009210 <flash_earse>
	settoarr();
 800c8c2:	f7ff ffbb 	bl	800c83c <settoarr>
	save_obj_drop_coord();
 800c8c6:	f000 f809 	bl	800c8dc <save_obj_drop_coord>
	save_settings();
 800c8ca:	f000 f883 	bl	800c9d4 <save_settings>
	printstr("data eeprom saved");
 800c8ce:	4802      	ldr	r0, [pc, #8]	; (800c8d8 <save_data+0x20>)
 800c8d0:	f000 fdb4 	bl	800d43c <printstr>
}
 800c8d4:	bf00      	nop
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	08010cc8 	.word	0x08010cc8

0800c8dc <save_obj_drop_coord>:

uint8_t save_obj_drop_coord()
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	af00      	add	r7, sp, #0

	if(save_array(obj_drop_x, ARRAY_ACTIONS_SIZE, A_X_DROPCOORD) == 0) return 0;
 800c8e0:	4a1d      	ldr	r2, [pc, #116]	; (800c958 <save_obj_drop_coord+0x7c>)
 800c8e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c8e6:	481d      	ldr	r0, [pc, #116]	; (800c95c <save_obj_drop_coord+0x80>)
 800c8e8:	f7fc fbe4 	bl	80090b4 <save_array>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	f083 0301 	eor.w	r3, r3, #1
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d001      	beq.n	800c8fc <save_obj_drop_coord+0x20>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	e02a      	b.n	800c952 <save_obj_drop_coord+0x76>
	if(save_array(obj_drop_y, ARRAY_ACTIONS_SIZE, A_Y_DROPCOORD) == 0) return 0;
 800c8fc:	4a18      	ldr	r2, [pc, #96]	; (800c960 <save_obj_drop_coord+0x84>)
 800c8fe:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c902:	4818      	ldr	r0, [pc, #96]	; (800c964 <save_obj_drop_coord+0x88>)
 800c904:	f7fc fbd6 	bl	80090b4 <save_array>
 800c908:	4603      	mov	r3, r0
 800c90a:	f083 0301 	eor.w	r3, r3, #1
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d001      	beq.n	800c918 <save_obj_drop_coord+0x3c>
 800c914:	2300      	movs	r3, #0
 800c916:	e01c      	b.n	800c952 <save_obj_drop_coord+0x76>
	if(save_array(obj_drop_z, ARRAY_ACTIONS_SIZE, A_Z_DROPCOORD) == 0) return 0;
 800c918:	4a13      	ldr	r2, [pc, #76]	; (800c968 <save_obj_drop_coord+0x8c>)
 800c91a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c91e:	4813      	ldr	r0, [pc, #76]	; (800c96c <save_obj_drop_coord+0x90>)
 800c920:	f7fc fbc8 	bl	80090b4 <save_array>
 800c924:	4603      	mov	r3, r0
 800c926:	f083 0301 	eor.w	r3, r3, #1
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <save_obj_drop_coord+0x58>
 800c930:	2300      	movs	r3, #0
 800c932:	e00e      	b.n	800c952 <save_obj_drop_coord+0x76>
	if(save_array(mode_motion, ARRAY_ACTIONS_SIZE, A_MODE_MOTION) == 0) return 0;
 800c934:	4a0e      	ldr	r2, [pc, #56]	; (800c970 <save_obj_drop_coord+0x94>)
 800c936:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c93a:	480e      	ldr	r0, [pc, #56]	; (800c974 <save_obj_drop_coord+0x98>)
 800c93c:	f7fc fbba 	bl	80090b4 <save_array>
 800c940:	4603      	mov	r3, r0
 800c942:	f083 0301 	eor.w	r3, r3, #1
 800c946:	b2db      	uxtb	r3, r3
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d001      	beq.n	800c950 <save_obj_drop_coord+0x74>
 800c94c:	2300      	movs	r3, #0
 800c94e:	e000      	b.n	800c952 <save_obj_drop_coord+0x76>
 return true;
 800c950:	2301      	movs	r3, #1
}
 800c952:	4618      	mov	r0, r3
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	081e6400 	.word	0x081e6400
 800c95c:	24001908 	.word	0x24001908
 800c960:	081ec800 	.word	0x081ec800
 800c964:	24000a90 	.word	0x24000a90
 800c968:	081f2c00 	.word	0x081f2c00
 800c96c:	24000f40 	.word	0x24000f40
 800c970:	081f9000 	.word	0x081f9000
 800c974:	24001454 	.word	0x24001454

0800c978 <load_obj_drop_coord>:

uint8_t load_obj_drop_coord()
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	af00      	add	r7, sp, #0
	read_array_float(obj_drop_x, ARRAY_ACTIONS_SIZE, A_X_DROPCOORD);
 800c97c:	4a0d      	ldr	r2, [pc, #52]	; (800c9b4 <load_obj_drop_coord+0x3c>)
 800c97e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c982:	480d      	ldr	r0, [pc, #52]	; (800c9b8 <load_obj_drop_coord+0x40>)
 800c984:	f7fc fbe4 	bl	8009150 <read_array_float>
	read_array_float(obj_drop_y, ARRAY_ACTIONS_SIZE, A_Y_DROPCOORD);
 800c988:	4a0c      	ldr	r2, [pc, #48]	; (800c9bc <load_obj_drop_coord+0x44>)
 800c98a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c98e:	480c      	ldr	r0, [pc, #48]	; (800c9c0 <load_obj_drop_coord+0x48>)
 800c990:	f7fc fbde 	bl	8009150 <read_array_float>
	read_array_float(obj_drop_z, ARRAY_ACTIONS_SIZE, A_Z_DROPCOORD);
 800c994:	4a0b      	ldr	r2, [pc, #44]	; (800c9c4 <load_obj_drop_coord+0x4c>)
 800c996:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c99a:	480b      	ldr	r0, [pc, #44]	; (800c9c8 <load_obj_drop_coord+0x50>)
 800c99c:	f7fc fbd8 	bl	8009150 <read_array_float>
	read_array_int(mode_motion, ARRAY_ACTIONS_SIZE, A_MODE_MOTION);
 800c9a0:	4a0a      	ldr	r2, [pc, #40]	; (800c9cc <load_obj_drop_coord+0x54>)
 800c9a2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800c9a6:	480a      	ldr	r0, [pc, #40]	; (800c9d0 <load_obj_drop_coord+0x58>)
 800c9a8:	f7fc fbae 	bl	8009108 <read_array_int>
}
 800c9ac:	bf00      	nop
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop
 800c9b4:	081e6400 	.word	0x081e6400
 800c9b8:	24001908 	.word	0x24001908
 800c9bc:	081ec800 	.word	0x081ec800
 800c9c0:	24000a90 	.word	0x24000a90
 800c9c4:	081f2c00 	.word	0x081f2c00
 800c9c8:	24000f40 	.word	0x24000f40
 800c9cc:	081f9000 	.word	0x081f9000
 800c9d0:	24001454 	.word	0x24001454

0800c9d4 <save_settings>:

void save_settings()
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	af00      	add	r7, sp, #0
	if(save_array(setting, SETTING_SIZE, A_SETTINGS) == 0) return 0;
 800c9d8:	4a05      	ldr	r2, [pc, #20]	; (800c9f0 <save_settings+0x1c>)
 800c9da:	2107      	movs	r1, #7
 800c9dc:	4805      	ldr	r0, [pc, #20]	; (800c9f4 <save_settings+0x20>)
 800c9de:	f7fc fb69 	bl	80090b4 <save_array>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	f083 0301 	eor.w	r3, r3, #1
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	2b00      	cmp	r3, #0
 return true;
 800c9ec:	bf00      	nop



}
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	081e0000 	.word	0x081e0000
 800c9f4:	24000a10 	.word	0x24000a10

0800c9f8 <load_settings>:

void load_settings()
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b098      	sub	sp, #96	; 0x60
 800c9fc:	af08      	add	r7, sp, #32



	read_array_float(setting, SETTING_SIZE, A_SETTINGS);
 800c9fe:	4a94      	ldr	r2, [pc, #592]	; (800cc50 <load_settings+0x258>)
 800ca00:	2107      	movs	r1, #7
 800ca02:	4894      	ldr	r0, [pc, #592]	; (800cc54 <load_settings+0x25c>)
 800ca04:	f7fc fba4 	bl	8009150 <read_array_float>
	arrtoset();
 800ca08:	f7ff feda 	bl	800c7c0 <arrtoset>
	for (int i = 0; i<SETTING_SIZE; i++)
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca10:	e01c      	b.n	800ca4c <load_settings+0x54>
				{
				char str[50];
				sprintf(str,"setting: %d,%.3f\r",i,setting[i]);
 800ca12:	4a90      	ldr	r2, [pc, #576]	; (800cc54 <load_settings+0x25c>)
 800ca14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	4413      	add	r3, r2
 800ca1a:	edd3 7a00 	vldr	s15, [r3]
 800ca1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ca22:	1d3b      	adds	r3, r7, #4
 800ca24:	ed8d 7b00 	vstr	d7, [sp]
 800ca28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca2a:	498b      	ldr	r1, [pc, #556]	; (800cc58 <load_settings+0x260>)
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f000 ff47 	bl	800d8c0 <siprintf>
				printstr_(str);
 800ca32:	1d3b      	adds	r3, r7, #4
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 fd23 	bl	800d480 <printstr_>
				if (mode_motion[i] == 2) break;
 800ca3a:	4a88      	ldr	r2, [pc, #544]	; (800cc5c <load_settings+0x264>)
 800ca3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca42:	2b02      	cmp	r3, #2
 800ca44:	d006      	beq.n	800ca54 <load_settings+0x5c>
	for (int i = 0; i<SETTING_SIZE; i++)
 800ca46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca48:	3301      	adds	r3, #1
 800ca4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca4e:	2b06      	cmp	r3, #6
 800ca50:	dddf      	ble.n	800ca12 <load_settings+0x1a>
 800ca52:	e000      	b.n	800ca56 <load_settings+0x5e>
				if (mode_motion[i] == 2) break;
 800ca54:	bf00      	nop
				}

	printstr("load settings:");
 800ca56:	4882      	ldr	r0, [pc, #520]	; (800cc60 <load_settings+0x268>)
 800ca58:	f000 fcf0 	bl	800d43c <printstr>
	UART_TX("l_rod: ");
 800ca5c:	4881      	ldr	r0, [pc, #516]	; (800cc64 <load_settings+0x26c>)
 800ca5e:	f7fb f8b7 	bl	8007bd0 <length>
 800ca62:	4603      	mov	r3, r0
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca6a:	497e      	ldr	r1, [pc, #504]	; (800cc64 <load_settings+0x26c>)
 800ca6c:	487e      	ldr	r0, [pc, #504]	; (800cc68 <load_settings+0x270>)
 800ca6e:	f7f7 feaf 	bl	80047d0 <HAL_UART_Transmit>
	printfloat(l_rod);
 800ca72:	4b7e      	ldr	r3, [pc, #504]	; (800cc6c <load_settings+0x274>)
 800ca74:	edd3 7a00 	vldr	s15, [r3]
 800ca78:	eeb0 0a67 	vmov.f32	s0, s15
 800ca7c:	f000 fd16 	bl	800d4ac <printfloat>
	UART_TX("zero_C: ");
 800ca80:	487b      	ldr	r0, [pc, #492]	; (800cc70 <load_settings+0x278>)
 800ca82:	f7fb f8a5 	bl	8007bd0 <length>
 800ca86:	4603      	mov	r3, r0
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca8e:	4978      	ldr	r1, [pc, #480]	; (800cc70 <load_settings+0x278>)
 800ca90:	4875      	ldr	r0, [pc, #468]	; (800cc68 <load_settings+0x270>)
 800ca92:	f7f7 fe9d 	bl	80047d0 <HAL_UART_Transmit>
	printfloat(zero_C);
 800ca96:	4b77      	ldr	r3, [pc, #476]	; (800cc74 <load_settings+0x27c>)
 800ca98:	edd3 7a00 	vldr	s15, [r3]
 800ca9c:	eeb0 0a67 	vmov.f32	s0, s15
 800caa0:	f000 fd04 	bl	800d4ac <printfloat>
	UART_TX("z_before_capture: ");
 800caa4:	4874      	ldr	r0, [pc, #464]	; (800cc78 <load_settings+0x280>)
 800caa6:	f7fb f893 	bl	8007bd0 <length>
 800caaa:	4603      	mov	r3, r0
 800caac:	b29a      	uxth	r2, r3
 800caae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cab2:	4971      	ldr	r1, [pc, #452]	; (800cc78 <load_settings+0x280>)
 800cab4:	486c      	ldr	r0, [pc, #432]	; (800cc68 <load_settings+0x270>)
 800cab6:	f7f7 fe8b 	bl	80047d0 <HAL_UART_Transmit>
	printfloat(z_before_capture);
 800caba:	4b70      	ldr	r3, [pc, #448]	; (800cc7c <load_settings+0x284>)
 800cabc:	edd3 7a00 	vldr	s15, [r3]
 800cac0:	eeb0 0a67 	vmov.f32	s0, s15
 800cac4:	f000 fcf2 	bl	800d4ac <printfloat>
	UART_TX("z_capture: ");
 800cac8:	486d      	ldr	r0, [pc, #436]	; (800cc80 <load_settings+0x288>)
 800caca:	f7fb f881 	bl	8007bd0 <length>
 800cace:	4603      	mov	r3, r0
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cad6:	496a      	ldr	r1, [pc, #424]	; (800cc80 <load_settings+0x288>)
 800cad8:	4863      	ldr	r0, [pc, #396]	; (800cc68 <load_settings+0x270>)
 800cada:	f7f7 fe79 	bl	80047d0 <HAL_UART_Transmit>
	printfloat(z_capture);
 800cade:	4b69      	ldr	r3, [pc, #420]	; (800cc84 <load_settings+0x28c>)
 800cae0:	edd3 7a00 	vldr	s15, [r3]
 800cae4:	eeb0 0a67 	vmov.f32	s0, s15
 800cae8:	f000 fce0 	bl	800d4ac <printfloat>
	UART_TX("z_past_capture: ");
 800caec:	4866      	ldr	r0, [pc, #408]	; (800cc88 <load_settings+0x290>)
 800caee:	f7fb f86f 	bl	8007bd0 <length>
 800caf2:	4603      	mov	r3, r0
 800caf4:	b29a      	uxth	r2, r3
 800caf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cafa:	4963      	ldr	r1, [pc, #396]	; (800cc88 <load_settings+0x290>)
 800cafc:	485a      	ldr	r0, [pc, #360]	; (800cc68 <load_settings+0x270>)
 800cafe:	f7f7 fe67 	bl	80047d0 <HAL_UART_Transmit>
	printfloat(z_past_capture);
 800cb02:	4b62      	ldr	r3, [pc, #392]	; (800cc8c <load_settings+0x294>)
 800cb04:	edd3 7a00 	vldr	s15, [r3]
 800cb08:	eeb0 0a67 	vmov.f32	s0, s15
 800cb0c:	f000 fcce 	bl	800d4ac <printfloat>
	UART_TX("z_before_drop: ");
 800cb10:	485f      	ldr	r0, [pc, #380]	; (800cc90 <load_settings+0x298>)
 800cb12:	f7fb f85d 	bl	8007bd0 <length>
 800cb16:	4603      	mov	r3, r0
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb1e:	495c      	ldr	r1, [pc, #368]	; (800cc90 <load_settings+0x298>)
 800cb20:	4851      	ldr	r0, [pc, #324]	; (800cc68 <load_settings+0x270>)
 800cb22:	f7f7 fe55 	bl	80047d0 <HAL_UART_Transmit>
	printfloat(z_before_drop);
 800cb26:	4b5b      	ldr	r3, [pc, #364]	; (800cc94 <load_settings+0x29c>)
 800cb28:	edd3 7a00 	vldr	s15, [r3]
 800cb2c:	eeb0 0a67 	vmov.f32	s0, s15
 800cb30:	f000 fcbc 	bl	800d4ac <printfloat>
	UART_TX("capture_line: ");
 800cb34:	4858      	ldr	r0, [pc, #352]	; (800cc98 <load_settings+0x2a0>)
 800cb36:	f7fb f84b 	bl	8007bd0 <length>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	b29a      	uxth	r2, r3
 800cb3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb42:	4955      	ldr	r1, [pc, #340]	; (800cc98 <load_settings+0x2a0>)
 800cb44:	4848      	ldr	r0, [pc, #288]	; (800cc68 <load_settings+0x270>)
 800cb46:	f7f7 fe43 	bl	80047d0 <HAL_UART_Transmit>
	printfloat(capture_line);
 800cb4a:	4b54      	ldr	r3, [pc, #336]	; (800cc9c <load_settings+0x2a4>)
 800cb4c:	edd3 7a00 	vldr	s15, [r3]
 800cb50:	eeb0 0a67 	vmov.f32	s0, s15
 800cb54:	f000 fcaa 	bl	800d4ac <printfloat>
	UART_TX("detection_line: ");
 800cb58:	4851      	ldr	r0, [pc, #324]	; (800cca0 <load_settings+0x2a8>)
 800cb5a:	f7fb f839 	bl	8007bd0 <length>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb66:	494e      	ldr	r1, [pc, #312]	; (800cca0 <load_settings+0x2a8>)
 800cb68:	483f      	ldr	r0, [pc, #252]	; (800cc68 <load_settings+0x270>)
 800cb6a:	f7f7 fe31 	bl	80047d0 <HAL_UART_Transmit>
	printfloat(detection_line);
 800cb6e:	4b4d      	ldr	r3, [pc, #308]	; (800cca4 <load_settings+0x2ac>)
 800cb70:	edd3 7a00 	vldr	s15, [r3]
 800cb74:	eeb0 0a67 	vmov.f32	s0, s15
 800cb78:	f000 fc98 	bl	800d4ac <printfloat>
	UART_TX("accel_captur: ");
 800cb7c:	484a      	ldr	r0, [pc, #296]	; (800cca8 <load_settings+0x2b0>)
 800cb7e:	f7fb f827 	bl	8007bd0 <length>
 800cb82:	4603      	mov	r3, r0
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb8a:	4947      	ldr	r1, [pc, #284]	; (800cca8 <load_settings+0x2b0>)
 800cb8c:	4836      	ldr	r0, [pc, #216]	; (800cc68 <load_settings+0x270>)
 800cb8e:	f7f7 fe1f 	bl	80047d0 <HAL_UART_Transmit>
	printint(accel_captur);
 800cb92:	4b46      	ldr	r3, [pc, #280]	; (800ccac <load_settings+0x2b4>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f000 fc24 	bl	800d3e4 <printint>
	UART_TX("zero_x_line: ");
 800cb9c:	4844      	ldr	r0, [pc, #272]	; (800ccb0 <load_settings+0x2b8>)
 800cb9e:	f7fb f817 	bl	8007bd0 <length>
 800cba2:	4603      	mov	r3, r0
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbaa:	4941      	ldr	r1, [pc, #260]	; (800ccb0 <load_settings+0x2b8>)
 800cbac:	482e      	ldr	r0, [pc, #184]	; (800cc68 <load_settings+0x270>)
 800cbae:	f7f7 fe0f 	bl	80047d0 <HAL_UART_Transmit>
	printfloat(zero_x_line);
 800cbb2:	4b40      	ldr	r3, [pc, #256]	; (800ccb4 <load_settings+0x2bc>)
 800cbb4:	edd3 7a00 	vldr	s15, [r3]
 800cbb8:	eeb0 0a67 	vmov.f32	s0, s15
 800cbbc:	f000 fc76 	bl	800d4ac <printfloat>



	load_obj_drop_coord();
 800cbc0:	f7ff feda 	bl	800c978 <load_obj_drop_coord>

	printstr("data loaded");
 800cbc4:	483c      	ldr	r0, [pc, #240]	; (800ccb8 <load_settings+0x2c0>)
 800cbc6:	f000 fc39 	bl	800d43c <printstr>

	for (int i = 0; i<ARRAY_ACTIONS_SIZE; i++)
 800cbca:	2300      	movs	r3, #0
 800cbcc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbce:	e036      	b.n	800cc3e <load_settings+0x246>
				{
				char str[50];
				sprintf(str,"step: %d,%.3f,%.3f,%.3f,%d\r",i,obj_drop_x[i],obj_drop_y[i],obj_drop_z[i],mode_motion[i]);
 800cbd0:	4a3a      	ldr	r2, [pc, #232]	; (800ccbc <load_settings+0x2c4>)
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	4413      	add	r3, r2
 800cbd8:	edd3 7a00 	vldr	s15, [r3]
 800cbdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800cbe0:	4a37      	ldr	r2, [pc, #220]	; (800ccc0 <load_settings+0x2c8>)
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	edd3 6a00 	vldr	s13, [r3]
 800cbec:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800cbf0:	4a34      	ldr	r2, [pc, #208]	; (800ccc4 <load_settings+0x2cc>)
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4413      	add	r3, r2
 800cbf8:	edd3 5a00 	vldr	s11, [r3]
 800cbfc:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800cc00:	4a16      	ldr	r2, [pc, #88]	; (800cc5c <load_settings+0x264>)
 800cc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc08:	1d38      	adds	r0, r7, #4
 800cc0a:	9306      	str	r3, [sp, #24]
 800cc0c:	ed8d 5b04 	vstr	d5, [sp, #16]
 800cc10:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cc14:	ed8d 7b00 	vstr	d7, [sp]
 800cc18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc1a:	492b      	ldr	r1, [pc, #172]	; (800ccc8 <load_settings+0x2d0>)
 800cc1c:	f000 fe50 	bl	800d8c0 <siprintf>
				printstr_(str);
 800cc20:	1d3b      	adds	r3, r7, #4
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 fc2c 	bl	800d480 <printstr_>
				if (mode_motion[i] == 2) break;
 800cc28:	4a0c      	ldr	r2, [pc, #48]	; (800cc5c <load_settings+0x264>)
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	d101      	bne.n	800cc38 <load_settings+0x240>
 800cc34:	bf00      	nop
				}



}
 800cc36:	e006      	b.n	800cc46 <load_settings+0x24e>
	for (int i = 0; i<ARRAY_ACTIONS_SIZE; i++)
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cc44:	dbc4      	blt.n	800cbd0 <load_settings+0x1d8>
}
 800cc46:	bf00      	nop
 800cc48:	3740      	adds	r7, #64	; 0x40
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	081e0000 	.word	0x081e0000
 800cc54:	24000a10 	.word	0x24000a10
 800cc58:	08010cdc 	.word	0x08010cdc
 800cc5c:	24001454 	.word	0x24001454
 800cc60:	08010cf0 	.word	0x08010cf0
 800cc64:	08010d00 	.word	0x08010d00
 800cc68:	2400082c 	.word	0x2400082c
 800cc6c:	24000008 	.word	0x24000008
 800cc70:	08010d08 	.word	0x08010d08
 800cc74:	24000038 	.word	0x24000038
 800cc78:	08010d14 	.word	0x08010d14
 800cc7c:	24000078 	.word	0x24000078
 800cc80:	08010d28 	.word	0x08010d28
 800cc84:	2400007c 	.word	0x2400007c
 800cc88:	08010d34 	.word	0x08010d34
 800cc8c:	24000080 	.word	0x24000080
 800cc90:	08010d48 	.word	0x08010d48
 800cc94:	24000084 	.word	0x24000084
 800cc98:	08010d58 	.word	0x08010d58
 800cc9c:	24000064 	.word	0x24000064
 800cca0:	08010d68 	.word	0x08010d68
 800cca4:	24000060 	.word	0x24000060
 800cca8:	08010d7c 	.word	0x08010d7c
 800ccac:	24000090 	.word	0x24000090
 800ccb0:	08010d8c 	.word	0x08010d8c
 800ccb4:	24000074 	.word	0x24000074
 800ccb8:	08010d9c 	.word	0x08010d9c
 800ccbc:	24001908 	.word	0x24001908
 800ccc0:	24000a90 	.word	0x24000a90
 800ccc4:	24000f40 	.word	0x24000f40
 800ccc8:	08010da8 	.word	0x08010da8

0800cccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ccd2:	4b0a      	ldr	r3, [pc, #40]	; (800ccfc <HAL_MspInit+0x30>)
 800ccd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ccd8:	4a08      	ldr	r2, [pc, #32]	; (800ccfc <HAL_MspInit+0x30>)
 800ccda:	f043 0302 	orr.w	r3, r3, #2
 800ccde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cce2:	4b06      	ldr	r3, [pc, #24]	; (800ccfc <HAL_MspInit+0x30>)
 800cce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cce8:	f003 0302 	and.w	r3, r3, #2
 800ccec:	607b      	str	r3, [r7, #4]
 800ccee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	58024400 	.word	0x58024400

0800cd00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a0e      	ldr	r2, [pc, #56]	; (800cd48 <HAL_TIM_Base_MspInit+0x48>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d116      	bne.n	800cd40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800cd12:	4b0e      	ldr	r3, [pc, #56]	; (800cd4c <HAL_TIM_Base_MspInit+0x4c>)
 800cd14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd18:	4a0c      	ldr	r2, [pc, #48]	; (800cd4c <HAL_TIM_Base_MspInit+0x4c>)
 800cd1a:	f043 0310 	orr.w	r3, r3, #16
 800cd1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cd22:	4b0a      	ldr	r3, [pc, #40]	; (800cd4c <HAL_TIM_Base_MspInit+0x4c>)
 800cd24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd28:	f003 0310 	and.w	r3, r3, #16
 800cd2c:	60fb      	str	r3, [r7, #12]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800cd30:	2200      	movs	r2, #0
 800cd32:	2100      	movs	r1, #0
 800cd34:	2036      	movs	r0, #54	; 0x36
 800cd36:	f7f3 fe42 	bl	80009be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800cd3a:	2036      	movs	r0, #54	; 0x36
 800cd3c:	f7f3 fe59 	bl	80009f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800cd40:	bf00      	nop
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	40001000 	.word	0x40001000
 800cd4c:	58024400 	.word	0x58024400

0800cd50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b08e      	sub	sp, #56	; 0x38
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	601a      	str	r2, [r3, #0]
 800cd60:	605a      	str	r2, [r3, #4]
 800cd62:	609a      	str	r2, [r3, #8]
 800cd64:	60da      	str	r2, [r3, #12]
 800cd66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a7a      	ldr	r2, [pc, #488]	; (800cf58 <HAL_UART_MspInit+0x208>)
 800cd6e:	4293      	cmp	r3, r2
 800cd70:	d147      	bne.n	800ce02 <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800cd72:	4b7a      	ldr	r3, [pc, #488]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cd74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd78:	4a78      	ldr	r2, [pc, #480]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cd7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800cd82:	4b76      	ldr	r3, [pc, #472]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cd84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cd88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd8c:	623b      	str	r3, [r7, #32]
 800cd8e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd90:	4b72      	ldr	r3, [pc, #456]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cd92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cd96:	4a71      	ldr	r2, [pc, #452]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cd98:	f043 0301 	orr.w	r3, r3, #1
 800cd9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cda0:	4b6e      	ldr	r3, [pc, #440]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cda2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cda6:	f003 0301 	and.w	r3, r3, #1
 800cdaa:	61fb      	str	r3, [r7, #28]
 800cdac:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdb2:	2302      	movs	r3, #2
 800cdb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800cdbe:	2308      	movs	r3, #8
 800cdc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cdc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	4865      	ldr	r0, [pc, #404]	; (800cf60 <HAL_UART_MspInit+0x210>)
 800cdca:	f7f4 fdc3 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800cdce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cddc:	2300      	movs	r3, #0
 800cdde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800cde0:	2306      	movs	r3, #6
 800cde2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cde4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cde8:	4619      	mov	r1, r3
 800cdea:	485d      	ldr	r0, [pc, #372]	; (800cf60 <HAL_UART_MspInit+0x210>)
 800cdec:	f7f4 fdb2 	bl	8001954 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	2034      	movs	r0, #52	; 0x34
 800cdf6:	f7f3 fde2 	bl	80009be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800cdfa:	2034      	movs	r0, #52	; 0x34
 800cdfc:	f7f3 fdf9 	bl	80009f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800ce00:	e0a6      	b.n	800cf50 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART1)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a57      	ldr	r2, [pc, #348]	; (800cf64 <HAL_UART_MspInit+0x214>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d147      	bne.n	800ce9c <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800ce0c:	4b53      	ldr	r3, [pc, #332]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ce0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce12:	4a52      	ldr	r2, [pc, #328]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ce14:	f043 0310 	orr.w	r3, r3, #16
 800ce18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800ce1c:	4b4f      	ldr	r3, [pc, #316]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ce1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ce22:	f003 0310 	and.w	r3, r3, #16
 800ce26:	61bb      	str	r3, [r7, #24]
 800ce28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ce2a:	4b4c      	ldr	r3, [pc, #304]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ce2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce30:	4a4a      	ldr	r2, [pc, #296]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ce32:	f043 0302 	orr.w	r3, r3, #2
 800ce36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ce3a:	4b48      	ldr	r3, [pc, #288]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ce3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ce40:	f003 0302 	and.w	r3, r3, #2
 800ce44:	617b      	str	r3, [r7, #20]
 800ce46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800ce48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce4e:	2302      	movs	r3, #2
 800ce50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce52:	2300      	movs	r3, #0
 800ce54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce56:	2300      	movs	r3, #0
 800ce58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800ce5a:	2304      	movs	r3, #4
 800ce5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce62:	4619      	mov	r1, r3
 800ce64:	4840      	ldr	r0, [pc, #256]	; (800cf68 <HAL_UART_MspInit+0x218>)
 800ce66:	f7f4 fd75 	bl	8001954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ce6a:	2340      	movs	r3, #64	; 0x40
 800ce6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce6e:	2302      	movs	r3, #2
 800ce70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce72:	2300      	movs	r3, #0
 800ce74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce76:	2300      	movs	r3, #0
 800ce78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ce7a:	2307      	movs	r3, #7
 800ce7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce82:	4619      	mov	r1, r3
 800ce84:	4838      	ldr	r0, [pc, #224]	; (800cf68 <HAL_UART_MspInit+0x218>)
 800ce86:	f7f4 fd65 	bl	8001954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	2025      	movs	r0, #37	; 0x25
 800ce90:	f7f3 fd95 	bl	80009be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ce94:	2025      	movs	r0, #37	; 0x25
 800ce96:	f7f3 fdac 	bl	80009f2 <HAL_NVIC_EnableIRQ>
}
 800ce9a:	e059      	b.n	800cf50 <HAL_UART_MspInit+0x200>
  else if(huart->Instance==USART2)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a32      	ldr	r2, [pc, #200]	; (800cf6c <HAL_UART_MspInit+0x21c>)
 800cea2:	4293      	cmp	r3, r2
 800cea4:	d154      	bne.n	800cf50 <HAL_UART_MspInit+0x200>
    __HAL_RCC_USART2_CLK_ENABLE();
 800cea6:	4b2d      	ldr	r3, [pc, #180]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ceac:	4a2b      	ldr	r2, [pc, #172]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ceae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ceb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800ceb6:	4b29      	ldr	r3, [pc, #164]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ceb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800cebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cec0:	613b      	str	r3, [r7, #16]
 800cec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cec4:	4b25      	ldr	r3, [pc, #148]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ceca:	4a24      	ldr	r2, [pc, #144]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cecc:	f043 0301 	orr.w	r3, r3, #1
 800ced0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ced4:	4b21      	ldr	r3, [pc, #132]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ced6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cee2:	4b1e      	ldr	r3, [pc, #120]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cee8:	4a1c      	ldr	r2, [pc, #112]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800ceea:	f043 0308 	orr.w	r3, r3, #8
 800ceee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800cef2:	4b1a      	ldr	r3, [pc, #104]	; (800cf5c <HAL_UART_MspInit+0x20c>)
 800cef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800cef8:	f003 0308 	and.w	r3, r3, #8
 800cefc:	60bb      	str	r3, [r7, #8]
 800cefe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cf00:	2308      	movs	r3, #8
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf04:	2302      	movs	r3, #2
 800cf06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800cf10:	2307      	movs	r3, #7
 800cf12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4811      	ldr	r0, [pc, #68]	; (800cf60 <HAL_UART_MspInit+0x210>)
 800cf1c:	f7f4 fd1a 	bl	8001954 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800cf20:	2320      	movs	r3, #32
 800cf22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf24:	2302      	movs	r3, #2
 800cf26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800cf30:	2307      	movs	r3, #7
 800cf32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cf34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf38:	4619      	mov	r1, r3
 800cf3a:	480d      	ldr	r0, [pc, #52]	; (800cf70 <HAL_UART_MspInit+0x220>)
 800cf3c:	f7f4 fd0a 	bl	8001954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800cf40:	2200      	movs	r2, #0
 800cf42:	2100      	movs	r1, #0
 800cf44:	2026      	movs	r0, #38	; 0x26
 800cf46:	f7f3 fd3a 	bl	80009be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800cf4a:	2026      	movs	r0, #38	; 0x26
 800cf4c:	f7f3 fd51 	bl	80009f2 <HAL_NVIC_EnableIRQ>
}
 800cf50:	bf00      	nop
 800cf52:	3738      	adds	r7, #56	; 0x38
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}
 800cf58:	40004c00 	.word	0x40004c00
 800cf5c:	58024400 	.word	0x58024400
 800cf60:	58020000 	.word	0x58020000
 800cf64:	40011000 	.word	0x40011000
 800cf68:	58020400 	.word	0x58020400
 800cf6c:	40004400 	.word	0x40004400
 800cf70:	58020c00 	.word	0x58020c00

0800cf74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800cf74:	b480      	push	{r7}
 800cf76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800cf78:	bf00      	nop
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800cf82:	b480      	push	{r7}
 800cf84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cf86:	e7fe      	b.n	800cf86 <HardFault_Handler+0x4>

0800cf88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cf8c:	e7fe      	b.n	800cf8c <MemManage_Handler+0x4>

0800cf8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800cf8e:	b480      	push	{r7}
 800cf90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800cf92:	e7fe      	b.n	800cf92 <BusFault_Handler+0x4>

0800cf94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800cf94:	b480      	push	{r7}
 800cf96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800cf98:	e7fe      	b.n	800cf98 <UsageFault_Handler+0x4>

0800cf9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800cf9e:	bf00      	nop
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cfac:	bf00      	nop
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr

0800cfb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800cfb6:	b480      	push	{r7}
 800cfb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800cfba:	bf00      	nop
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr

0800cfc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cfc8:	f7f3 fbd0 	bl	800076c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cfcc:	bf00      	nop
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800cfd4:	4803      	ldr	r0, [pc, #12]	; (800cfe4 <USART1_IRQHandler+0x14>)
 800cfd6:	f7f7 fde9 	bl	8004bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  add_buffer();
 800cfda:	f000 f8e9 	bl	800d1b0 <add_buffer>
  /* USER CODE END USART1_IRQn 1 */
}
 800cfde:	bf00      	nop
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	2400082c 	.word	0x2400082c

0800cfe8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800cfec:	4803      	ldr	r0, [pc, #12]	; (800cffc <USART2_IRQHandler+0x14>)
 800cfee:	f7f7 fddd 	bl	8004bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  add_buffer_u2();
 800cff2:	f000 fabd 	bl	800d570 <add_buffer_u2>
  /* USER CODE END USART2_IRQn 1 */
}
 800cff6:	bf00      	nop
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	24000984 	.word	0x24000984

0800d000 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800d004:	4802      	ldr	r0, [pc, #8]	; (800d010 <UART4_IRQHandler+0x10>)
 800d006:	f7f7 fdd1 	bl	8004bac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800d00a:	bf00      	nop
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	240008f8 	.word	0x240008f8

0800d014 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d018:	4805      	ldr	r0, [pc, #20]	; (800d030 <TIM6_DAC_IRQHandler+0x1c>)
 800d01a:	f7f7 f923 	bl	8004264 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
	axis_a_timer();
 800d01e:	f7fd fd2d 	bl	800aa7c <axis_a_timer>
	axis_b_timer();
 800d022:	f7fd ff1d 	bl	800ae60 <axis_b_timer>
	axis_c_timer();
 800d026:	f7fe f90d 	bl	800b244 <axis_c_timer>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d02a:	bf00      	nop
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	240008b8 	.word	0x240008b8

0800d034 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d03c:	4b11      	ldr	r3, [pc, #68]	; (800d084 <_sbrk+0x50>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <_sbrk+0x16>
		heap_end = &end;
 800d044:	4b0f      	ldr	r3, [pc, #60]	; (800d084 <_sbrk+0x50>)
 800d046:	4a10      	ldr	r2, [pc, #64]	; (800d088 <_sbrk+0x54>)
 800d048:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d04a:	4b0e      	ldr	r3, [pc, #56]	; (800d084 <_sbrk+0x50>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d050:	4b0c      	ldr	r3, [pc, #48]	; (800d084 <_sbrk+0x50>)
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4413      	add	r3, r2
 800d058:	466a      	mov	r2, sp
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d907      	bls.n	800d06e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d05e:	f000 fbfd 	bl	800d85c <__errno>
 800d062:	4602      	mov	r2, r0
 800d064:	230c      	movs	r3, #12
 800d066:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d06c:	e006      	b.n	800d07c <_sbrk+0x48>
	}

	heap_end += incr;
 800d06e:	4b05      	ldr	r3, [pc, #20]	; (800d084 <_sbrk+0x50>)
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4413      	add	r3, r2
 800d076:	4a03      	ldr	r2, [pc, #12]	; (800d084 <_sbrk+0x50>)
 800d078:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d07a:	68fb      	ldr	r3, [r7, #12]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3710      	adds	r7, #16
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	24000394 	.word	0x24000394
 800d088:	24001fa8 	.word	0x24001fa8

0800d08c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800d08c:	b480      	push	{r7}
 800d08e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800d090:	4b29      	ldr	r3, [pc, #164]	; (800d138 <SystemInit+0xac>)
 800d092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d096:	4a28      	ldr	r2, [pc, #160]	; (800d138 <SystemInit+0xac>)
 800d098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d09c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800d0a0:	4b26      	ldr	r3, [pc, #152]	; (800d13c <SystemInit+0xb0>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a25      	ldr	r2, [pc, #148]	; (800d13c <SystemInit+0xb0>)
 800d0a6:	f043 0301 	orr.w	r3, r3, #1
 800d0aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800d0ac:	4b23      	ldr	r3, [pc, #140]	; (800d13c <SystemInit+0xb0>)
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800d0b2:	4b22      	ldr	r3, [pc, #136]	; (800d13c <SystemInit+0xb0>)
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	4921      	ldr	r1, [pc, #132]	; (800d13c <SystemInit+0xb0>)
 800d0b8:	4b21      	ldr	r3, [pc, #132]	; (800d140 <SystemInit+0xb4>)
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800d0be:	4b1f      	ldr	r3, [pc, #124]	; (800d13c <SystemInit+0xb0>)
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800d0c4:	4b1d      	ldr	r3, [pc, #116]	; (800d13c <SystemInit+0xb0>)
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800d0ca:	4b1c      	ldr	r3, [pc, #112]	; (800d13c <SystemInit+0xb0>)
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800d0d0:	4b1a      	ldr	r3, [pc, #104]	; (800d13c <SystemInit+0xb0>)
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800d0d6:	4b19      	ldr	r3, [pc, #100]	; (800d13c <SystemInit+0xb0>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 800d0dc:	4b17      	ldr	r3, [pc, #92]	; (800d13c <SystemInit+0xb0>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800d0e2:	4b16      	ldr	r3, [pc, #88]	; (800d13c <SystemInit+0xb0>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800d0e8:	4b14      	ldr	r3, [pc, #80]	; (800d13c <SystemInit+0xb0>)
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800d0ee:	4b13      	ldr	r3, [pc, #76]	; (800d13c <SystemInit+0xb0>)
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800d0f4:	4b11      	ldr	r3, [pc, #68]	; (800d13c <SystemInit+0xb0>)
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800d0fa:	4b10      	ldr	r3, [pc, #64]	; (800d13c <SystemInit+0xb0>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800d100:	4b0e      	ldr	r3, [pc, #56]	; (800d13c <SystemInit+0xb0>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	4a0d      	ldr	r2, [pc, #52]	; (800d13c <SystemInit+0xb0>)
 800d106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d10a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800d10c:	4b0b      	ldr	r3, [pc, #44]	; (800d13c <SystemInit+0xb0>)
 800d10e:	2200      	movs	r2, #0
 800d110:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800d112:	4b0c      	ldr	r3, [pc, #48]	; (800d144 <SystemInit+0xb8>)
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	4b0c      	ldr	r3, [pc, #48]	; (800d148 <SystemInit+0xbc>)
 800d118:	4013      	ands	r3, r2
 800d11a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d11e:	d202      	bcs.n	800d126 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800d120:	4b0a      	ldr	r3, [pc, #40]	; (800d14c <SystemInit+0xc0>)
 800d122:	2201      	movs	r2, #1
 800d124:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d126:	4b04      	ldr	r3, [pc, #16]	; (800d138 <SystemInit+0xac>)
 800d128:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d12c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800d12e:	bf00      	nop
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	e000ed00 	.word	0xe000ed00
 800d13c:	58024400 	.word	0x58024400
 800d140:	eaf6ed7f 	.word	0xeaf6ed7f
 800d144:	5c001000 	.word	0x5c001000
 800d148:	ffff0000 	.word	0xffff0000
 800d14c:	51008108 	.word	0x51008108

0800d150 <uart_ini>:




void uart_ini(void)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	af00      	add	r7, sp, #0
	a_serial_write_buff = serial_buff;
 800d154:	4b0d      	ldr	r3, [pc, #52]	; (800d18c <uart_ini+0x3c>)
 800d156:	4a0e      	ldr	r2, [pc, #56]	; (800d190 <uart_ini+0x40>)
 800d158:	601a      	str	r2, [r3, #0]
	write_char_counter=0;
 800d15a:	4b0e      	ldr	r3, [pc, #56]	; (800d194 <uart_ini+0x44>)
 800d15c:	2200      	movs	r2, #0
 800d15e:	601a      	str	r2, [r3, #0]
	a_serial_read_buff = serial_buff;
 800d160:	4b0d      	ldr	r3, [pc, #52]	; (800d198 <uart_ini+0x48>)
 800d162:	4a0b      	ldr	r2, [pc, #44]	; (800d190 <uart_ini+0x40>)
 800d164:	601a      	str	r2, [r3, #0]
	read_char_counter=0;
 800d166:	4b0d      	ldr	r3, [pc, #52]	; (800d19c <uart_ini+0x4c>)
 800d168:	2200      	movs	r2, #0
 800d16a:	601a      	str	r2, [r3, #0]
	clearArray(serial_buff,UART1_BUFSIZE);
 800d16c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d170:	4807      	ldr	r0, [pc, #28]	; (800d190 <uart_ini+0x40>)
 800d172:	f7fa fd64 	bl	8007c3e <clearArray>
	a_parsing_buff = parsing_buff;
 800d176:	4b0a      	ldr	r3, [pc, #40]	; (800d1a0 <uart_ini+0x50>)
 800d178:	4a0a      	ldr	r2, [pc, #40]	; (800d1a4 <uart_ini+0x54>)
 800d17a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1,(uint8_t*) serial_char,1);
 800d17c:	2201      	movs	r2, #1
 800d17e:	490a      	ldr	r1, [pc, #40]	; (800d1a8 <uart_ini+0x58>)
 800d180:	480a      	ldr	r0, [pc, #40]	; (800d1ac <uart_ini+0x5c>)
 800d182:	f7f7 fbbb 	bl	80048fc <HAL_UART_Receive_IT>
}
 800d186:	bf00      	nop
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	2400049c 	.word	0x2400049c
 800d190:	2400039c 	.word	0x2400039c
 800d194:	240004a4 	.word	0x240004a4
 800d198:	240004a0 	.word	0x240004a0
 800d19c:	240004a8 	.word	0x240004a8
 800d1a0:	240005b0 	.word	0x240005b0
 800d1a4:	240004b0 	.word	0x240004b0
 800d1a8:	24000398 	.word	0x24000398
 800d1ac:	2400082c 	.word	0x2400082c

0800d1b0 <add_buffer>:


void add_buffer()
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	af00      	add	r7, sp, #0
	if(write_char_counter==UART1_BUFSIZE)
 800d1b4:	4b14      	ldr	r3, [pc, #80]	; (800d208 <add_buffer+0x58>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1bc:	d105      	bne.n	800d1ca <add_buffer+0x1a>
		{
			write_char_counter=0;
 800d1be:	4b12      	ldr	r3, [pc, #72]	; (800d208 <add_buffer+0x58>)
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	601a      	str	r2, [r3, #0]
			a_serial_write_buff = serial_buff;
 800d1c4:	4b11      	ldr	r3, [pc, #68]	; (800d20c <add_buffer+0x5c>)
 800d1c6:	4a12      	ldr	r2, [pc, #72]	; (800d210 <add_buffer+0x60>)
 800d1c8:	601a      	str	r2, [r3, #0]
		}

  if(buff_chars < UART1_BUFSIZE)
 800d1ca:	4b12      	ldr	r3, [pc, #72]	; (800d214 <add_buffer+0x64>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2bff      	cmp	r3, #255	; 0xff
 800d1d0:	dc18      	bgt.n	800d204 <add_buffer+0x54>
		{
			*a_serial_write_buff = serial_char[0];a_serial_write_buff++;
 800d1d2:	4b0e      	ldr	r3, [pc, #56]	; (800d20c <add_buffer+0x5c>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4a10      	ldr	r2, [pc, #64]	; (800d218 <add_buffer+0x68>)
 800d1d8:	7812      	ldrb	r2, [r2, #0]
 800d1da:	701a      	strb	r2, [r3, #0]
 800d1dc:	4b0b      	ldr	r3, [pc, #44]	; (800d20c <add_buffer+0x5c>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	4a0a      	ldr	r2, [pc, #40]	; (800d20c <add_buffer+0x5c>)
 800d1e4:	6013      	str	r3, [r2, #0]
			buff_chars++;
 800d1e6:	4b0b      	ldr	r3, [pc, #44]	; (800d214 <add_buffer+0x64>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3301      	adds	r3, #1
 800d1ec:	4a09      	ldr	r2, [pc, #36]	; (800d214 <add_buffer+0x64>)
 800d1ee:	6013      	str	r3, [r2, #0]
      write_char_counter++;
 800d1f0:	4b05      	ldr	r3, [pc, #20]	; (800d208 <add_buffer+0x58>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	4a04      	ldr	r2, [pc, #16]	; (800d208 <add_buffer+0x58>)
 800d1f8:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart1,(uint8_t*) serial_char,1);
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4906      	ldr	r1, [pc, #24]	; (800d218 <add_buffer+0x68>)
 800d1fe:	4807      	ldr	r0, [pc, #28]	; (800d21c <add_buffer+0x6c>)
 800d200:	f7f7 fb7c 	bl	80048fc <HAL_UART_Receive_IT>
			 //if(readATSerialBuff_flag)
			// UART_TX(serial_char);
		}


}
 800d204:	bf00      	nop
 800d206:	bd80      	pop	{r7, pc}
 800d208:	240004a4 	.word	0x240004a4
 800d20c:	2400049c 	.word	0x2400049c
 800d210:	2400039c 	.word	0x2400039c
 800d214:	240004ac 	.word	0x240004ac
 800d218:	24000398 	.word	0x24000398
 800d21c:	2400082c 	.word	0x2400082c

0800d220 <read_buff_char>:

char read_buff_char()
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
  char char_out;
	  if (read_char_counter==UART1_BUFSIZE)
 800d226:	4b14      	ldr	r3, [pc, #80]	; (800d278 <read_buff_char+0x58>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d22e:	d105      	bne.n	800d23c <read_buff_char+0x1c>
	{
		read_char_counter=0;
 800d230:	4b11      	ldr	r3, [pc, #68]	; (800d278 <read_buff_char+0x58>)
 800d232:	2200      	movs	r2, #0
 800d234:	601a      	str	r2, [r3, #0]
		a_serial_read_buff = serial_buff;
 800d236:	4b11      	ldr	r3, [pc, #68]	; (800d27c <read_buff_char+0x5c>)
 800d238:	4a11      	ldr	r2, [pc, #68]	; (800d280 <read_buff_char+0x60>)
 800d23a:	601a      	str	r2, [r3, #0]
	}

	if (buff_chars>=0)
 800d23c:	4b11      	ldr	r3, [pc, #68]	; (800d284 <read_buff_char+0x64>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	db12      	blt.n	800d26a <read_buff_char+0x4a>
	{
		buff_chars--;
 800d244:	4b0f      	ldr	r3, [pc, #60]	; (800d284 <read_buff_char+0x64>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	3b01      	subs	r3, #1
 800d24a:	4a0e      	ldr	r2, [pc, #56]	; (800d284 <read_buff_char+0x64>)
 800d24c:	6013      	str	r3, [r2, #0]
		char_out = *a_serial_read_buff;
 800d24e:	4b0b      	ldr	r3, [pc, #44]	; (800d27c <read_buff_char+0x5c>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	71fb      	strb	r3, [r7, #7]
		a_serial_read_buff++;
 800d256:	4b09      	ldr	r3, [pc, #36]	; (800d27c <read_buff_char+0x5c>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	3301      	adds	r3, #1
 800d25c:	4a07      	ldr	r2, [pc, #28]	; (800d27c <read_buff_char+0x5c>)
 800d25e:	6013      	str	r3, [r2, #0]
    read_char_counter++;
 800d260:	4b05      	ldr	r3, [pc, #20]	; (800d278 <read_buff_char+0x58>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3301      	adds	r3, #1
 800d266:	4a04      	ldr	r2, [pc, #16]	; (800d278 <read_buff_char+0x58>)
 800d268:	6013      	str	r3, [r2, #0]

	}

return char_out;
 800d26a:	79fb      	ldrb	r3, [r7, #7]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	370c      	adds	r7, #12
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr
 800d278:	240004a8 	.word	0x240004a8
 800d27c:	240004a0 	.word	0x240004a0
 800d280:	2400039c 	.word	0x2400039c
 800d284:	240004ac 	.word	0x240004ac

0800d288 <readATSerialBuff>:



void readATSerialBuff(void)
{
 800d288:	b590      	push	{r4, r7, lr}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
	if (readATSerialBuff_flag == false) return;
 800d28e:	4b1b      	ldr	r3, [pc, #108]	; (800d2fc <readATSerialBuff+0x74>)
 800d290:	781b      	ldrb	r3, [r3, #0]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d02e      	beq.n	800d2f4 <readATSerialBuff+0x6c>
  static int counter_chars;


	  if (buff_chars>0)
 800d296:	4b1a      	ldr	r3, [pc, #104]	; (800d300 <readATSerialBuff+0x78>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	dd2b      	ble.n	800d2f6 <readATSerialBuff+0x6e>
	{
		counter_chars++;
 800d29e:	4b19      	ldr	r3, [pc, #100]	; (800d304 <readATSerialBuff+0x7c>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	4a17      	ldr	r2, [pc, #92]	; (800d304 <readATSerialBuff+0x7c>)
 800d2a6:	6013      	str	r3, [r2, #0]
		uint8_t ch[1] ={' '};
 800d2a8:	2320      	movs	r3, #32
 800d2aa:	713b      	strb	r3, [r7, #4]
    *a_parsing_buff = read_buff_char();
 800d2ac:	4b16      	ldr	r3, [pc, #88]	; (800d308 <readATSerialBuff+0x80>)
 800d2ae:	681c      	ldr	r4, [r3, #0]
 800d2b0:	f7ff ffb6 	bl	800d220 <read_buff_char>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	7023      	strb	r3, [r4, #0]
    ch[0] =  *a_parsing_buff;
 800d2b8:	4b13      	ldr	r3, [pc, #76]	; (800d308 <readATSerialBuff+0x80>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	713b      	strb	r3, [r7, #4]



		if (*a_parsing_buff == '\r')
 800d2c0:	4b11      	ldr	r3, [pc, #68]	; (800d308 <readATSerialBuff+0x80>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	2b0d      	cmp	r3, #13
 800d2c8:	d10e      	bne.n	800d2e8 <readATSerialBuff+0x60>
    {

//и принимаем данные по сокету, то они будут зашиврованы, а значит, может попасться символ переноса строки. Таким образом мы блокируем разбор такой строки.

		parseBuff(parsing_buff);
 800d2ca:	4810      	ldr	r0, [pc, #64]	; (800d30c <readATSerialBuff+0x84>)
 800d2cc:	f000 f820 	bl	800d310 <parseBuff>
	  clearArray(parsing_buff, UART1_BUFSIZE);
 800d2d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d2d4:	480d      	ldr	r0, [pc, #52]	; (800d30c <readATSerialBuff+0x84>)
 800d2d6:	f7fa fcb2 	bl	8007c3e <clearArray>
		a_parsing_buff = parsing_buff;
 800d2da:	4b0b      	ldr	r3, [pc, #44]	; (800d308 <readATSerialBuff+0x80>)
 800d2dc:	4a0b      	ldr	r2, [pc, #44]	; (800d30c <readATSerialBuff+0x84>)
 800d2de:	601a      	str	r2, [r3, #0]
    counter_chars=0;
 800d2e0:	4b08      	ldr	r3, [pc, #32]	; (800d304 <readATSerialBuff+0x7c>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	e006      	b.n	800d2f6 <readATSerialBuff+0x6e>
    return;
			}
		a_parsing_buff++;
 800d2e8:	4b07      	ldr	r3, [pc, #28]	; (800d308 <readATSerialBuff+0x80>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	3301      	adds	r3, #1
 800d2ee:	4a06      	ldr	r2, [pc, #24]	; (800d308 <readATSerialBuff+0x80>)
 800d2f0:	6013      	str	r3, [r2, #0]
 800d2f2:	e000      	b.n	800d2f6 <readATSerialBuff+0x6e>
	if (readATSerialBuff_flag == false) return;
 800d2f4:	bf00      	nop
	}
}
 800d2f6:	370c      	adds	r7, #12
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd90      	pop	{r4, r7, pc}
 800d2fc:	240000a4 	.word	0x240000a4
 800d300:	240004ac 	.word	0x240004ac
 800d304:	240005b4 	.word	0x240005b4
 800d308:	240005b0 	.word	0x240005b0
 800d30c:	240004b0 	.word	0x240004b0

0800d310 <parseBuff>:



void parseBuff(char *a)
{
 800d310:	b5b0      	push	{r4, r5, r7, lr}
 800d312:	b088      	sub	sp, #32
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]



			int cycle_parses = countOf(parsing_buff,'\r');
 800d318:	210d      	movs	r1, #13
 800d31a:	4831      	ldr	r0, [pc, #196]	; (800d3e0 <parseBuff+0xd0>)
 800d31c:	f7fa fc70 	bl	8007c00 <countOf>
 800d320:	61b8      	str	r0, [r7, #24]

			for (int i=0; i<cycle_parses; i++)
 800d322:	2300      	movs	r3, #0
 800d324:	61fb      	str	r3, [r7, #28]
 800d326:	e052      	b.n	800d3ce <parseBuff+0xbe>
			{
					int index_end_msg = indexOf(parsing_buff,'\r');
 800d328:	210d      	movs	r1, #13
 800d32a:	482d      	ldr	r0, [pc, #180]	; (800d3e0 <parseBuff+0xd0>)
 800d32c:	f7fa fca2 	bl	8007c74 <indexOf>
 800d330:	6178      	str	r0, [r7, #20]
				  if (index_end_msg != 0)
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d03c      	beq.n	800d3b2 <parseBuff+0xa2>
					{
 800d338:	466b      	mov	r3, sp
 800d33a:	461d      	mov	r5, r3
						char buff[index_end_msg];clearArray(buff,index_end_msg);
 800d33c:	6978      	ldr	r0, [r7, #20]
 800d33e:	1e43      	subs	r3, r0, #1
 800d340:	613b      	str	r3, [r7, #16]
 800d342:	4603      	mov	r3, r0
 800d344:	4619      	mov	r1, r3
 800d346:	f04f 0200 	mov.w	r2, #0
 800d34a:	f04f 0300 	mov.w	r3, #0
 800d34e:	f04f 0400 	mov.w	r4, #0
 800d352:	00d4      	lsls	r4, r2, #3
 800d354:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d358:	00cb      	lsls	r3, r1, #3
 800d35a:	4603      	mov	r3, r0
 800d35c:	4619      	mov	r1, r3
 800d35e:	f04f 0200 	mov.w	r2, #0
 800d362:	f04f 0300 	mov.w	r3, #0
 800d366:	f04f 0400 	mov.w	r4, #0
 800d36a:	00d4      	lsls	r4, r2, #3
 800d36c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d370:	00cb      	lsls	r3, r1, #3
 800d372:	4603      	mov	r3, r0
 800d374:	3307      	adds	r3, #7
 800d376:	08db      	lsrs	r3, r3, #3
 800d378:	00db      	lsls	r3, r3, #3
 800d37a:	ebad 0d03 	sub.w	sp, sp, r3
 800d37e:	466b      	mov	r3, sp
 800d380:	3300      	adds	r3, #0
 800d382:	60fb      	str	r3, [r7, #12]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	6979      	ldr	r1, [r7, #20]
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fa fc58 	bl	8007c3e <clearArray>
						substring(parsing_buff,buff,0,index_end_msg);
 800d38e:	68f9      	ldr	r1, [r7, #12]
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	2200      	movs	r2, #0
 800d394:	4812      	ldr	r0, [pc, #72]	; (800d3e0 <parseBuff+0xd0>)
 800d396:	f7fa fcb7 	bl	8007d08 <substring>
						//trimChar(buff,buff,'\n');
						if (length(buff)>0)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fa fc17 	bl	8007bd0 <length>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dd03      	ble.n	800d3b0 <parseBuff+0xa0>
							{
								//===========Здесь обрабатываем сообщения , лежащие в buff


								PARSE_VOID_SCRIPT
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe f8c4 	bl	800b538 <parse_commands>
 800d3b0:	46ad      	mov	sp, r5

								//===================================
							}
					}

				  substring(parsing_buff,parsing_buff,index_end_msg+1,length(parsing_buff));
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	1c5c      	adds	r4, r3, #1
 800d3b6:	480a      	ldr	r0, [pc, #40]	; (800d3e0 <parseBuff+0xd0>)
 800d3b8:	f7fa fc0a 	bl	8007bd0 <length>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	4622      	mov	r2, r4
 800d3c0:	4907      	ldr	r1, [pc, #28]	; (800d3e0 <parseBuff+0xd0>)
 800d3c2:	4807      	ldr	r0, [pc, #28]	; (800d3e0 <parseBuff+0xd0>)
 800d3c4:	f7fa fca0 	bl	8007d08 <substring>
			for (int i=0; i<cycle_parses; i++)
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	61fb      	str	r3, [r7, #28]
 800d3ce:	69fa      	ldr	r2, [r7, #28]
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	dba8      	blt.n	800d328 <parseBuff+0x18>

			}
}
 800d3d6:	bf00      	nop
 800d3d8:	3720      	adds	r7, #32
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bdb0      	pop	{r4, r5, r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	240004b0 	.word	0x240004b0

0800d3e4 <printint>:

void printint(int i)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
	char buff[10];
	intToStr(i,buff);
 800d3ec:	f107 030c 	add.w	r3, r7, #12
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7fa fd28 	bl	8007e48 <intToStr>
//	addChar(buff,buff,'\r');
	UART_TX(buff);
 800d3f8:	f107 030c 	add.w	r3, r7, #12
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fa fbe7 	bl	8007bd0 <length>
 800d402:	4603      	mov	r3, r0
 800d404:	b29a      	uxth	r2, r3
 800d406:	f107 010c 	add.w	r1, r7, #12
 800d40a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d40e:	4809      	ldr	r0, [pc, #36]	; (800d434 <printint+0x50>)
 800d410:	f7f7 f9de 	bl	80047d0 <HAL_UART_Transmit>
	UART_TX("\r");
 800d414:	4808      	ldr	r0, [pc, #32]	; (800d438 <printint+0x54>)
 800d416:	f7fa fbdb 	bl	8007bd0 <length>
 800d41a:	4603      	mov	r3, r0
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d422:	4905      	ldr	r1, [pc, #20]	; (800d438 <printint+0x54>)
 800d424:	4803      	ldr	r0, [pc, #12]	; (800d434 <printint+0x50>)
 800d426:	f7f7 f9d3 	bl	80047d0 <HAL_UART_Transmit>
}
 800d42a:	bf00      	nop
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	2400082c 	.word	0x2400082c
 800d438:	08010dd0 	.word	0x08010dd0

0800d43c <printstr>:
//	UART_TX("\r\n");
}


void printstr(char *str)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
	//addChar(str,str,'\r');
	UART_TX(str);
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f7fa fbc3 	bl	8007bd0 <length>
 800d44a:	4603      	mov	r3, r0
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d452:	6879      	ldr	r1, [r7, #4]
 800d454:	4808      	ldr	r0, [pc, #32]	; (800d478 <printstr+0x3c>)
 800d456:	f7f7 f9bb 	bl	80047d0 <HAL_UART_Transmit>
	UART_TX("\r");
 800d45a:	4808      	ldr	r0, [pc, #32]	; (800d47c <printstr+0x40>)
 800d45c:	f7fa fbb8 	bl	8007bd0 <length>
 800d460:	4603      	mov	r3, r0
 800d462:	b29a      	uxth	r2, r3
 800d464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d468:	4904      	ldr	r1, [pc, #16]	; (800d47c <printstr+0x40>)
 800d46a:	4803      	ldr	r0, [pc, #12]	; (800d478 <printstr+0x3c>)
 800d46c:	f7f7 f9b0 	bl	80047d0 <HAL_UART_Transmit>
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	2400082c 	.word	0x2400082c
 800d47c:	08010dd0 	.word	0x08010dd0

0800d480 <printstr_>:
//	UART_TX("\r");
}


void printstr_(char *str)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
	//addChar(str,str,'\r');
	UART_TX(str);
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7fa fba1 	bl	8007bd0 <length>
 800d48e:	4603      	mov	r3, r0
 800d490:	b29a      	uxth	r2, r3
 800d492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d496:	6879      	ldr	r1, [r7, #4]
 800d498:	4803      	ldr	r0, [pc, #12]	; (800d4a8 <printstr_+0x28>)
 800d49a:	f7f7 f999 	bl	80047d0 <HAL_UART_Transmit>

}
 800d49e:	bf00      	nop
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	2400082c 	.word	0x2400082c

0800d4ac <printfloat>:


void printfloat(float f)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	ed87 0a01 	vstr	s0, [r7, #4]
	char buff[15];
	ftoa(f,buff,3);
 800d4b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800d4ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800d4be:	f107 0308 	add.w	r3, r7, #8
 800d4c2:	2103      	movs	r1, #3
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	eeb0 0b47 	vmov.f64	d0, d7
 800d4ca:	f7fa fda9 	bl	8008020 <ftoa>
	//addChar(buff,buff,'\r');
	UART_TX(buff);
 800d4ce:	f107 0308 	add.w	r3, r7, #8
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fa fb7c 	bl	8007bd0 <length>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	b29a      	uxth	r2, r3
 800d4dc:	f107 0108 	add.w	r1, r7, #8
 800d4e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4e4:	4808      	ldr	r0, [pc, #32]	; (800d508 <printfloat+0x5c>)
 800d4e6:	f7f7 f973 	bl	80047d0 <HAL_UART_Transmit>
	UART_TX("\r");
 800d4ea:	4808      	ldr	r0, [pc, #32]	; (800d50c <printfloat+0x60>)
 800d4ec:	f7fa fb70 	bl	8007bd0 <length>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4f8:	4904      	ldr	r1, [pc, #16]	; (800d50c <printfloat+0x60>)
 800d4fa:	4803      	ldr	r0, [pc, #12]	; (800d508 <printfloat+0x5c>)
 800d4fc:	f7f7 f968 	bl	80047d0 <HAL_UART_Transmit>
}
 800d500:	bf00      	nop
 800d502:	3718      	adds	r7, #24
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	2400082c 	.word	0x2400082c
 800d50c:	08010dd0 	.word	0x08010dd0

0800d510 <uart_ini_u2>:




void uart_ini_u2(void)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	af00      	add	r7, sp, #0
	a_serial_write_buff = serial_buff;
 800d514:	4b0d      	ldr	r3, [pc, #52]	; (800d54c <uart_ini_u2+0x3c>)
 800d516:	4a0e      	ldr	r2, [pc, #56]	; (800d550 <uart_ini_u2+0x40>)
 800d518:	601a      	str	r2, [r3, #0]
	write_char_counter=0;
 800d51a:	4b0e      	ldr	r3, [pc, #56]	; (800d554 <uart_ini_u2+0x44>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	601a      	str	r2, [r3, #0]
	a_serial_read_buff = serial_buff;
 800d520:	4b0d      	ldr	r3, [pc, #52]	; (800d558 <uart_ini_u2+0x48>)
 800d522:	4a0b      	ldr	r2, [pc, #44]	; (800d550 <uart_ini_u2+0x40>)
 800d524:	601a      	str	r2, [r3, #0]
	read_char_counter=0;
 800d526:	4b0d      	ldr	r3, [pc, #52]	; (800d55c <uart_ini_u2+0x4c>)
 800d528:	2200      	movs	r2, #0
 800d52a:	601a      	str	r2, [r3, #0]
	clearArray(serial_buff,UART1_BUFSIZE);
 800d52c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d530:	4807      	ldr	r0, [pc, #28]	; (800d550 <uart_ini_u2+0x40>)
 800d532:	f7fa fb84 	bl	8007c3e <clearArray>
	a_parsing_buff = parsing_buff;
 800d536:	4b0a      	ldr	r3, [pc, #40]	; (800d560 <uart_ini_u2+0x50>)
 800d538:	4a0a      	ldr	r2, [pc, #40]	; (800d564 <uart_ini_u2+0x54>)
 800d53a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2,(uint8_t*) serial_char,1);
 800d53c:	2201      	movs	r2, #1
 800d53e:	490a      	ldr	r1, [pc, #40]	; (800d568 <uart_ini_u2+0x58>)
 800d540:	480a      	ldr	r0, [pc, #40]	; (800d56c <uart_ini_u2+0x5c>)
 800d542:	f7f7 f9db 	bl	80048fc <HAL_UART_Receive_IT>
}
 800d546:	bf00      	nop
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	240006bc 	.word	0x240006bc
 800d550:	240005bc 	.word	0x240005bc
 800d554:	240006c4 	.word	0x240006c4
 800d558:	240006c0 	.word	0x240006c0
 800d55c:	240006c8 	.word	0x240006c8
 800d560:	240007d0 	.word	0x240007d0
 800d564:	240006d0 	.word	0x240006d0
 800d568:	240005b8 	.word	0x240005b8
 800d56c:	24000984 	.word	0x24000984

0800d570 <add_buffer_u2>:


void add_buffer_u2()
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
	if(write_char_counter==UART1_BUFSIZE)
 800d574:	4b14      	ldr	r3, [pc, #80]	; (800d5c8 <add_buffer_u2+0x58>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d57c:	d105      	bne.n	800d58a <add_buffer_u2+0x1a>
		{
			write_char_counter=0;
 800d57e:	4b12      	ldr	r3, [pc, #72]	; (800d5c8 <add_buffer_u2+0x58>)
 800d580:	2200      	movs	r2, #0
 800d582:	601a      	str	r2, [r3, #0]
			a_serial_write_buff = serial_buff;
 800d584:	4b11      	ldr	r3, [pc, #68]	; (800d5cc <add_buffer_u2+0x5c>)
 800d586:	4a12      	ldr	r2, [pc, #72]	; (800d5d0 <add_buffer_u2+0x60>)
 800d588:	601a      	str	r2, [r3, #0]
		}

  if(buff_chars < UART1_BUFSIZE)
 800d58a:	4b12      	ldr	r3, [pc, #72]	; (800d5d4 <add_buffer_u2+0x64>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2bff      	cmp	r3, #255	; 0xff
 800d590:	dc18      	bgt.n	800d5c4 <add_buffer_u2+0x54>
		{
			*a_serial_write_buff = serial_char[0];a_serial_write_buff++;
 800d592:	4b0e      	ldr	r3, [pc, #56]	; (800d5cc <add_buffer_u2+0x5c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a10      	ldr	r2, [pc, #64]	; (800d5d8 <add_buffer_u2+0x68>)
 800d598:	7812      	ldrb	r2, [r2, #0]
 800d59a:	701a      	strb	r2, [r3, #0]
 800d59c:	4b0b      	ldr	r3, [pc, #44]	; (800d5cc <add_buffer_u2+0x5c>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	4a0a      	ldr	r2, [pc, #40]	; (800d5cc <add_buffer_u2+0x5c>)
 800d5a4:	6013      	str	r3, [r2, #0]
			buff_chars++;
 800d5a6:	4b0b      	ldr	r3, [pc, #44]	; (800d5d4 <add_buffer_u2+0x64>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	4a09      	ldr	r2, [pc, #36]	; (800d5d4 <add_buffer_u2+0x64>)
 800d5ae:	6013      	str	r3, [r2, #0]
      write_char_counter++;
 800d5b0:	4b05      	ldr	r3, [pc, #20]	; (800d5c8 <add_buffer_u2+0x58>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	4a04      	ldr	r2, [pc, #16]	; (800d5c8 <add_buffer_u2+0x58>)
 800d5b8:	6013      	str	r3, [r2, #0]
			HAL_UART_Receive_IT(&huart2,(uint8_t*) serial_char,1);
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	4906      	ldr	r1, [pc, #24]	; (800d5d8 <add_buffer_u2+0x68>)
 800d5be:	4807      	ldr	r0, [pc, #28]	; (800d5dc <add_buffer_u2+0x6c>)
 800d5c0:	f7f7 f99c 	bl	80048fc <HAL_UART_Receive_IT>
			// if(readATSerialBuff_flag_u2)
			// UART_TX(serial_char);
		}


}
 800d5c4:	bf00      	nop
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	240006c4 	.word	0x240006c4
 800d5cc:	240006bc 	.word	0x240006bc
 800d5d0:	240005bc 	.word	0x240005bc
 800d5d4:	240006cc 	.word	0x240006cc
 800d5d8:	240005b8 	.word	0x240005b8
 800d5dc:	24000984 	.word	0x24000984

0800d5e0 <read_buff_char_u2>:

char read_buff_char_u2()
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
  char char_out;
	  if (read_char_counter==UART1_BUFSIZE)
 800d5e6:	4b14      	ldr	r3, [pc, #80]	; (800d638 <read_buff_char_u2+0x58>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5ee:	d105      	bne.n	800d5fc <read_buff_char_u2+0x1c>
	{
		read_char_counter=0;
 800d5f0:	4b11      	ldr	r3, [pc, #68]	; (800d638 <read_buff_char_u2+0x58>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	601a      	str	r2, [r3, #0]
		a_serial_read_buff = serial_buff;
 800d5f6:	4b11      	ldr	r3, [pc, #68]	; (800d63c <read_buff_char_u2+0x5c>)
 800d5f8:	4a11      	ldr	r2, [pc, #68]	; (800d640 <read_buff_char_u2+0x60>)
 800d5fa:	601a      	str	r2, [r3, #0]
	}

	if (buff_chars>=0)
 800d5fc:	4b11      	ldr	r3, [pc, #68]	; (800d644 <read_buff_char_u2+0x64>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	db12      	blt.n	800d62a <read_buff_char_u2+0x4a>
	{
		buff_chars--;
 800d604:	4b0f      	ldr	r3, [pc, #60]	; (800d644 <read_buff_char_u2+0x64>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3b01      	subs	r3, #1
 800d60a:	4a0e      	ldr	r2, [pc, #56]	; (800d644 <read_buff_char_u2+0x64>)
 800d60c:	6013      	str	r3, [r2, #0]
		char_out = *a_serial_read_buff;
 800d60e:	4b0b      	ldr	r3, [pc, #44]	; (800d63c <read_buff_char_u2+0x5c>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	71fb      	strb	r3, [r7, #7]
		a_serial_read_buff++;
 800d616:	4b09      	ldr	r3, [pc, #36]	; (800d63c <read_buff_char_u2+0x5c>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	3301      	adds	r3, #1
 800d61c:	4a07      	ldr	r2, [pc, #28]	; (800d63c <read_buff_char_u2+0x5c>)
 800d61e:	6013      	str	r3, [r2, #0]
    read_char_counter++;
 800d620:	4b05      	ldr	r3, [pc, #20]	; (800d638 <read_buff_char_u2+0x58>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3301      	adds	r3, #1
 800d626:	4a04      	ldr	r2, [pc, #16]	; (800d638 <read_buff_char_u2+0x58>)
 800d628:	6013      	str	r3, [r2, #0]

	}

return char_out;
 800d62a:	79fb      	ldrb	r3, [r7, #7]
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	240006c8 	.word	0x240006c8
 800d63c:	240006c0 	.word	0x240006c0
 800d640:	240005bc 	.word	0x240005bc
 800d644:	240006cc 	.word	0x240006cc

0800d648 <readATSerialBuff_u2>:



void readATSerialBuff_u2(void)
{
 800d648:	b590      	push	{r4, r7, lr}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
	if (readATSerialBuff_flag_u2 == false) return;
 800d64e:	4b1b      	ldr	r3, [pc, #108]	; (800d6bc <readATSerialBuff_u2+0x74>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d02e      	beq.n	800d6b4 <readATSerialBuff_u2+0x6c>
  static int counter_chars;


	  if (buff_chars>0)
 800d656:	4b1a      	ldr	r3, [pc, #104]	; (800d6c0 <readATSerialBuff_u2+0x78>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	dd2b      	ble.n	800d6b6 <readATSerialBuff_u2+0x6e>
	{
		counter_chars++;
 800d65e:	4b19      	ldr	r3, [pc, #100]	; (800d6c4 <readATSerialBuff_u2+0x7c>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3301      	adds	r3, #1
 800d664:	4a17      	ldr	r2, [pc, #92]	; (800d6c4 <readATSerialBuff_u2+0x7c>)
 800d666:	6013      	str	r3, [r2, #0]
		uint8_t ch[1] ={' '};
 800d668:	2320      	movs	r3, #32
 800d66a:	713b      	strb	r3, [r7, #4]
    *a_parsing_buff = read_buff_char_u2();
 800d66c:	4b16      	ldr	r3, [pc, #88]	; (800d6c8 <readATSerialBuff_u2+0x80>)
 800d66e:	681c      	ldr	r4, [r3, #0]
 800d670:	f7ff ffb6 	bl	800d5e0 <read_buff_char_u2>
 800d674:	4603      	mov	r3, r0
 800d676:	7023      	strb	r3, [r4, #0]
    ch[0] =  *a_parsing_buff;
 800d678:	4b13      	ldr	r3, [pc, #76]	; (800d6c8 <readATSerialBuff_u2+0x80>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	713b      	strb	r3, [r7, #4]
	//	UART_TX(ch);


		if (*a_parsing_buff == '\r')
 800d680:	4b11      	ldr	r3, [pc, #68]	; (800d6c8 <readATSerialBuff_u2+0x80>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	2b0d      	cmp	r3, #13
 800d688:	d10e      	bne.n	800d6a8 <readATSerialBuff_u2+0x60>
    {


		parseBuff_u2(parsing_buff);
 800d68a:	4810      	ldr	r0, [pc, #64]	; (800d6cc <readATSerialBuff_u2+0x84>)
 800d68c:	f000 f820 	bl	800d6d0 <parseBuff_u2>
	  clearArray(parsing_buff, UART1_BUFSIZE);
 800d690:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d694:	480d      	ldr	r0, [pc, #52]	; (800d6cc <readATSerialBuff_u2+0x84>)
 800d696:	f7fa fad2 	bl	8007c3e <clearArray>
		a_parsing_buff = parsing_buff;
 800d69a:	4b0b      	ldr	r3, [pc, #44]	; (800d6c8 <readATSerialBuff_u2+0x80>)
 800d69c:	4a0b      	ldr	r2, [pc, #44]	; (800d6cc <readATSerialBuff_u2+0x84>)
 800d69e:	601a      	str	r2, [r3, #0]
    counter_chars=0;
 800d6a0:	4b08      	ldr	r3, [pc, #32]	; (800d6c4 <readATSerialBuff_u2+0x7c>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
 800d6a6:	e006      	b.n	800d6b6 <readATSerialBuff_u2+0x6e>
    return;
			}
		a_parsing_buff++;
 800d6a8:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <readATSerialBuff_u2+0x80>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	4a06      	ldr	r2, [pc, #24]	; (800d6c8 <readATSerialBuff_u2+0x80>)
 800d6b0:	6013      	str	r3, [r2, #0]
 800d6b2:	e000      	b.n	800d6b6 <readATSerialBuff_u2+0x6e>
	if (readATSerialBuff_flag_u2 == false) return;
 800d6b4:	bf00      	nop
	}
}
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd90      	pop	{r4, r7, pc}
 800d6bc:	240000a5 	.word	0x240000a5
 800d6c0:	240006cc 	.word	0x240006cc
 800d6c4:	240007d4 	.word	0x240007d4
 800d6c8:	240007d0 	.word	0x240007d0
 800d6cc:	240006d0 	.word	0x240006d0

0800d6d0 <parseBuff_u2>:



void parseBuff_u2(char *a)
{
 800d6d0:	b5b0      	push	{r4, r5, r7, lr}
 800d6d2:	b088      	sub	sp, #32
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]



			int cycle_parses = countOf(parsing_buff,'\r');
 800d6d8:	210d      	movs	r1, #13
 800d6da:	4835      	ldr	r0, [pc, #212]	; (800d7b0 <parseBuff_u2+0xe0>)
 800d6dc:	f7fa fa90 	bl	8007c00 <countOf>
 800d6e0:	61b8      	str	r0, [r7, #24]

			for (int i=0; i<cycle_parses; i++)
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	61fb      	str	r3, [r7, #28]
 800d6e6:	e05b      	b.n	800d7a0 <parseBuff_u2+0xd0>
			{
					int index_end_msg = indexOf(parsing_buff,'\r');
 800d6e8:	210d      	movs	r1, #13
 800d6ea:	4831      	ldr	r0, [pc, #196]	; (800d7b0 <parseBuff_u2+0xe0>)
 800d6ec:	f7fa fac2 	bl	8007c74 <indexOf>
 800d6f0:	6178      	str	r0, [r7, #20]
				  if (index_end_msg != 0)
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d045      	beq.n	800d784 <parseBuff_u2+0xb4>
					{
 800d6f8:	466b      	mov	r3, sp
 800d6fa:	461d      	mov	r5, r3
						char buff[index_end_msg];clearArray(buff,index_end_msg);
 800d6fc:	6978      	ldr	r0, [r7, #20]
 800d6fe:	1e43      	subs	r3, r0, #1
 800d700:	613b      	str	r3, [r7, #16]
 800d702:	4603      	mov	r3, r0
 800d704:	4619      	mov	r1, r3
 800d706:	f04f 0200 	mov.w	r2, #0
 800d70a:	f04f 0300 	mov.w	r3, #0
 800d70e:	f04f 0400 	mov.w	r4, #0
 800d712:	00d4      	lsls	r4, r2, #3
 800d714:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d718:	00cb      	lsls	r3, r1, #3
 800d71a:	4603      	mov	r3, r0
 800d71c:	4619      	mov	r1, r3
 800d71e:	f04f 0200 	mov.w	r2, #0
 800d722:	f04f 0300 	mov.w	r3, #0
 800d726:	f04f 0400 	mov.w	r4, #0
 800d72a:	00d4      	lsls	r4, r2, #3
 800d72c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d730:	00cb      	lsls	r3, r1, #3
 800d732:	4603      	mov	r3, r0
 800d734:	3307      	adds	r3, #7
 800d736:	08db      	lsrs	r3, r3, #3
 800d738:	00db      	lsls	r3, r3, #3
 800d73a:	ebad 0d03 	sub.w	sp, sp, r3
 800d73e:	466b      	mov	r3, sp
 800d740:	3300      	adds	r3, #0
 800d742:	60fb      	str	r3, [r7, #12]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6979      	ldr	r1, [r7, #20]
 800d748:	4618      	mov	r0, r3
 800d74a:	f7fa fa78 	bl	8007c3e <clearArray>
						substring(parsing_buff,buff,0,index_end_msg);
 800d74e:	68f9      	ldr	r1, [r7, #12]
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	2200      	movs	r2, #0
 800d754:	4816      	ldr	r0, [pc, #88]	; (800d7b0 <parseBuff_u2+0xe0>)
 800d756:	f7fa fad7 	bl	8007d08 <substring>
					//	trimChar(buff,buff,'\n');
						if (length(buff)>0)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	4618      	mov	r0, r3
 800d75e:	f7fa fa37 	bl	8007bd0 <length>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	dd0c      	ble.n	800d782 <parseBuff_u2+0xb2>
							{
								//===========Здесь обрабатываем сообщения , лежащие в buff

							//	parse_AT(buff);
								PARSE_VOID_SCRIPT
 800d768:	68fc      	ldr	r4, [r7, #12]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fa fa2f 	bl	8007bd0 <length>
 800d772:	4603      	mov	r3, r0
 800d774:	b29a      	uxth	r2, r3
 800d776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d77a:	4621      	mov	r1, r4
 800d77c:	480d      	ldr	r0, [pc, #52]	; (800d7b4 <parseBuff_u2+0xe4>)
 800d77e:	f7f7 f827 	bl	80047d0 <HAL_UART_Transmit>
 800d782:	46ad      	mov	sp, r5
							//	printstr_u2(buff);
								//===================================
							}
					}

				  substring(parsing_buff,parsing_buff,index_end_msg+1,length(parsing_buff));
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	1c5c      	adds	r4, r3, #1
 800d788:	4809      	ldr	r0, [pc, #36]	; (800d7b0 <parseBuff_u2+0xe0>)
 800d78a:	f7fa fa21 	bl	8007bd0 <length>
 800d78e:	4603      	mov	r3, r0
 800d790:	4622      	mov	r2, r4
 800d792:	4907      	ldr	r1, [pc, #28]	; (800d7b0 <parseBuff_u2+0xe0>)
 800d794:	4806      	ldr	r0, [pc, #24]	; (800d7b0 <parseBuff_u2+0xe0>)
 800d796:	f7fa fab7 	bl	8007d08 <substring>
			for (int i=0; i<cycle_parses; i++)
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	3301      	adds	r3, #1
 800d79e:	61fb      	str	r3, [r7, #28]
 800d7a0:	69fa      	ldr	r2, [r7, #28]
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	db9f      	blt.n	800d6e8 <parseBuff_u2+0x18>

			}
}
 800d7a8:	bf00      	nop
 800d7aa:	3720      	adds	r7, #32
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bdb0      	pop	{r4, r5, r7, pc}
 800d7b0:	240006d0 	.word	0x240006d0
 800d7b4:	24000984 	.word	0x24000984

0800d7b8 <printstr_u2>:
	UART_TX(buff);
	UART_TX("\r\n");
}

void printstr_u2(char *str)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
	//addChar(str,str,'\r');
	UART_TX(str);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f7fa fa05 	bl	8007bd0 <length>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7ce:	6879      	ldr	r1, [r7, #4]
 800d7d0:	4808      	ldr	r0, [pc, #32]	; (800d7f4 <printstr_u2+0x3c>)
 800d7d2:	f7f6 fffd 	bl	80047d0 <HAL_UART_Transmit>
	UART_TX("\r\n");
 800d7d6:	4808      	ldr	r0, [pc, #32]	; (800d7f8 <printstr_u2+0x40>)
 800d7d8:	f7fa f9fa 	bl	8007bd0 <length>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7e4:	4904      	ldr	r1, [pc, #16]	; (800d7f8 <printstr_u2+0x40>)
 800d7e6:	4803      	ldr	r0, [pc, #12]	; (800d7f4 <printstr_u2+0x3c>)
 800d7e8:	f7f6 fff2 	bl	80047d0 <HAL_UART_Transmit>
}
 800d7ec:	bf00      	nop
 800d7ee:	3708      	adds	r7, #8
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	24000984 	.word	0x24000984
 800d7f8:	08010dd4 	.word	0x08010dd4

0800d7fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800d7fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d834 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d800:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d802:	e003      	b.n	800d80c <LoopCopyDataInit>

0800d804 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d804:	4b0c      	ldr	r3, [pc, #48]	; (800d838 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d806:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d808:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d80a:	3104      	adds	r1, #4

0800d80c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d80c:	480b      	ldr	r0, [pc, #44]	; (800d83c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d80e:	4b0c      	ldr	r3, [pc, #48]	; (800d840 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d810:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d812:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d814:	d3f6      	bcc.n	800d804 <CopyDataInit>
  ldr  r2, =_sbss
 800d816:	4a0b      	ldr	r2, [pc, #44]	; (800d844 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d818:	e002      	b.n	800d820 <LoopFillZerobss>

0800d81a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d81a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d81c:	f842 3b04 	str.w	r3, [r2], #4

0800d820 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d820:	4b09      	ldr	r3, [pc, #36]	; (800d848 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d822:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d824:	d3f9      	bcc.n	800d81a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d826:	f7ff fc31 	bl	800d08c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d82a:	f000 f81d 	bl	800d868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d82e:	f7fb fd17 	bl	8009260 <main>
  bx  lr    
 800d832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800d834:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800d838:	08011140 	.word	0x08011140
  ldr  r0, =_sdata
 800d83c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800d840:	2400027c 	.word	0x2400027c
  ldr  r2, =_sbss
 800d844:	2400027c 	.word	0x2400027c
  ldr  r3, = _ebss
 800d848:	24001fa4 	.word	0x24001fa4

0800d84c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d84c:	e7fe      	b.n	800d84c <ADC3_IRQHandler>

0800d84e <atof>:
 800d84e:	2100      	movs	r1, #0
 800d850:	f000 be3a 	b.w	800e4c8 <strtod>

0800d854 <atoi>:
 800d854:	220a      	movs	r2, #10
 800d856:	2100      	movs	r1, #0
 800d858:	f000 bec6 	b.w	800e5e8 <strtol>

0800d85c <__errno>:
 800d85c:	4b01      	ldr	r3, [pc, #4]	; (800d864 <__errno+0x8>)
 800d85e:	6818      	ldr	r0, [r3, #0]
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	240000a8 	.word	0x240000a8

0800d868 <__libc_init_array>:
 800d868:	b570      	push	{r4, r5, r6, lr}
 800d86a:	4e0d      	ldr	r6, [pc, #52]	; (800d8a0 <__libc_init_array+0x38>)
 800d86c:	4c0d      	ldr	r4, [pc, #52]	; (800d8a4 <__libc_init_array+0x3c>)
 800d86e:	1ba4      	subs	r4, r4, r6
 800d870:	10a4      	asrs	r4, r4, #2
 800d872:	2500      	movs	r5, #0
 800d874:	42a5      	cmp	r5, r4
 800d876:	d109      	bne.n	800d88c <__libc_init_array+0x24>
 800d878:	4e0b      	ldr	r6, [pc, #44]	; (800d8a8 <__libc_init_array+0x40>)
 800d87a:	4c0c      	ldr	r4, [pc, #48]	; (800d8ac <__libc_init_array+0x44>)
 800d87c:	f003 f85e 	bl	801093c <_init>
 800d880:	1ba4      	subs	r4, r4, r6
 800d882:	10a4      	asrs	r4, r4, #2
 800d884:	2500      	movs	r5, #0
 800d886:	42a5      	cmp	r5, r4
 800d888:	d105      	bne.n	800d896 <__libc_init_array+0x2e>
 800d88a:	bd70      	pop	{r4, r5, r6, pc}
 800d88c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d890:	4798      	blx	r3
 800d892:	3501      	adds	r5, #1
 800d894:	e7ee      	b.n	800d874 <__libc_init_array+0xc>
 800d896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d89a:	4798      	blx	r3
 800d89c:	3501      	adds	r5, #1
 800d89e:	e7f2      	b.n	800d886 <__libc_init_array+0x1e>
 800d8a0:	08011138 	.word	0x08011138
 800d8a4:	08011138 	.word	0x08011138
 800d8a8:	08011138 	.word	0x08011138
 800d8ac:	0801113c 	.word	0x0801113c

0800d8b0 <memset>:
 800d8b0:	4402      	add	r2, r0
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d100      	bne.n	800d8ba <memset+0xa>
 800d8b8:	4770      	bx	lr
 800d8ba:	f803 1b01 	strb.w	r1, [r3], #1
 800d8be:	e7f9      	b.n	800d8b4 <memset+0x4>

0800d8c0 <siprintf>:
 800d8c0:	b40e      	push	{r1, r2, r3}
 800d8c2:	b500      	push	{lr}
 800d8c4:	b09c      	sub	sp, #112	; 0x70
 800d8c6:	ab1d      	add	r3, sp, #116	; 0x74
 800d8c8:	9002      	str	r0, [sp, #8]
 800d8ca:	9006      	str	r0, [sp, #24]
 800d8cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d8d0:	4809      	ldr	r0, [pc, #36]	; (800d8f8 <siprintf+0x38>)
 800d8d2:	9107      	str	r1, [sp, #28]
 800d8d4:	9104      	str	r1, [sp, #16]
 800d8d6:	4909      	ldr	r1, [pc, #36]	; (800d8fc <siprintf+0x3c>)
 800d8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8dc:	9105      	str	r1, [sp, #20]
 800d8de:	6800      	ldr	r0, [r0, #0]
 800d8e0:	9301      	str	r3, [sp, #4]
 800d8e2:	a902      	add	r1, sp, #8
 800d8e4:	f001 fea0 	bl	800f628 <_svfiprintf_r>
 800d8e8:	9b02      	ldr	r3, [sp, #8]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	701a      	strb	r2, [r3, #0]
 800d8ee:	b01c      	add	sp, #112	; 0x70
 800d8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8f4:	b003      	add	sp, #12
 800d8f6:	4770      	bx	lr
 800d8f8:	240000a8 	.word	0x240000a8
 800d8fc:	ffff0208 	.word	0xffff0208

0800d900 <sulp>:
 800d900:	b570      	push	{r4, r5, r6, lr}
 800d902:	4604      	mov	r4, r0
 800d904:	460d      	mov	r5, r1
 800d906:	4616      	mov	r6, r2
 800d908:	ec45 4b10 	vmov	d0, r4, r5
 800d90c:	f001 fc96 	bl	800f23c <__ulp>
 800d910:	b17e      	cbz	r6, 800d932 <sulp+0x32>
 800d912:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d916:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	dd09      	ble.n	800d932 <sulp+0x32>
 800d91e:	051b      	lsls	r3, r3, #20
 800d920:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800d924:	2000      	movs	r0, #0
 800d926:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800d92a:	ec41 0b17 	vmov	d7, r0, r1
 800d92e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d932:	bd70      	pop	{r4, r5, r6, pc}
 800d934:	0000      	movs	r0, r0
	...

0800d938 <_strtod_l>:
 800d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93c:	ed2d 8b0c 	vpush	{d8-d13}
 800d940:	4698      	mov	r8, r3
 800d942:	b09d      	sub	sp, #116	; 0x74
 800d944:	2300      	movs	r3, #0
 800d946:	4604      	mov	r4, r0
 800d948:	4640      	mov	r0, r8
 800d94a:	460e      	mov	r6, r1
 800d94c:	9214      	str	r2, [sp, #80]	; 0x50
 800d94e:	9318      	str	r3, [sp, #96]	; 0x60
 800d950:	f001 f989 	bl	800ec66 <__localeconv_l>
 800d954:	4681      	mov	r9, r0
 800d956:	6800      	ldr	r0, [r0, #0]
 800d958:	f7f2 fcc2 	bl	80002e0 <strlen>
 800d95c:	f04f 0a00 	mov.w	sl, #0
 800d960:	4607      	mov	r7, r0
 800d962:	f04f 0b00 	mov.w	fp, #0
 800d966:	9617      	str	r6, [sp, #92]	; 0x5c
 800d968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d96a:	781a      	ldrb	r2, [r3, #0]
 800d96c:	2a0d      	cmp	r2, #13
 800d96e:	d834      	bhi.n	800d9da <_strtod_l+0xa2>
 800d970:	2a09      	cmp	r2, #9
 800d972:	d238      	bcs.n	800d9e6 <_strtod_l+0xae>
 800d974:	2a00      	cmp	r2, #0
 800d976:	d040      	beq.n	800d9fa <_strtod_l+0xc2>
 800d978:	2300      	movs	r3, #0
 800d97a:	930d      	str	r3, [sp, #52]	; 0x34
 800d97c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800d97e:	782b      	ldrb	r3, [r5, #0]
 800d980:	2b30      	cmp	r3, #48	; 0x30
 800d982:	f040 80b3 	bne.w	800daec <_strtod_l+0x1b4>
 800d986:	786b      	ldrb	r3, [r5, #1]
 800d988:	2b58      	cmp	r3, #88	; 0x58
 800d98a:	d001      	beq.n	800d990 <_strtod_l+0x58>
 800d98c:	2b78      	cmp	r3, #120	; 0x78
 800d98e:	d169      	bne.n	800da64 <_strtod_l+0x12c>
 800d990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d992:	9301      	str	r3, [sp, #4]
 800d994:	ab18      	add	r3, sp, #96	; 0x60
 800d996:	9300      	str	r3, [sp, #0]
 800d998:	f8cd 8008 	str.w	r8, [sp, #8]
 800d99c:	ab19      	add	r3, sp, #100	; 0x64
 800d99e:	4a8f      	ldr	r2, [pc, #572]	; (800dbdc <_strtod_l+0x2a4>)
 800d9a0:	a917      	add	r1, sp, #92	; 0x5c
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f000 fe85 	bl	800e6b2 <__gethex>
 800d9a8:	f010 0607 	ands.w	r6, r0, #7
 800d9ac:	4607      	mov	r7, r0
 800d9ae:	d005      	beq.n	800d9bc <_strtod_l+0x84>
 800d9b0:	2e06      	cmp	r6, #6
 800d9b2:	d12c      	bne.n	800da0e <_strtod_l+0xd6>
 800d9b4:	3501      	adds	r5, #1
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	9517      	str	r5, [sp, #92]	; 0x5c
 800d9ba:	930d      	str	r3, [sp, #52]	; 0x34
 800d9bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f040 855e 	bne.w	800e480 <_strtod_l+0xb48>
 800d9c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9c6:	b1eb      	cbz	r3, 800da04 <_strtod_l+0xcc>
 800d9c8:	ec4b ab17 	vmov	d7, sl, fp
 800d9cc:	eeb1 0b47 	vneg.f64	d0, d7
 800d9d0:	b01d      	add	sp, #116	; 0x74
 800d9d2:	ecbd 8b0c 	vpop	{d8-d13}
 800d9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9da:	2a2b      	cmp	r2, #43	; 0x2b
 800d9dc:	d015      	beq.n	800da0a <_strtod_l+0xd2>
 800d9de:	2a2d      	cmp	r2, #45	; 0x2d
 800d9e0:	d004      	beq.n	800d9ec <_strtod_l+0xb4>
 800d9e2:	2a20      	cmp	r2, #32
 800d9e4:	d1c8      	bne.n	800d978 <_strtod_l+0x40>
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d9ea:	e7bd      	b.n	800d968 <_strtod_l+0x30>
 800d9ec:	2201      	movs	r2, #1
 800d9ee:	920d      	str	r2, [sp, #52]	; 0x34
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	9217      	str	r2, [sp, #92]	; 0x5c
 800d9f4:	785b      	ldrb	r3, [r3, #1]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1c0      	bne.n	800d97c <_strtod_l+0x44>
 800d9fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9fc:	9617      	str	r6, [sp, #92]	; 0x5c
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f040 853c 	bne.w	800e47c <_strtod_l+0xb44>
 800da04:	ec4b ab10 	vmov	d0, sl, fp
 800da08:	e7e2      	b.n	800d9d0 <_strtod_l+0x98>
 800da0a:	2200      	movs	r2, #0
 800da0c:	e7ef      	b.n	800d9ee <_strtod_l+0xb6>
 800da0e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da10:	b13a      	cbz	r2, 800da22 <_strtod_l+0xea>
 800da12:	2135      	movs	r1, #53	; 0x35
 800da14:	a81a      	add	r0, sp, #104	; 0x68
 800da16:	f001 fd0a 	bl	800f42e <__copybits>
 800da1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da1c:	4620      	mov	r0, r4
 800da1e:	f001 f975 	bl	800ed0c <_Bfree>
 800da22:	3e01      	subs	r6, #1
 800da24:	2e04      	cmp	r6, #4
 800da26:	d806      	bhi.n	800da36 <_strtod_l+0xfe>
 800da28:	e8df f006 	tbb	[pc, r6]
 800da2c:	1714030a 	.word	0x1714030a
 800da30:	0a          	.byte	0x0a
 800da31:	00          	.byte	0x00
 800da32:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800da36:	073b      	lsls	r3, r7, #28
 800da38:	d5c0      	bpl.n	800d9bc <_strtod_l+0x84>
 800da3a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800da3e:	e7bd      	b.n	800d9bc <_strtod_l+0x84>
 800da40:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800da44:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800da46:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800da4a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800da4e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800da52:	e7f0      	b.n	800da36 <_strtod_l+0xfe>
 800da54:	f8df b188 	ldr.w	fp, [pc, #392]	; 800dbe0 <_strtod_l+0x2a8>
 800da58:	e7ed      	b.n	800da36 <_strtod_l+0xfe>
 800da5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800da5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800da62:	e7e8      	b.n	800da36 <_strtod_l+0xfe>
 800da64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da66:	1c5a      	adds	r2, r3, #1
 800da68:	9217      	str	r2, [sp, #92]	; 0x5c
 800da6a:	785b      	ldrb	r3, [r3, #1]
 800da6c:	2b30      	cmp	r3, #48	; 0x30
 800da6e:	d0f9      	beq.n	800da64 <_strtod_l+0x12c>
 800da70:	2b00      	cmp	r3, #0
 800da72:	d0a3      	beq.n	800d9bc <_strtod_l+0x84>
 800da74:	2301      	movs	r3, #1
 800da76:	930a      	str	r3, [sp, #40]	; 0x28
 800da78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da7a:	930c      	str	r3, [sp, #48]	; 0x30
 800da7c:	2300      	movs	r3, #0
 800da7e:	9306      	str	r3, [sp, #24]
 800da80:	9308      	str	r3, [sp, #32]
 800da82:	461d      	mov	r5, r3
 800da84:	220a      	movs	r2, #10
 800da86:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800da88:	f890 8000 	ldrb.w	r8, [r0]
 800da8c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 800da90:	b2d9      	uxtb	r1, r3
 800da92:	2909      	cmp	r1, #9
 800da94:	d92c      	bls.n	800daf0 <_strtod_l+0x1b8>
 800da96:	463a      	mov	r2, r7
 800da98:	f8d9 1000 	ldr.w	r1, [r9]
 800da9c:	f002 f854 	bl	800fb48 <strncmp>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d035      	beq.n	800db10 <_strtod_l+0x1d8>
 800daa4:	2000      	movs	r0, #0
 800daa6:	4642      	mov	r2, r8
 800daa8:	462b      	mov	r3, r5
 800daaa:	4601      	mov	r1, r0
 800daac:	9004      	str	r0, [sp, #16]
 800daae:	2a65      	cmp	r2, #101	; 0x65
 800dab0:	d001      	beq.n	800dab6 <_strtod_l+0x17e>
 800dab2:	2a45      	cmp	r2, #69	; 0x45
 800dab4:	d117      	bne.n	800dae6 <_strtod_l+0x1ae>
 800dab6:	b923      	cbnz	r3, 800dac2 <_strtod_l+0x18a>
 800dab8:	b910      	cbnz	r0, 800dac0 <_strtod_l+0x188>
 800daba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d09c      	beq.n	800d9fa <_strtod_l+0xc2>
 800dac0:	2300      	movs	r3, #0
 800dac2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800dac4:	1c72      	adds	r2, r6, #1
 800dac6:	9217      	str	r2, [sp, #92]	; 0x5c
 800dac8:	7872      	ldrb	r2, [r6, #1]
 800daca:	2a2b      	cmp	r2, #43	; 0x2b
 800dacc:	f000 8082 	beq.w	800dbd4 <_strtod_l+0x29c>
 800dad0:	2a2d      	cmp	r2, #45	; 0x2d
 800dad2:	d079      	beq.n	800dbc8 <_strtod_l+0x290>
 800dad4:	f04f 0e00 	mov.w	lr, #0
 800dad8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800dadc:	f1bc 0f09 	cmp.w	ip, #9
 800dae0:	f240 8086 	bls.w	800dbf0 <_strtod_l+0x2b8>
 800dae4:	9617      	str	r6, [sp, #92]	; 0x5c
 800dae6:	f04f 0800 	mov.w	r8, #0
 800daea:	e0a8      	b.n	800dc3e <_strtod_l+0x306>
 800daec:	2300      	movs	r3, #0
 800daee:	e7c2      	b.n	800da76 <_strtod_l+0x13e>
 800daf0:	2d08      	cmp	r5, #8
 800daf2:	bfd5      	itete	le
 800daf4:	9908      	ldrle	r1, [sp, #32]
 800daf6:	9906      	ldrgt	r1, [sp, #24]
 800daf8:	fb02 3301 	mlale	r3, r2, r1, r3
 800dafc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800db00:	f100 0001 	add.w	r0, r0, #1
 800db04:	bfd4      	ite	le
 800db06:	9308      	strle	r3, [sp, #32]
 800db08:	9306      	strgt	r3, [sp, #24]
 800db0a:	3501      	adds	r5, #1
 800db0c:	9017      	str	r0, [sp, #92]	; 0x5c
 800db0e:	e7ba      	b.n	800da86 <_strtod_l+0x14e>
 800db10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db12:	19da      	adds	r2, r3, r7
 800db14:	9217      	str	r2, [sp, #92]	; 0x5c
 800db16:	5dda      	ldrb	r2, [r3, r7]
 800db18:	2d00      	cmp	r5, #0
 800db1a:	d038      	beq.n	800db8e <_strtod_l+0x256>
 800db1c:	4601      	mov	r1, r0
 800db1e:	462b      	mov	r3, r5
 800db20:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800db24:	2f09      	cmp	r7, #9
 800db26:	d913      	bls.n	800db50 <_strtod_l+0x218>
 800db28:	2701      	movs	r7, #1
 800db2a:	9704      	str	r7, [sp, #16]
 800db2c:	e7bf      	b.n	800daae <_strtod_l+0x176>
 800db2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db30:	1c5a      	adds	r2, r3, #1
 800db32:	9217      	str	r2, [sp, #92]	; 0x5c
 800db34:	785a      	ldrb	r2, [r3, #1]
 800db36:	3001      	adds	r0, #1
 800db38:	2a30      	cmp	r2, #48	; 0x30
 800db3a:	d0f8      	beq.n	800db2e <_strtod_l+0x1f6>
 800db3c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800db40:	2b08      	cmp	r3, #8
 800db42:	f200 84a2 	bhi.w	800e48a <_strtod_l+0xb52>
 800db46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db48:	930c      	str	r3, [sp, #48]	; 0x30
 800db4a:	4601      	mov	r1, r0
 800db4c:	2000      	movs	r0, #0
 800db4e:	4603      	mov	r3, r0
 800db50:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 800db54:	f100 0701 	add.w	r7, r0, #1
 800db58:	d013      	beq.n	800db82 <_strtod_l+0x24a>
 800db5a:	4439      	add	r1, r7
 800db5c:	eb00 0e03 	add.w	lr, r0, r3
 800db60:	461f      	mov	r7, r3
 800db62:	f04f 0c0a 	mov.w	ip, #10
 800db66:	45be      	cmp	lr, r7
 800db68:	d113      	bne.n	800db92 <_strtod_l+0x25a>
 800db6a:	181f      	adds	r7, r3, r0
 800db6c:	2f08      	cmp	r7, #8
 800db6e:	f103 0301 	add.w	r3, r3, #1
 800db72:	4403      	add	r3, r0
 800db74:	dc1d      	bgt.n	800dbb2 <_strtod_l+0x27a>
 800db76:	9a08      	ldr	r2, [sp, #32]
 800db78:	200a      	movs	r0, #10
 800db7a:	fb00 8202 	mla	r2, r0, r2, r8
 800db7e:	9208      	str	r2, [sp, #32]
 800db80:	2700      	movs	r7, #0
 800db82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800db84:	1c50      	adds	r0, r2, #1
 800db86:	9017      	str	r0, [sp, #92]	; 0x5c
 800db88:	7852      	ldrb	r2, [r2, #1]
 800db8a:	4638      	mov	r0, r7
 800db8c:	e7c8      	b.n	800db20 <_strtod_l+0x1e8>
 800db8e:	4628      	mov	r0, r5
 800db90:	e7d2      	b.n	800db38 <_strtod_l+0x200>
 800db92:	2f08      	cmp	r7, #8
 800db94:	f107 0701 	add.w	r7, r7, #1
 800db98:	dc04      	bgt.n	800dba4 <_strtod_l+0x26c>
 800db9a:	9a08      	ldr	r2, [sp, #32]
 800db9c:	fb0c f202 	mul.w	r2, ip, r2
 800dba0:	9208      	str	r2, [sp, #32]
 800dba2:	e7e0      	b.n	800db66 <_strtod_l+0x22e>
 800dba4:	2f10      	cmp	r7, #16
 800dba6:	bfde      	ittt	le
 800dba8:	9a06      	ldrle	r2, [sp, #24]
 800dbaa:	fb0c f202 	mulle.w	r2, ip, r2
 800dbae:	9206      	strle	r2, [sp, #24]
 800dbb0:	e7d9      	b.n	800db66 <_strtod_l+0x22e>
 800dbb2:	2b10      	cmp	r3, #16
 800dbb4:	bfdf      	itttt	le
 800dbb6:	9a06      	ldrle	r2, [sp, #24]
 800dbb8:	200a      	movle	r0, #10
 800dbba:	fb00 8202 	mlale	r2, r0, r2, r8
 800dbbe:	9206      	strle	r2, [sp, #24]
 800dbc0:	e7de      	b.n	800db80 <_strtod_l+0x248>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	9304      	str	r3, [sp, #16]
 800dbc6:	e777      	b.n	800dab8 <_strtod_l+0x180>
 800dbc8:	f04f 0e01 	mov.w	lr, #1
 800dbcc:	1cb2      	adds	r2, r6, #2
 800dbce:	9217      	str	r2, [sp, #92]	; 0x5c
 800dbd0:	78b2      	ldrb	r2, [r6, #2]
 800dbd2:	e781      	b.n	800dad8 <_strtod_l+0x1a0>
 800dbd4:	f04f 0e00 	mov.w	lr, #0
 800dbd8:	e7f8      	b.n	800dbcc <_strtod_l+0x294>
 800dbda:	bf00      	nop
 800dbdc:	08010e4c 	.word	0x08010e4c
 800dbe0:	7ff00000 	.word	0x7ff00000
 800dbe4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dbe6:	f102 0c01 	add.w	ip, r2, #1
 800dbea:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800dbee:	7852      	ldrb	r2, [r2, #1]
 800dbf0:	2a30      	cmp	r2, #48	; 0x30
 800dbf2:	d0f7      	beq.n	800dbe4 <_strtod_l+0x2ac>
 800dbf4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 800dbf8:	f1bc 0f08 	cmp.w	ip, #8
 800dbfc:	f63f af73 	bhi.w	800dae6 <_strtod_l+0x1ae>
 800dc00:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 800dc04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc06:	920e      	str	r2, [sp, #56]	; 0x38
 800dc08:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dc0a:	f102 0c01 	add.w	ip, r2, #1
 800dc0e:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 800dc12:	7852      	ldrb	r2, [r2, #1]
 800dc14:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 800dc18:	f1b9 0f09 	cmp.w	r9, #9
 800dc1c:	d939      	bls.n	800dc92 <_strtod_l+0x35a>
 800dc1e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800dc20:	ebac 0c07 	sub.w	ip, ip, r7
 800dc24:	f1bc 0f08 	cmp.w	ip, #8
 800dc28:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 800dc2c:	dc37      	bgt.n	800dc9e <_strtod_l+0x366>
 800dc2e:	45e0      	cmp	r8, ip
 800dc30:	bfa8      	it	ge
 800dc32:	46e0      	movge	r8, ip
 800dc34:	f1be 0f00 	cmp.w	lr, #0
 800dc38:	d001      	beq.n	800dc3e <_strtod_l+0x306>
 800dc3a:	f1c8 0800 	rsb	r8, r8, #0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d151      	bne.n	800dce6 <_strtod_l+0x3ae>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	f47f aeba 	bne.w	800d9bc <_strtod_l+0x84>
 800dc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	f47f aeb6 	bne.w	800d9bc <_strtod_l+0x84>
 800dc50:	9b04      	ldr	r3, [sp, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	f47f aed1 	bne.w	800d9fa <_strtod_l+0xc2>
 800dc58:	2a4e      	cmp	r2, #78	; 0x4e
 800dc5a:	d027      	beq.n	800dcac <_strtod_l+0x374>
 800dc5c:	dc21      	bgt.n	800dca2 <_strtod_l+0x36a>
 800dc5e:	2a49      	cmp	r2, #73	; 0x49
 800dc60:	f47f aecb 	bne.w	800d9fa <_strtod_l+0xc2>
 800dc64:	499a      	ldr	r1, [pc, #616]	; (800ded0 <_strtod_l+0x598>)
 800dc66:	a817      	add	r0, sp, #92	; 0x5c
 800dc68:	f000 ff56 	bl	800eb18 <__match>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f43f aec4 	beq.w	800d9fa <_strtod_l+0xc2>
 800dc72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc74:	4997      	ldr	r1, [pc, #604]	; (800ded4 <_strtod_l+0x59c>)
 800dc76:	3b01      	subs	r3, #1
 800dc78:	a817      	add	r0, sp, #92	; 0x5c
 800dc7a:	9317      	str	r3, [sp, #92]	; 0x5c
 800dc7c:	f000 ff4c 	bl	800eb18 <__match>
 800dc80:	b910      	cbnz	r0, 800dc88 <_strtod_l+0x350>
 800dc82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dc84:	3301      	adds	r3, #1
 800dc86:	9317      	str	r3, [sp, #92]	; 0x5c
 800dc88:	f8df b260 	ldr.w	fp, [pc, #608]	; 800deec <_strtod_l+0x5b4>
 800dc8c:	f04f 0a00 	mov.w	sl, #0
 800dc90:	e694      	b.n	800d9bc <_strtod_l+0x84>
 800dc92:	270a      	movs	r7, #10
 800dc94:	fb07 2808 	mla	r8, r7, r8, r2
 800dc98:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 800dc9c:	e7b4      	b.n	800dc08 <_strtod_l+0x2d0>
 800dc9e:	46e0      	mov	r8, ip
 800dca0:	e7c8      	b.n	800dc34 <_strtod_l+0x2fc>
 800dca2:	2a69      	cmp	r2, #105	; 0x69
 800dca4:	d0de      	beq.n	800dc64 <_strtod_l+0x32c>
 800dca6:	2a6e      	cmp	r2, #110	; 0x6e
 800dca8:	f47f aea7 	bne.w	800d9fa <_strtod_l+0xc2>
 800dcac:	498a      	ldr	r1, [pc, #552]	; (800ded8 <_strtod_l+0x5a0>)
 800dcae:	a817      	add	r0, sp, #92	; 0x5c
 800dcb0:	f000 ff32 	bl	800eb18 <__match>
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	f43f aea0 	beq.w	800d9fa <_strtod_l+0xc2>
 800dcba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	2b28      	cmp	r3, #40	; 0x28
 800dcc0:	d10e      	bne.n	800dce0 <_strtod_l+0x3a8>
 800dcc2:	aa1a      	add	r2, sp, #104	; 0x68
 800dcc4:	4985      	ldr	r1, [pc, #532]	; (800dedc <_strtod_l+0x5a4>)
 800dcc6:	a817      	add	r0, sp, #92	; 0x5c
 800dcc8:	f000 ff3a 	bl	800eb40 <__hexnan>
 800dccc:	2805      	cmp	r0, #5
 800dcce:	d107      	bne.n	800dce0 <_strtod_l+0x3a8>
 800dcd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dcd2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800dcd6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800dcda:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800dcde:	e66d      	b.n	800d9bc <_strtod_l+0x84>
 800dce0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 800def0 <_strtod_l+0x5b8>
 800dce4:	e7d2      	b.n	800dc8c <_strtod_l+0x354>
 800dce6:	eddd 7a08 	vldr	s15, [sp, #32]
 800dcea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dcee:	eba8 0201 	sub.w	r2, r8, r1
 800dcf2:	2d00      	cmp	r5, #0
 800dcf4:	bf08      	it	eq
 800dcf6:	461d      	moveq	r5, r3
 800dcf8:	2b10      	cmp	r3, #16
 800dcfa:	9204      	str	r2, [sp, #16]
 800dcfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dd00:	461a      	mov	r2, r3
 800dd02:	bfa8      	it	ge
 800dd04:	2210      	movge	r2, #16
 800dd06:	2b09      	cmp	r3, #9
 800dd08:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800dd0c:	dc14      	bgt.n	800dd38 <_strtod_l+0x400>
 800dd0e:	9904      	ldr	r1, [sp, #16]
 800dd10:	2900      	cmp	r1, #0
 800dd12:	f43f ae53 	beq.w	800d9bc <_strtod_l+0x84>
 800dd16:	9904      	ldr	r1, [sp, #16]
 800dd18:	dd72      	ble.n	800de00 <_strtod_l+0x4c8>
 800dd1a:	2916      	cmp	r1, #22
 800dd1c:	dc5a      	bgt.n	800ddd4 <_strtod_l+0x49c>
 800dd1e:	4970      	ldr	r1, [pc, #448]	; (800dee0 <_strtod_l+0x5a8>)
 800dd20:	9b04      	ldr	r3, [sp, #16]
 800dd22:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dd26:	ed91 7b00 	vldr	d7, [r1]
 800dd2a:	ec4b ab16 	vmov	d6, sl, fp
 800dd2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd32:	ec5b ab17 	vmov	sl, fp, d7
 800dd36:	e641      	b.n	800d9bc <_strtod_l+0x84>
 800dd38:	4969      	ldr	r1, [pc, #420]	; (800dee0 <_strtod_l+0x5a8>)
 800dd3a:	eddd 7a06 	vldr	s15, [sp, #24]
 800dd3e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dd42:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800dd46:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800dd4a:	2b0f      	cmp	r3, #15
 800dd4c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dd50:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dd54:	ec5b ab17 	vmov	sl, fp, d7
 800dd58:	ddd9      	ble.n	800dd0e <_strtod_l+0x3d6>
 800dd5a:	9904      	ldr	r1, [sp, #16]
 800dd5c:	1a9a      	subs	r2, r3, r2
 800dd5e:	440a      	add	r2, r1
 800dd60:	2a00      	cmp	r2, #0
 800dd62:	f340 8096 	ble.w	800de92 <_strtod_l+0x55a>
 800dd66:	f012 000f 	ands.w	r0, r2, #15
 800dd6a:	d00a      	beq.n	800dd82 <_strtod_l+0x44a>
 800dd6c:	495c      	ldr	r1, [pc, #368]	; (800dee0 <_strtod_l+0x5a8>)
 800dd6e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dd72:	ed91 7b00 	vldr	d7, [r1]
 800dd76:	ec4b ab16 	vmov	d6, sl, fp
 800dd7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dd7e:	ec5b ab17 	vmov	sl, fp, d7
 800dd82:	f032 020f 	bics.w	r2, r2, #15
 800dd86:	d072      	beq.n	800de6e <_strtod_l+0x536>
 800dd88:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800dd8c:	dd45      	ble.n	800de1a <_strtod_l+0x4e2>
 800dd8e:	2500      	movs	r5, #0
 800dd90:	46a8      	mov	r8, r5
 800dd92:	9506      	str	r5, [sp, #24]
 800dd94:	46a9      	mov	r9, r5
 800dd96:	2322      	movs	r3, #34	; 0x22
 800dd98:	f8df b150 	ldr.w	fp, [pc, #336]	; 800deec <_strtod_l+0x5b4>
 800dd9c:	6023      	str	r3, [r4, #0]
 800dd9e:	f04f 0a00 	mov.w	sl, #0
 800dda2:	9b06      	ldr	r3, [sp, #24]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f43f ae09 	beq.w	800d9bc <_strtod_l+0x84>
 800ddaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ddac:	4620      	mov	r0, r4
 800ddae:	f000 ffad 	bl	800ed0c <_Bfree>
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f000 ffa9 	bl	800ed0c <_Bfree>
 800ddba:	4641      	mov	r1, r8
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	f000 ffa5 	bl	800ed0c <_Bfree>
 800ddc2:	9906      	ldr	r1, [sp, #24]
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f000 ffa1 	bl	800ed0c <_Bfree>
 800ddca:	4629      	mov	r1, r5
 800ddcc:	4620      	mov	r0, r4
 800ddce:	f000 ff9d 	bl	800ed0c <_Bfree>
 800ddd2:	e5f3      	b.n	800d9bc <_strtod_l+0x84>
 800ddd4:	9804      	ldr	r0, [sp, #16]
 800ddd6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800ddda:	4281      	cmp	r1, r0
 800dddc:	dbbd      	blt.n	800dd5a <_strtod_l+0x422>
 800ddde:	4a40      	ldr	r2, [pc, #256]	; (800dee0 <_strtod_l+0x5a8>)
 800dde0:	f1c3 030f 	rsb	r3, r3, #15
 800dde4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800dde8:	ed91 7b00 	vldr	d7, [r1]
 800ddec:	ec4b ab16 	vmov	d6, sl, fp
 800ddf0:	1ac3      	subs	r3, r0, r3
 800ddf2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ddf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ddfa:	ed92 6b00 	vldr	d6, [r2]
 800ddfe:	e796      	b.n	800dd2e <_strtod_l+0x3f6>
 800de00:	3116      	adds	r1, #22
 800de02:	dbaa      	blt.n	800dd5a <_strtod_l+0x422>
 800de04:	4936      	ldr	r1, [pc, #216]	; (800dee0 <_strtod_l+0x5a8>)
 800de06:	9b04      	ldr	r3, [sp, #16]
 800de08:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 800de0c:	ed91 7b00 	vldr	d7, [r1]
 800de10:	ec4b ab16 	vmov	d6, sl, fp
 800de14:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800de18:	e78b      	b.n	800dd32 <_strtod_l+0x3fa>
 800de1a:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800de1e:	2000      	movs	r0, #0
 800de20:	4e30      	ldr	r6, [pc, #192]	; (800dee4 <_strtod_l+0x5ac>)
 800de22:	1112      	asrs	r2, r2, #4
 800de24:	4601      	mov	r1, r0
 800de26:	2a01      	cmp	r2, #1
 800de28:	dc23      	bgt.n	800de72 <_strtod_l+0x53a>
 800de2a:	b108      	cbz	r0, 800de30 <_strtod_l+0x4f8>
 800de2c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800de30:	4a2c      	ldr	r2, [pc, #176]	; (800dee4 <_strtod_l+0x5ac>)
 800de32:	482d      	ldr	r0, [pc, #180]	; (800dee8 <_strtod_l+0x5b0>)
 800de34:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800de38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800de3c:	ed91 7b00 	vldr	d7, [r1]
 800de40:	ec4b ab16 	vmov	d6, sl, fp
 800de44:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de48:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de4c:	9907      	ldr	r1, [sp, #28]
 800de4e:	4a27      	ldr	r2, [pc, #156]	; (800deec <_strtod_l+0x5b4>)
 800de50:	400a      	ands	r2, r1
 800de52:	4282      	cmp	r2, r0
 800de54:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800de58:	d899      	bhi.n	800dd8e <_strtod_l+0x456>
 800de5a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800de5e:	4282      	cmp	r2, r0
 800de60:	bf86      	itte	hi
 800de62:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800def4 <_strtod_l+0x5bc>
 800de66:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800de6a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 800de6e:	2700      	movs	r7, #0
 800de70:	e070      	b.n	800df54 <_strtod_l+0x61c>
 800de72:	07d7      	lsls	r7, r2, #31
 800de74:	d50a      	bpl.n	800de8c <_strtod_l+0x554>
 800de76:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 800de7a:	ed90 7b00 	vldr	d7, [r0]
 800de7e:	ed9d 6b06 	vldr	d6, [sp, #24]
 800de82:	ee26 7b07 	vmul.f64	d7, d6, d7
 800de86:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de8a:	2001      	movs	r0, #1
 800de8c:	3101      	adds	r1, #1
 800de8e:	1052      	asrs	r2, r2, #1
 800de90:	e7c9      	b.n	800de26 <_strtod_l+0x4ee>
 800de92:	d0ec      	beq.n	800de6e <_strtod_l+0x536>
 800de94:	4252      	negs	r2, r2
 800de96:	f012 000f 	ands.w	r0, r2, #15
 800de9a:	d00a      	beq.n	800deb2 <_strtod_l+0x57a>
 800de9c:	4910      	ldr	r1, [pc, #64]	; (800dee0 <_strtod_l+0x5a8>)
 800de9e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800dea2:	ed91 7b00 	vldr	d7, [r1]
 800dea6:	ec4b ab16 	vmov	d6, sl, fp
 800deaa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800deae:	ec5b ab17 	vmov	sl, fp, d7
 800deb2:	1112      	asrs	r2, r2, #4
 800deb4:	d0db      	beq.n	800de6e <_strtod_l+0x536>
 800deb6:	2a1f      	cmp	r2, #31
 800deb8:	dd1e      	ble.n	800def8 <_strtod_l+0x5c0>
 800deba:	2500      	movs	r5, #0
 800debc:	46a8      	mov	r8, r5
 800debe:	9506      	str	r5, [sp, #24]
 800dec0:	46a9      	mov	r9, r5
 800dec2:	2322      	movs	r3, #34	; 0x22
 800dec4:	f04f 0a00 	mov.w	sl, #0
 800dec8:	f04f 0b00 	mov.w	fp, #0
 800decc:	6023      	str	r3, [r4, #0]
 800dece:	e768      	b.n	800dda2 <_strtod_l+0x46a>
 800ded0:	08010e40 	.word	0x08010e40
 800ded4:	08010e43 	.word	0x08010e43
 800ded8:	08010e49 	.word	0x08010e49
 800dedc:	08010e60 	.word	0x08010e60
 800dee0:	08010ed8 	.word	0x08010ed8
 800dee4:	08010eb0 	.word	0x08010eb0
 800dee8:	7ca00000 	.word	0x7ca00000
 800deec:	7ff00000 	.word	0x7ff00000
 800def0:	fff80000 	.word	0xfff80000
 800def4:	7fefffff 	.word	0x7fefffff
 800def8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800defc:	f012 0710 	ands.w	r7, r2, #16
 800df00:	49ab      	ldr	r1, [pc, #684]	; (800e1b0 <_strtod_l+0x878>)
 800df02:	bf18      	it	ne
 800df04:	276a      	movne	r7, #106	; 0x6a
 800df06:	2000      	movs	r0, #0
 800df08:	2a00      	cmp	r2, #0
 800df0a:	f300 8113 	bgt.w	800e134 <_strtod_l+0x7fc>
 800df0e:	b108      	cbz	r0, 800df14 <_strtod_l+0x5dc>
 800df10:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800df14:	b1bf      	cbz	r7, 800df46 <_strtod_l+0x60e>
 800df16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800df1a:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800df1e:	2a00      	cmp	r2, #0
 800df20:	4659      	mov	r1, fp
 800df22:	dd10      	ble.n	800df46 <_strtod_l+0x60e>
 800df24:	2a1f      	cmp	r2, #31
 800df26:	f340 8113 	ble.w	800e150 <_strtod_l+0x818>
 800df2a:	2a34      	cmp	r2, #52	; 0x34
 800df2c:	bfde      	ittt	le
 800df2e:	3a20      	suble	r2, #32
 800df30:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 800df34:	fa00 f202 	lslle.w	r2, r0, r2
 800df38:	f04f 0a00 	mov.w	sl, #0
 800df3c:	bfcc      	ite	gt
 800df3e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800df42:	ea02 0b01 	andle.w	fp, r2, r1
 800df46:	ec4b ab17 	vmov	d7, sl, fp
 800df4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df52:	d0b2      	beq.n	800deba <_strtod_l+0x582>
 800df54:	9a08      	ldr	r2, [sp, #32]
 800df56:	9200      	str	r2, [sp, #0]
 800df58:	990c      	ldr	r1, [sp, #48]	; 0x30
 800df5a:	462a      	mov	r2, r5
 800df5c:	4620      	mov	r0, r4
 800df5e:	f000 ff27 	bl	800edb0 <__s2b>
 800df62:	9006      	str	r0, [sp, #24]
 800df64:	2800      	cmp	r0, #0
 800df66:	f43f af12 	beq.w	800dd8e <_strtod_l+0x456>
 800df6a:	9a04      	ldr	r2, [sp, #16]
 800df6c:	9b04      	ldr	r3, [sp, #16]
 800df6e:	2a00      	cmp	r2, #0
 800df70:	f1c3 0300 	rsb	r3, r3, #0
 800df74:	ed9f 9b88 	vldr	d9, [pc, #544]	; 800e198 <_strtod_l+0x860>
 800df78:	bfa8      	it	ge
 800df7a:	2300      	movge	r3, #0
 800df7c:	ed9f ab88 	vldr	d10, [pc, #544]	; 800e1a0 <_strtod_l+0x868>
 800df80:	ed9f bb89 	vldr	d11, [pc, #548]	; 800e1a8 <_strtod_l+0x870>
 800df84:	930e      	str	r3, [sp, #56]	; 0x38
 800df86:	2500      	movs	r5, #0
 800df88:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800df8c:	9310      	str	r3, [sp, #64]	; 0x40
 800df8e:	46a8      	mov	r8, r5
 800df90:	9b06      	ldr	r3, [sp, #24]
 800df92:	4620      	mov	r0, r4
 800df94:	6859      	ldr	r1, [r3, #4]
 800df96:	f000 fe85 	bl	800eca4 <_Balloc>
 800df9a:	4681      	mov	r9, r0
 800df9c:	2800      	cmp	r0, #0
 800df9e:	f43f aefa 	beq.w	800dd96 <_strtod_l+0x45e>
 800dfa2:	9b06      	ldr	r3, [sp, #24]
 800dfa4:	691a      	ldr	r2, [r3, #16]
 800dfa6:	3202      	adds	r2, #2
 800dfa8:	f103 010c 	add.w	r1, r3, #12
 800dfac:	0092      	lsls	r2, r2, #2
 800dfae:	300c      	adds	r0, #12
 800dfb0:	f000 fe6d 	bl	800ec8e <memcpy>
 800dfb4:	aa1a      	add	r2, sp, #104	; 0x68
 800dfb6:	a919      	add	r1, sp, #100	; 0x64
 800dfb8:	ec4b ab10 	vmov	d0, sl, fp
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800dfc2:	f001 f9b1 	bl	800f328 <__d2b>
 800dfc6:	9018      	str	r0, [sp, #96]	; 0x60
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	f43f aee4 	beq.w	800dd96 <_strtod_l+0x45e>
 800dfce:	2101      	movs	r1, #1
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f000 ff79 	bl	800eec8 <__i2b>
 800dfd6:	4680      	mov	r8, r0
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	f43f aedc 	beq.w	800dd96 <_strtod_l+0x45e>
 800dfde:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800dfe0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dfe2:	2e00      	cmp	r6, #0
 800dfe4:	bfb1      	iteee	lt
 800dfe6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 800dfe8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800dfea:	9810      	ldrge	r0, [sp, #64]	; 0x40
 800dfec:	18f3      	addge	r3, r6, r3
 800dfee:	bfba      	itte	lt
 800dff0:	1b98      	sublt	r0, r3, r6
 800dff2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800dff4:	9308      	strge	r3, [sp, #32]
 800dff6:	eba6 0607 	sub.w	r6, r6, r7
 800dffa:	bfb8      	it	lt
 800dffc:	9308      	strlt	r3, [sp, #32]
 800dffe:	4416      	add	r6, r2
 800e000:	4b6c      	ldr	r3, [pc, #432]	; (800e1b4 <_strtod_l+0x87c>)
 800e002:	3e01      	subs	r6, #1
 800e004:	429e      	cmp	r6, r3
 800e006:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e00a:	f280 80b4 	bge.w	800e176 <_strtod_l+0x83e>
 800e00e:	1b9b      	subs	r3, r3, r6
 800e010:	2b1f      	cmp	r3, #31
 800e012:	eba2 0203 	sub.w	r2, r2, r3
 800e016:	f04f 0101 	mov.w	r1, #1
 800e01a:	f300 80a0 	bgt.w	800e15e <_strtod_l+0x826>
 800e01e:	fa01 f303 	lsl.w	r3, r1, r3
 800e022:	9311      	str	r3, [sp, #68]	; 0x44
 800e024:	2300      	movs	r3, #0
 800e026:	930f      	str	r3, [sp, #60]	; 0x3c
 800e028:	9b08      	ldr	r3, [sp, #32]
 800e02a:	4413      	add	r3, r2
 800e02c:	4402      	add	r2, r0
 800e02e:	18be      	adds	r6, r7, r2
 800e030:	9a08      	ldr	r2, [sp, #32]
 800e032:	429a      	cmp	r2, r3
 800e034:	bfa8      	it	ge
 800e036:	461a      	movge	r2, r3
 800e038:	42b2      	cmp	r2, r6
 800e03a:	bfa8      	it	ge
 800e03c:	4632      	movge	r2, r6
 800e03e:	2a00      	cmp	r2, #0
 800e040:	dd04      	ble.n	800e04c <_strtod_l+0x714>
 800e042:	9908      	ldr	r1, [sp, #32]
 800e044:	1a9b      	subs	r3, r3, r2
 800e046:	1ab6      	subs	r6, r6, r2
 800e048:	1a8a      	subs	r2, r1, r2
 800e04a:	9208      	str	r2, [sp, #32]
 800e04c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e04e:	b1c2      	cbz	r2, 800e082 <_strtod_l+0x74a>
 800e050:	4641      	mov	r1, r8
 800e052:	4620      	mov	r0, r4
 800e054:	9315      	str	r3, [sp, #84]	; 0x54
 800e056:	f000 ffd7 	bl	800f008 <__pow5mult>
 800e05a:	4680      	mov	r8, r0
 800e05c:	2800      	cmp	r0, #0
 800e05e:	f43f ae9a 	beq.w	800dd96 <_strtod_l+0x45e>
 800e062:	4601      	mov	r1, r0
 800e064:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e066:	4620      	mov	r0, r4
 800e068:	f000 ff37 	bl	800eeda <__multiply>
 800e06c:	900c      	str	r0, [sp, #48]	; 0x30
 800e06e:	2800      	cmp	r0, #0
 800e070:	f43f ae91 	beq.w	800dd96 <_strtod_l+0x45e>
 800e074:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e076:	4620      	mov	r0, r4
 800e078:	f000 fe48 	bl	800ed0c <_Bfree>
 800e07c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e080:	9218      	str	r2, [sp, #96]	; 0x60
 800e082:	2b00      	cmp	r3, #0
 800e084:	dc7c      	bgt.n	800e180 <_strtod_l+0x848>
 800e086:	9b04      	ldr	r3, [sp, #16]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	dd08      	ble.n	800e09e <_strtod_l+0x766>
 800e08c:	4649      	mov	r1, r9
 800e08e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e090:	4620      	mov	r0, r4
 800e092:	f000 ffb9 	bl	800f008 <__pow5mult>
 800e096:	4681      	mov	r9, r0
 800e098:	2800      	cmp	r0, #0
 800e09a:	f43f ae7c 	beq.w	800dd96 <_strtod_l+0x45e>
 800e09e:	2e00      	cmp	r6, #0
 800e0a0:	dd08      	ble.n	800e0b4 <_strtod_l+0x77c>
 800e0a2:	4649      	mov	r1, r9
 800e0a4:	4632      	mov	r2, r6
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f000 fffc 	bl	800f0a4 <__lshift>
 800e0ac:	4681      	mov	r9, r0
 800e0ae:	2800      	cmp	r0, #0
 800e0b0:	f43f ae71 	beq.w	800dd96 <_strtod_l+0x45e>
 800e0b4:	9b08      	ldr	r3, [sp, #32]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	dd08      	ble.n	800e0cc <_strtod_l+0x794>
 800e0ba:	4641      	mov	r1, r8
 800e0bc:	461a      	mov	r2, r3
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f000 fff0 	bl	800f0a4 <__lshift>
 800e0c4:	4680      	mov	r8, r0
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	f43f ae65 	beq.w	800dd96 <_strtod_l+0x45e>
 800e0cc:	464a      	mov	r2, r9
 800e0ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	f001 f855 	bl	800f180 <__mdiff>
 800e0d6:	4605      	mov	r5, r0
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	f43f ae5c 	beq.w	800dd96 <_strtod_l+0x45e>
 800e0de:	68c3      	ldr	r3, [r0, #12]
 800e0e0:	930c      	str	r3, [sp, #48]	; 0x30
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	60c3      	str	r3, [r0, #12]
 800e0e6:	4641      	mov	r1, r8
 800e0e8:	f001 f830 	bl	800f14c <__mcmp>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	da63      	bge.n	800e1b8 <_strtod_l+0x880>
 800e0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0f2:	b9e3      	cbnz	r3, 800e12e <_strtod_l+0x7f6>
 800e0f4:	f1ba 0f00 	cmp.w	sl, #0
 800e0f8:	d119      	bne.n	800e12e <_strtod_l+0x7f6>
 800e0fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0fe:	b9b3      	cbnz	r3, 800e12e <_strtod_l+0x7f6>
 800e100:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e104:	0d1b      	lsrs	r3, r3, #20
 800e106:	051b      	lsls	r3, r3, #20
 800e108:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e10c:	d90f      	bls.n	800e12e <_strtod_l+0x7f6>
 800e10e:	696b      	ldr	r3, [r5, #20]
 800e110:	b913      	cbnz	r3, 800e118 <_strtod_l+0x7e0>
 800e112:	692b      	ldr	r3, [r5, #16]
 800e114:	2b01      	cmp	r3, #1
 800e116:	dd0a      	ble.n	800e12e <_strtod_l+0x7f6>
 800e118:	4629      	mov	r1, r5
 800e11a:	2201      	movs	r2, #1
 800e11c:	4620      	mov	r0, r4
 800e11e:	f000 ffc1 	bl	800f0a4 <__lshift>
 800e122:	4641      	mov	r1, r8
 800e124:	4605      	mov	r5, r0
 800e126:	f001 f811 	bl	800f14c <__mcmp>
 800e12a:	2800      	cmp	r0, #0
 800e12c:	dc75      	bgt.n	800e21a <_strtod_l+0x8e2>
 800e12e:	2f00      	cmp	r7, #0
 800e130:	d17f      	bne.n	800e232 <_strtod_l+0x8fa>
 800e132:	e63a      	b.n	800ddaa <_strtod_l+0x472>
 800e134:	07d6      	lsls	r6, r2, #31
 800e136:	d508      	bpl.n	800e14a <_strtod_l+0x812>
 800e138:	ed9d 6b06 	vldr	d6, [sp, #24]
 800e13c:	ed91 7b00 	vldr	d7, [r1]
 800e140:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e144:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e148:	2001      	movs	r0, #1
 800e14a:	1052      	asrs	r2, r2, #1
 800e14c:	3108      	adds	r1, #8
 800e14e:	e6db      	b.n	800df08 <_strtod_l+0x5d0>
 800e150:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e154:	fa01 f202 	lsl.w	r2, r1, r2
 800e158:	ea02 0a0a 	and.w	sl, r2, sl
 800e15c:	e6f3      	b.n	800df46 <_strtod_l+0x60e>
 800e15e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e162:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e166:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e16a:	36e2      	adds	r6, #226	; 0xe2
 800e16c:	fa01 f306 	lsl.w	r3, r1, r6
 800e170:	930f      	str	r3, [sp, #60]	; 0x3c
 800e172:	9111      	str	r1, [sp, #68]	; 0x44
 800e174:	e758      	b.n	800e028 <_strtod_l+0x6f0>
 800e176:	2300      	movs	r3, #0
 800e178:	930f      	str	r3, [sp, #60]	; 0x3c
 800e17a:	2301      	movs	r3, #1
 800e17c:	9311      	str	r3, [sp, #68]	; 0x44
 800e17e:	e753      	b.n	800e028 <_strtod_l+0x6f0>
 800e180:	461a      	mov	r2, r3
 800e182:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e184:	4620      	mov	r0, r4
 800e186:	f000 ff8d 	bl	800f0a4 <__lshift>
 800e18a:	9018      	str	r0, [sp, #96]	; 0x60
 800e18c:	2800      	cmp	r0, #0
 800e18e:	f47f af7a 	bne.w	800e086 <_strtod_l+0x74e>
 800e192:	e600      	b.n	800dd96 <_strtod_l+0x45e>
 800e194:	f3af 8000 	nop.w
 800e198:	94a03595 	.word	0x94a03595
 800e19c:	3fdfffff 	.word	0x3fdfffff
 800e1a0:	35afe535 	.word	0x35afe535
 800e1a4:	3fe00000 	.word	0x3fe00000
 800e1a8:	94a03595 	.word	0x94a03595
 800e1ac:	3fcfffff 	.word	0x3fcfffff
 800e1b0:	08010e78 	.word	0x08010e78
 800e1b4:	fffffc02 	.word	0xfffffc02
 800e1b8:	f8cd b020 	str.w	fp, [sp, #32]
 800e1bc:	f040 8085 	bne.w	800e2ca <_strtod_l+0x992>
 800e1c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1c6:	b322      	cbz	r2, 800e212 <_strtod_l+0x8da>
 800e1c8:	4ab7      	ldr	r2, [pc, #732]	; (800e4a8 <_strtod_l+0xb70>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d154      	bne.n	800e278 <_strtod_l+0x940>
 800e1ce:	4651      	mov	r1, sl
 800e1d0:	b1e7      	cbz	r7, 800e20c <_strtod_l+0x8d4>
 800e1d2:	4bb6      	ldr	r3, [pc, #728]	; (800e4ac <_strtod_l+0xb74>)
 800e1d4:	465a      	mov	r2, fp
 800e1d6:	4013      	ands	r3, r2
 800e1d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e1dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1e0:	d803      	bhi.n	800e1ea <_strtod_l+0x8b2>
 800e1e2:	0d1b      	lsrs	r3, r3, #20
 800e1e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e1e8:	409a      	lsls	r2, r3
 800e1ea:	4291      	cmp	r1, r2
 800e1ec:	d144      	bne.n	800e278 <_strtod_l+0x940>
 800e1ee:	4bb0      	ldr	r3, [pc, #704]	; (800e4b0 <_strtod_l+0xb78>)
 800e1f0:	9a08      	ldr	r2, [sp, #32]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d102      	bne.n	800e1fc <_strtod_l+0x8c4>
 800e1f6:	3101      	adds	r1, #1
 800e1f8:	f43f adcd 	beq.w	800dd96 <_strtod_l+0x45e>
 800e1fc:	4bab      	ldr	r3, [pc, #684]	; (800e4ac <_strtod_l+0xb74>)
 800e1fe:	9a08      	ldr	r2, [sp, #32]
 800e200:	401a      	ands	r2, r3
 800e202:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800e206:	f04f 0a00 	mov.w	sl, #0
 800e20a:	e790      	b.n	800e12e <_strtod_l+0x7f6>
 800e20c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e210:	e7eb      	b.n	800e1ea <_strtod_l+0x8b2>
 800e212:	bb8b      	cbnz	r3, 800e278 <_strtod_l+0x940>
 800e214:	f1ba 0f00 	cmp.w	sl, #0
 800e218:	d12e      	bne.n	800e278 <_strtod_l+0x940>
 800e21a:	465b      	mov	r3, fp
 800e21c:	4aa3      	ldr	r2, [pc, #652]	; (800e4ac <_strtod_l+0xb74>)
 800e21e:	b30f      	cbz	r7, 800e264 <_strtod_l+0x92c>
 800e220:	ea02 010b 	and.w	r1, r2, fp
 800e224:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e228:	dc1c      	bgt.n	800e264 <_strtod_l+0x92c>
 800e22a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e22e:	f77f ae48 	ble.w	800dec2 <_strtod_l+0x58a>
 800e232:	4aa0      	ldr	r2, [pc, #640]	; (800e4b4 <_strtod_l+0xb7c>)
 800e234:	2300      	movs	r3, #0
 800e236:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 800e23a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 800e23e:	ec4b ab17 	vmov	d7, sl, fp
 800e242:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e246:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e24a:	9b05      	ldr	r3, [sp, #20]
 800e24c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e250:	2b00      	cmp	r3, #0
 800e252:	f47f adaa 	bne.w	800ddaa <_strtod_l+0x472>
 800e256:	9b04      	ldr	r3, [sp, #16]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f47f ada6 	bne.w	800ddaa <_strtod_l+0x472>
 800e25e:	2322      	movs	r3, #34	; 0x22
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	e5a2      	b.n	800ddaa <_strtod_l+0x472>
 800e264:	4013      	ands	r3, r2
 800e266:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e26a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e26e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e272:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e276:	e75a      	b.n	800e12e <_strtod_l+0x7f6>
 800e278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e27a:	b18b      	cbz	r3, 800e2a0 <_strtod_l+0x968>
 800e27c:	9a08      	ldr	r2, [sp, #32]
 800e27e:	4213      	tst	r3, r2
 800e280:	f43f af55 	beq.w	800e12e <_strtod_l+0x7f6>
 800e284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e286:	463a      	mov	r2, r7
 800e288:	4650      	mov	r0, sl
 800e28a:	4659      	mov	r1, fp
 800e28c:	b163      	cbz	r3, 800e2a8 <_strtod_l+0x970>
 800e28e:	f7ff fb37 	bl	800d900 <sulp>
 800e292:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800e296:	ee37 7b00 	vadd.f64	d7, d7, d0
 800e29a:	ec5b ab17 	vmov	sl, fp, d7
 800e29e:	e746      	b.n	800e12e <_strtod_l+0x7f6>
 800e2a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2a2:	ea13 0f0a 	tst.w	r3, sl
 800e2a6:	e7eb      	b.n	800e280 <_strtod_l+0x948>
 800e2a8:	f7ff fb2a 	bl	800d900 <sulp>
 800e2ac:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800e2b0:	ee37 7b40 	vsub.f64	d7, d7, d0
 800e2b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e2b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e2c4:	f43f adfd 	beq.w	800dec2 <_strtod_l+0x58a>
 800e2c8:	e731      	b.n	800e12e <_strtod_l+0x7f6>
 800e2ca:	4641      	mov	r1, r8
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	f001 f87a 	bl	800f3c6 <__ratio>
 800e2d2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e2d6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2de:	d869      	bhi.n	800e3b4 <_strtod_l+0xa7c>
 800e2e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d045      	beq.n	800e372 <_strtod_l+0xa3a>
 800e2e6:	4b74      	ldr	r3, [pc, #464]	; (800e4b8 <_strtod_l+0xb80>)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800e2ee:	9808      	ldr	r0, [sp, #32]
 800e2f0:	496e      	ldr	r1, [pc, #440]	; (800e4ac <_strtod_l+0xb74>)
 800e2f2:	ea00 0601 	and.w	r6, r0, r1
 800e2f6:	4871      	ldr	r0, [pc, #452]	; (800e4bc <_strtod_l+0xb84>)
 800e2f8:	4286      	cmp	r6, r0
 800e2fa:	f040 8089 	bne.w	800e410 <_strtod_l+0xad8>
 800e2fe:	910f      	str	r1, [sp, #60]	; 0x3c
 800e300:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e304:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800e308:	9908      	ldr	r1, [sp, #32]
 800e30a:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 800e30e:	ec4b ab10 	vmov	d0, sl, fp
 800e312:	ec43 2b1c 	vmov	d12, r2, r3
 800e316:	f000 ff91 	bl	800f23c <__ulp>
 800e31a:	ec4b ab1d 	vmov	d13, sl, fp
 800e31e:	eeac db00 	vfma.f64	d13, d12, d0
 800e322:	ed8d db08 	vstr	d13, [sp, #32]
 800e326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e328:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e32a:	4a65      	ldr	r2, [pc, #404]	; (800e4c0 <_strtod_l+0xb88>)
 800e32c:	4019      	ands	r1, r3
 800e32e:	4291      	cmp	r1, r2
 800e330:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 800e334:	d948      	bls.n	800e3c8 <_strtod_l+0xa90>
 800e336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e338:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d103      	bne.n	800e348 <_strtod_l+0xa10>
 800e340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e342:	3301      	adds	r3, #1
 800e344:	f43f ad27 	beq.w	800dd96 <_strtod_l+0x45e>
 800e348:	f8df b164 	ldr.w	fp, [pc, #356]	; 800e4b0 <_strtod_l+0xb78>
 800e34c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e350:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e352:	4620      	mov	r0, r4
 800e354:	f000 fcda 	bl	800ed0c <_Bfree>
 800e358:	4649      	mov	r1, r9
 800e35a:	4620      	mov	r0, r4
 800e35c:	f000 fcd6 	bl	800ed0c <_Bfree>
 800e360:	4641      	mov	r1, r8
 800e362:	4620      	mov	r0, r4
 800e364:	f000 fcd2 	bl	800ed0c <_Bfree>
 800e368:	4629      	mov	r1, r5
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 fcce 	bl	800ed0c <_Bfree>
 800e370:	e60e      	b.n	800df90 <_strtod_l+0x658>
 800e372:	f1ba 0f00 	cmp.w	sl, #0
 800e376:	d113      	bne.n	800e3a0 <_strtod_l+0xa68>
 800e378:	9b08      	ldr	r3, [sp, #32]
 800e37a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e37e:	b9b3      	cbnz	r3, 800e3ae <_strtod_l+0xa76>
 800e380:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e384:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e390:	d401      	bmi.n	800e396 <_strtod_l+0xa5e>
 800e392:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e396:	eeb1 7b48 	vneg.f64	d7, d8
 800e39a:	ec53 2b17 	vmov	r2, r3, d7
 800e39e:	e7a6      	b.n	800e2ee <_strtod_l+0x9b6>
 800e3a0:	f1ba 0f01 	cmp.w	sl, #1
 800e3a4:	d103      	bne.n	800e3ae <_strtod_l+0xa76>
 800e3a6:	9b08      	ldr	r3, [sp, #32]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f43f ad8a 	beq.w	800dec2 <_strtod_l+0x58a>
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	4b44      	ldr	r3, [pc, #272]	; (800e4c4 <_strtod_l+0xb8c>)
 800e3b2:	e79a      	b.n	800e2ea <_strtod_l+0x9b2>
 800e3b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3b6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 800e3ba:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d0e9      	beq.n	800e396 <_strtod_l+0xa5e>
 800e3c2:	ec53 2b18 	vmov	r2, r3, d8
 800e3c6:	e792      	b.n	800e2ee <_strtod_l+0x9b6>
 800e3c8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e3cc:	2f00      	cmp	r7, #0
 800e3ce:	d1bf      	bne.n	800e350 <_strtod_l+0xa18>
 800e3d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e3d4:	0d1b      	lsrs	r3, r3, #20
 800e3d6:	051b      	lsls	r3, r3, #20
 800e3d8:	429e      	cmp	r6, r3
 800e3da:	d1b9      	bne.n	800e350 <_strtod_l+0xa18>
 800e3dc:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 800e3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3e2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800e3e6:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e3ea:	b92b      	cbnz	r3, 800e3f8 <_strtod_l+0xac0>
 800e3ec:	f1ba 0f00 	cmp.w	sl, #0
 800e3f0:	d102      	bne.n	800e3f8 <_strtod_l+0xac0>
 800e3f2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800e3f6:	b3d2      	cbz	r2, 800e46e <_strtod_l+0xb36>
 800e3f8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800e3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e400:	f53f acd3 	bmi.w	800ddaa <_strtod_l+0x472>
 800e404:	eeb4 8bca 	vcmpe.f64	d8, d10
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	dda0      	ble.n	800e350 <_strtod_l+0xa18>
 800e40e:	e4cc      	b.n	800ddaa <_strtod_l+0x472>
 800e410:	b1ef      	cbz	r7, 800e44e <_strtod_l+0xb16>
 800e412:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800e416:	d81a      	bhi.n	800e44e <_strtod_l+0xb16>
 800e418:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e4a0 <_strtod_l+0xb68>
 800e41c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e424:	d810      	bhi.n	800e448 <_strtod_l+0xb10>
 800e426:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 800e42a:	ee17 3a90 	vmov	r3, s15
 800e42e:	2b00      	cmp	r3, #0
 800e430:	bf08      	it	eq
 800e432:	2301      	moveq	r3, #1
 800e434:	ee07 3a90 	vmov	s15, r3
 800e438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e43a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 800e43e:	b99b      	cbnz	r3, 800e468 <_strtod_l+0xb30>
 800e440:	eeb1 7b48 	vneg.f64	d7, d8
 800e444:	ec53 2b17 	vmov	r2, r3, d7
 800e448:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 800e44c:	1b8b      	subs	r3, r1, r6
 800e44e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e452:	ec43 2b1c 	vmov	d12, r2, r3
 800e456:	f000 fef1 	bl	800f23c <__ulp>
 800e45a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800e45e:	eeac 7b00 	vfma.f64	d7, d12, d0
 800e462:	ec5b ab17 	vmov	sl, fp, d7
 800e466:	e7b1      	b.n	800e3cc <_strtod_l+0xa94>
 800e468:	ec53 2b18 	vmov	r2, r3, d8
 800e46c:	e7ec      	b.n	800e448 <_strtod_l+0xb10>
 800e46e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e476:	f57f af6b 	bpl.w	800e350 <_strtod_l+0xa18>
 800e47a:	e496      	b.n	800ddaa <_strtod_l+0x472>
 800e47c:	2300      	movs	r3, #0
 800e47e:	930d      	str	r3, [sp, #52]	; 0x34
 800e480:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e482:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e484:	6013      	str	r3, [r2, #0]
 800e486:	f7ff ba9d 	b.w	800d9c4 <_strtod_l+0x8c>
 800e48a:	2a65      	cmp	r2, #101	; 0x65
 800e48c:	f04f 0100 	mov.w	r1, #0
 800e490:	f43f ab97 	beq.w	800dbc2 <_strtod_l+0x28a>
 800e494:	2701      	movs	r7, #1
 800e496:	460b      	mov	r3, r1
 800e498:	9704      	str	r7, [sp, #16]
 800e49a:	f7ff bb0a 	b.w	800dab2 <_strtod_l+0x17a>
 800e49e:	bf00      	nop
 800e4a0:	ffc00000 	.word	0xffc00000
 800e4a4:	41dfffff 	.word	0x41dfffff
 800e4a8:	000fffff 	.word	0x000fffff
 800e4ac:	7ff00000 	.word	0x7ff00000
 800e4b0:	7fefffff 	.word	0x7fefffff
 800e4b4:	39500000 	.word	0x39500000
 800e4b8:	3ff00000 	.word	0x3ff00000
 800e4bc:	7fe00000 	.word	0x7fe00000
 800e4c0:	7c9fffff 	.word	0x7c9fffff
 800e4c4:	bff00000 	.word	0xbff00000

0800e4c8 <strtod>:
 800e4c8:	4b07      	ldr	r3, [pc, #28]	; (800e4e8 <strtod+0x20>)
 800e4ca:	4a08      	ldr	r2, [pc, #32]	; (800e4ec <strtod+0x24>)
 800e4cc:	b410      	push	{r4}
 800e4ce:	681c      	ldr	r4, [r3, #0]
 800e4d0:	6a23      	ldr	r3, [r4, #32]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	bf08      	it	eq
 800e4d6:	4613      	moveq	r3, r2
 800e4d8:	460a      	mov	r2, r1
 800e4da:	4601      	mov	r1, r0
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4e2:	f7ff ba29 	b.w	800d938 <_strtod_l>
 800e4e6:	bf00      	nop
 800e4e8:	240000a8 	.word	0x240000a8
 800e4ec:	2400010c 	.word	0x2400010c

0800e4f0 <_strtol_l.isra.0>:
 800e4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f4:	4680      	mov	r8, r0
 800e4f6:	4689      	mov	r9, r1
 800e4f8:	4692      	mov	sl, r2
 800e4fa:	461e      	mov	r6, r3
 800e4fc:	460f      	mov	r7, r1
 800e4fe:	463d      	mov	r5, r7
 800e500:	9808      	ldr	r0, [sp, #32]
 800e502:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e506:	f000 fbab 	bl	800ec60 <__locale_ctype_ptr_l>
 800e50a:	4420      	add	r0, r4
 800e50c:	7843      	ldrb	r3, [r0, #1]
 800e50e:	f013 0308 	ands.w	r3, r3, #8
 800e512:	d132      	bne.n	800e57a <_strtol_l.isra.0+0x8a>
 800e514:	2c2d      	cmp	r4, #45	; 0x2d
 800e516:	d132      	bne.n	800e57e <_strtol_l.isra.0+0x8e>
 800e518:	787c      	ldrb	r4, [r7, #1]
 800e51a:	1cbd      	adds	r5, r7, #2
 800e51c:	2201      	movs	r2, #1
 800e51e:	2e00      	cmp	r6, #0
 800e520:	d05d      	beq.n	800e5de <_strtol_l.isra.0+0xee>
 800e522:	2e10      	cmp	r6, #16
 800e524:	d109      	bne.n	800e53a <_strtol_l.isra.0+0x4a>
 800e526:	2c30      	cmp	r4, #48	; 0x30
 800e528:	d107      	bne.n	800e53a <_strtol_l.isra.0+0x4a>
 800e52a:	782b      	ldrb	r3, [r5, #0]
 800e52c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e530:	2b58      	cmp	r3, #88	; 0x58
 800e532:	d14f      	bne.n	800e5d4 <_strtol_l.isra.0+0xe4>
 800e534:	786c      	ldrb	r4, [r5, #1]
 800e536:	2610      	movs	r6, #16
 800e538:	3502      	adds	r5, #2
 800e53a:	2a00      	cmp	r2, #0
 800e53c:	bf14      	ite	ne
 800e53e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800e542:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800e546:	2700      	movs	r7, #0
 800e548:	fbb1 fcf6 	udiv	ip, r1, r6
 800e54c:	4638      	mov	r0, r7
 800e54e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800e552:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800e556:	2b09      	cmp	r3, #9
 800e558:	d817      	bhi.n	800e58a <_strtol_l.isra.0+0x9a>
 800e55a:	461c      	mov	r4, r3
 800e55c:	42a6      	cmp	r6, r4
 800e55e:	dd23      	ble.n	800e5a8 <_strtol_l.isra.0+0xb8>
 800e560:	1c7b      	adds	r3, r7, #1
 800e562:	d007      	beq.n	800e574 <_strtol_l.isra.0+0x84>
 800e564:	4584      	cmp	ip, r0
 800e566:	d31c      	bcc.n	800e5a2 <_strtol_l.isra.0+0xb2>
 800e568:	d101      	bne.n	800e56e <_strtol_l.isra.0+0x7e>
 800e56a:	45a6      	cmp	lr, r4
 800e56c:	db19      	blt.n	800e5a2 <_strtol_l.isra.0+0xb2>
 800e56e:	fb00 4006 	mla	r0, r0, r6, r4
 800e572:	2701      	movs	r7, #1
 800e574:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e578:	e7eb      	b.n	800e552 <_strtol_l.isra.0+0x62>
 800e57a:	462f      	mov	r7, r5
 800e57c:	e7bf      	b.n	800e4fe <_strtol_l.isra.0+0xe>
 800e57e:	2c2b      	cmp	r4, #43	; 0x2b
 800e580:	bf04      	itt	eq
 800e582:	1cbd      	addeq	r5, r7, #2
 800e584:	787c      	ldrbeq	r4, [r7, #1]
 800e586:	461a      	mov	r2, r3
 800e588:	e7c9      	b.n	800e51e <_strtol_l.isra.0+0x2e>
 800e58a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800e58e:	2b19      	cmp	r3, #25
 800e590:	d801      	bhi.n	800e596 <_strtol_l.isra.0+0xa6>
 800e592:	3c37      	subs	r4, #55	; 0x37
 800e594:	e7e2      	b.n	800e55c <_strtol_l.isra.0+0x6c>
 800e596:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800e59a:	2b19      	cmp	r3, #25
 800e59c:	d804      	bhi.n	800e5a8 <_strtol_l.isra.0+0xb8>
 800e59e:	3c57      	subs	r4, #87	; 0x57
 800e5a0:	e7dc      	b.n	800e55c <_strtol_l.isra.0+0x6c>
 800e5a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e5a6:	e7e5      	b.n	800e574 <_strtol_l.isra.0+0x84>
 800e5a8:	1c7b      	adds	r3, r7, #1
 800e5aa:	d108      	bne.n	800e5be <_strtol_l.isra.0+0xce>
 800e5ac:	2322      	movs	r3, #34	; 0x22
 800e5ae:	f8c8 3000 	str.w	r3, [r8]
 800e5b2:	4608      	mov	r0, r1
 800e5b4:	f1ba 0f00 	cmp.w	sl, #0
 800e5b8:	d107      	bne.n	800e5ca <_strtol_l.isra.0+0xda>
 800e5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5be:	b102      	cbz	r2, 800e5c2 <_strtol_l.isra.0+0xd2>
 800e5c0:	4240      	negs	r0, r0
 800e5c2:	f1ba 0f00 	cmp.w	sl, #0
 800e5c6:	d0f8      	beq.n	800e5ba <_strtol_l.isra.0+0xca>
 800e5c8:	b10f      	cbz	r7, 800e5ce <_strtol_l.isra.0+0xde>
 800e5ca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800e5ce:	f8ca 9000 	str.w	r9, [sl]
 800e5d2:	e7f2      	b.n	800e5ba <_strtol_l.isra.0+0xca>
 800e5d4:	2430      	movs	r4, #48	; 0x30
 800e5d6:	2e00      	cmp	r6, #0
 800e5d8:	d1af      	bne.n	800e53a <_strtol_l.isra.0+0x4a>
 800e5da:	2608      	movs	r6, #8
 800e5dc:	e7ad      	b.n	800e53a <_strtol_l.isra.0+0x4a>
 800e5de:	2c30      	cmp	r4, #48	; 0x30
 800e5e0:	d0a3      	beq.n	800e52a <_strtol_l.isra.0+0x3a>
 800e5e2:	260a      	movs	r6, #10
 800e5e4:	e7a9      	b.n	800e53a <_strtol_l.isra.0+0x4a>
	...

0800e5e8 <strtol>:
 800e5e8:	4b08      	ldr	r3, [pc, #32]	; (800e60c <strtol+0x24>)
 800e5ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5ec:	681c      	ldr	r4, [r3, #0]
 800e5ee:	4d08      	ldr	r5, [pc, #32]	; (800e610 <strtol+0x28>)
 800e5f0:	6a23      	ldr	r3, [r4, #32]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	bf08      	it	eq
 800e5f6:	462b      	moveq	r3, r5
 800e5f8:	9300      	str	r3, [sp, #0]
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	460a      	mov	r2, r1
 800e5fe:	4601      	mov	r1, r0
 800e600:	4620      	mov	r0, r4
 800e602:	f7ff ff75 	bl	800e4f0 <_strtol_l.isra.0>
 800e606:	b003      	add	sp, #12
 800e608:	bd30      	pop	{r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	240000a8 	.word	0x240000a8
 800e610:	2400010c 	.word	0x2400010c

0800e614 <rshift>:
 800e614:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e616:	6906      	ldr	r6, [r0, #16]
 800e618:	114b      	asrs	r3, r1, #5
 800e61a:	429e      	cmp	r6, r3
 800e61c:	f100 0414 	add.w	r4, r0, #20
 800e620:	dd30      	ble.n	800e684 <rshift+0x70>
 800e622:	f011 011f 	ands.w	r1, r1, #31
 800e626:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e62a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e62e:	d108      	bne.n	800e642 <rshift+0x2e>
 800e630:	4621      	mov	r1, r4
 800e632:	42b2      	cmp	r2, r6
 800e634:	460b      	mov	r3, r1
 800e636:	d211      	bcs.n	800e65c <rshift+0x48>
 800e638:	f852 3b04 	ldr.w	r3, [r2], #4
 800e63c:	f841 3b04 	str.w	r3, [r1], #4
 800e640:	e7f7      	b.n	800e632 <rshift+0x1e>
 800e642:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e646:	f1c1 0c20 	rsb	ip, r1, #32
 800e64a:	40cd      	lsrs	r5, r1
 800e64c:	3204      	adds	r2, #4
 800e64e:	4623      	mov	r3, r4
 800e650:	42b2      	cmp	r2, r6
 800e652:	4617      	mov	r7, r2
 800e654:	d30c      	bcc.n	800e670 <rshift+0x5c>
 800e656:	601d      	str	r5, [r3, #0]
 800e658:	b105      	cbz	r5, 800e65c <rshift+0x48>
 800e65a:	3304      	adds	r3, #4
 800e65c:	1b1a      	subs	r2, r3, r4
 800e65e:	42a3      	cmp	r3, r4
 800e660:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e664:	bf08      	it	eq
 800e666:	2300      	moveq	r3, #0
 800e668:	6102      	str	r2, [r0, #16]
 800e66a:	bf08      	it	eq
 800e66c:	6143      	streq	r3, [r0, #20]
 800e66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e670:	683f      	ldr	r7, [r7, #0]
 800e672:	fa07 f70c 	lsl.w	r7, r7, ip
 800e676:	433d      	orrs	r5, r7
 800e678:	f843 5b04 	str.w	r5, [r3], #4
 800e67c:	f852 5b04 	ldr.w	r5, [r2], #4
 800e680:	40cd      	lsrs	r5, r1
 800e682:	e7e5      	b.n	800e650 <rshift+0x3c>
 800e684:	4623      	mov	r3, r4
 800e686:	e7e9      	b.n	800e65c <rshift+0x48>

0800e688 <__hexdig_fun>:
 800e688:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e68c:	2b09      	cmp	r3, #9
 800e68e:	d802      	bhi.n	800e696 <__hexdig_fun+0xe>
 800e690:	3820      	subs	r0, #32
 800e692:	b2c0      	uxtb	r0, r0
 800e694:	4770      	bx	lr
 800e696:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e69a:	2b05      	cmp	r3, #5
 800e69c:	d801      	bhi.n	800e6a2 <__hexdig_fun+0x1a>
 800e69e:	3847      	subs	r0, #71	; 0x47
 800e6a0:	e7f7      	b.n	800e692 <__hexdig_fun+0xa>
 800e6a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e6a6:	2b05      	cmp	r3, #5
 800e6a8:	d801      	bhi.n	800e6ae <__hexdig_fun+0x26>
 800e6aa:	3827      	subs	r0, #39	; 0x27
 800e6ac:	e7f1      	b.n	800e692 <__hexdig_fun+0xa>
 800e6ae:	2000      	movs	r0, #0
 800e6b0:	4770      	bx	lr

0800e6b2 <__gethex>:
 800e6b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b6:	b08b      	sub	sp, #44	; 0x2c
 800e6b8:	468a      	mov	sl, r1
 800e6ba:	9002      	str	r0, [sp, #8]
 800e6bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e6be:	9306      	str	r3, [sp, #24]
 800e6c0:	4690      	mov	r8, r2
 800e6c2:	f000 fad0 	bl	800ec66 <__localeconv_l>
 800e6c6:	6803      	ldr	r3, [r0, #0]
 800e6c8:	9303      	str	r3, [sp, #12]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f7f1 fe08 	bl	80002e0 <strlen>
 800e6d0:	9b03      	ldr	r3, [sp, #12]
 800e6d2:	9001      	str	r0, [sp, #4]
 800e6d4:	4403      	add	r3, r0
 800e6d6:	f04f 0b00 	mov.w	fp, #0
 800e6da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e6de:	9307      	str	r3, [sp, #28]
 800e6e0:	f8da 3000 	ldr.w	r3, [sl]
 800e6e4:	3302      	adds	r3, #2
 800e6e6:	461f      	mov	r7, r3
 800e6e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e6ec:	2830      	cmp	r0, #48	; 0x30
 800e6ee:	d06c      	beq.n	800e7ca <__gethex+0x118>
 800e6f0:	f7ff ffca 	bl	800e688 <__hexdig_fun>
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d16a      	bne.n	800e7d0 <__gethex+0x11e>
 800e6fa:	9a01      	ldr	r2, [sp, #4]
 800e6fc:	9903      	ldr	r1, [sp, #12]
 800e6fe:	4638      	mov	r0, r7
 800e700:	f001 fa22 	bl	800fb48 <strncmp>
 800e704:	2800      	cmp	r0, #0
 800e706:	d166      	bne.n	800e7d6 <__gethex+0x124>
 800e708:	9b01      	ldr	r3, [sp, #4]
 800e70a:	5cf8      	ldrb	r0, [r7, r3]
 800e70c:	18fe      	adds	r6, r7, r3
 800e70e:	f7ff ffbb 	bl	800e688 <__hexdig_fun>
 800e712:	2800      	cmp	r0, #0
 800e714:	d062      	beq.n	800e7dc <__gethex+0x12a>
 800e716:	4633      	mov	r3, r6
 800e718:	7818      	ldrb	r0, [r3, #0]
 800e71a:	2830      	cmp	r0, #48	; 0x30
 800e71c:	461f      	mov	r7, r3
 800e71e:	f103 0301 	add.w	r3, r3, #1
 800e722:	d0f9      	beq.n	800e718 <__gethex+0x66>
 800e724:	f7ff ffb0 	bl	800e688 <__hexdig_fun>
 800e728:	fab0 f580 	clz	r5, r0
 800e72c:	096d      	lsrs	r5, r5, #5
 800e72e:	4634      	mov	r4, r6
 800e730:	f04f 0b01 	mov.w	fp, #1
 800e734:	463a      	mov	r2, r7
 800e736:	4616      	mov	r6, r2
 800e738:	3201      	adds	r2, #1
 800e73a:	7830      	ldrb	r0, [r6, #0]
 800e73c:	f7ff ffa4 	bl	800e688 <__hexdig_fun>
 800e740:	2800      	cmp	r0, #0
 800e742:	d1f8      	bne.n	800e736 <__gethex+0x84>
 800e744:	9a01      	ldr	r2, [sp, #4]
 800e746:	9903      	ldr	r1, [sp, #12]
 800e748:	4630      	mov	r0, r6
 800e74a:	f001 f9fd 	bl	800fb48 <strncmp>
 800e74e:	b950      	cbnz	r0, 800e766 <__gethex+0xb4>
 800e750:	b954      	cbnz	r4, 800e768 <__gethex+0xb6>
 800e752:	9b01      	ldr	r3, [sp, #4]
 800e754:	18f4      	adds	r4, r6, r3
 800e756:	4622      	mov	r2, r4
 800e758:	4616      	mov	r6, r2
 800e75a:	3201      	adds	r2, #1
 800e75c:	7830      	ldrb	r0, [r6, #0]
 800e75e:	f7ff ff93 	bl	800e688 <__hexdig_fun>
 800e762:	2800      	cmp	r0, #0
 800e764:	d1f8      	bne.n	800e758 <__gethex+0xa6>
 800e766:	b10c      	cbz	r4, 800e76c <__gethex+0xba>
 800e768:	1ba4      	subs	r4, r4, r6
 800e76a:	00a4      	lsls	r4, r4, #2
 800e76c:	7833      	ldrb	r3, [r6, #0]
 800e76e:	2b50      	cmp	r3, #80	; 0x50
 800e770:	d001      	beq.n	800e776 <__gethex+0xc4>
 800e772:	2b70      	cmp	r3, #112	; 0x70
 800e774:	d140      	bne.n	800e7f8 <__gethex+0x146>
 800e776:	7873      	ldrb	r3, [r6, #1]
 800e778:	2b2b      	cmp	r3, #43	; 0x2b
 800e77a:	d031      	beq.n	800e7e0 <__gethex+0x12e>
 800e77c:	2b2d      	cmp	r3, #45	; 0x2d
 800e77e:	d033      	beq.n	800e7e8 <__gethex+0x136>
 800e780:	1c71      	adds	r1, r6, #1
 800e782:	f04f 0900 	mov.w	r9, #0
 800e786:	7808      	ldrb	r0, [r1, #0]
 800e788:	f7ff ff7e 	bl	800e688 <__hexdig_fun>
 800e78c:	1e43      	subs	r3, r0, #1
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	2b18      	cmp	r3, #24
 800e792:	d831      	bhi.n	800e7f8 <__gethex+0x146>
 800e794:	f1a0 0210 	sub.w	r2, r0, #16
 800e798:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e79c:	f7ff ff74 	bl	800e688 <__hexdig_fun>
 800e7a0:	1e43      	subs	r3, r0, #1
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b18      	cmp	r3, #24
 800e7a6:	d922      	bls.n	800e7ee <__gethex+0x13c>
 800e7a8:	f1b9 0f00 	cmp.w	r9, #0
 800e7ac:	d000      	beq.n	800e7b0 <__gethex+0xfe>
 800e7ae:	4252      	negs	r2, r2
 800e7b0:	4414      	add	r4, r2
 800e7b2:	f8ca 1000 	str.w	r1, [sl]
 800e7b6:	b30d      	cbz	r5, 800e7fc <__gethex+0x14a>
 800e7b8:	f1bb 0f00 	cmp.w	fp, #0
 800e7bc:	bf0c      	ite	eq
 800e7be:	2706      	moveq	r7, #6
 800e7c0:	2700      	movne	r7, #0
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	b00b      	add	sp, #44	; 0x2c
 800e7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ca:	f10b 0b01 	add.w	fp, fp, #1
 800e7ce:	e78a      	b.n	800e6e6 <__gethex+0x34>
 800e7d0:	2500      	movs	r5, #0
 800e7d2:	462c      	mov	r4, r5
 800e7d4:	e7ae      	b.n	800e734 <__gethex+0x82>
 800e7d6:	463e      	mov	r6, r7
 800e7d8:	2501      	movs	r5, #1
 800e7da:	e7c7      	b.n	800e76c <__gethex+0xba>
 800e7dc:	4604      	mov	r4, r0
 800e7de:	e7fb      	b.n	800e7d8 <__gethex+0x126>
 800e7e0:	f04f 0900 	mov.w	r9, #0
 800e7e4:	1cb1      	adds	r1, r6, #2
 800e7e6:	e7ce      	b.n	800e786 <__gethex+0xd4>
 800e7e8:	f04f 0901 	mov.w	r9, #1
 800e7ec:	e7fa      	b.n	800e7e4 <__gethex+0x132>
 800e7ee:	230a      	movs	r3, #10
 800e7f0:	fb03 0202 	mla	r2, r3, r2, r0
 800e7f4:	3a10      	subs	r2, #16
 800e7f6:	e7cf      	b.n	800e798 <__gethex+0xe6>
 800e7f8:	4631      	mov	r1, r6
 800e7fa:	e7da      	b.n	800e7b2 <__gethex+0x100>
 800e7fc:	1bf3      	subs	r3, r6, r7
 800e7fe:	3b01      	subs	r3, #1
 800e800:	4629      	mov	r1, r5
 800e802:	2b07      	cmp	r3, #7
 800e804:	dc49      	bgt.n	800e89a <__gethex+0x1e8>
 800e806:	9802      	ldr	r0, [sp, #8]
 800e808:	f000 fa4c 	bl	800eca4 <_Balloc>
 800e80c:	9b01      	ldr	r3, [sp, #4]
 800e80e:	f100 0914 	add.w	r9, r0, #20
 800e812:	f04f 0b00 	mov.w	fp, #0
 800e816:	f1c3 0301 	rsb	r3, r3, #1
 800e81a:	4605      	mov	r5, r0
 800e81c:	f8cd 9010 	str.w	r9, [sp, #16]
 800e820:	46da      	mov	sl, fp
 800e822:	9308      	str	r3, [sp, #32]
 800e824:	42b7      	cmp	r7, r6
 800e826:	d33b      	bcc.n	800e8a0 <__gethex+0x1ee>
 800e828:	9804      	ldr	r0, [sp, #16]
 800e82a:	f840 ab04 	str.w	sl, [r0], #4
 800e82e:	eba0 0009 	sub.w	r0, r0, r9
 800e832:	1080      	asrs	r0, r0, #2
 800e834:	6128      	str	r0, [r5, #16]
 800e836:	0147      	lsls	r7, r0, #5
 800e838:	4650      	mov	r0, sl
 800e83a:	f000 faf7 	bl	800ee2c <__hi0bits>
 800e83e:	f8d8 6000 	ldr.w	r6, [r8]
 800e842:	1a3f      	subs	r7, r7, r0
 800e844:	42b7      	cmp	r7, r6
 800e846:	dd64      	ble.n	800e912 <__gethex+0x260>
 800e848:	1bbf      	subs	r7, r7, r6
 800e84a:	4639      	mov	r1, r7
 800e84c:	4628      	mov	r0, r5
 800e84e:	f000 fe08 	bl	800f462 <__any_on>
 800e852:	4682      	mov	sl, r0
 800e854:	b178      	cbz	r0, 800e876 <__gethex+0x1c4>
 800e856:	1e7b      	subs	r3, r7, #1
 800e858:	1159      	asrs	r1, r3, #5
 800e85a:	f003 021f 	and.w	r2, r3, #31
 800e85e:	f04f 0a01 	mov.w	sl, #1
 800e862:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e866:	fa0a f202 	lsl.w	r2, sl, r2
 800e86a:	420a      	tst	r2, r1
 800e86c:	d003      	beq.n	800e876 <__gethex+0x1c4>
 800e86e:	4553      	cmp	r3, sl
 800e870:	dc46      	bgt.n	800e900 <__gethex+0x24e>
 800e872:	f04f 0a02 	mov.w	sl, #2
 800e876:	4639      	mov	r1, r7
 800e878:	4628      	mov	r0, r5
 800e87a:	f7ff fecb 	bl	800e614 <rshift>
 800e87e:	443c      	add	r4, r7
 800e880:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e884:	42a3      	cmp	r3, r4
 800e886:	da52      	bge.n	800e92e <__gethex+0x27c>
 800e888:	4629      	mov	r1, r5
 800e88a:	9802      	ldr	r0, [sp, #8]
 800e88c:	f000 fa3e 	bl	800ed0c <_Bfree>
 800e890:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e892:	2300      	movs	r3, #0
 800e894:	6013      	str	r3, [r2, #0]
 800e896:	27a3      	movs	r7, #163	; 0xa3
 800e898:	e793      	b.n	800e7c2 <__gethex+0x110>
 800e89a:	3101      	adds	r1, #1
 800e89c:	105b      	asrs	r3, r3, #1
 800e89e:	e7b0      	b.n	800e802 <__gethex+0x150>
 800e8a0:	1e73      	subs	r3, r6, #1
 800e8a2:	9305      	str	r3, [sp, #20]
 800e8a4:	9a07      	ldr	r2, [sp, #28]
 800e8a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d018      	beq.n	800e8e0 <__gethex+0x22e>
 800e8ae:	f1bb 0f20 	cmp.w	fp, #32
 800e8b2:	d107      	bne.n	800e8c4 <__gethex+0x212>
 800e8b4:	9b04      	ldr	r3, [sp, #16]
 800e8b6:	f8c3 a000 	str.w	sl, [r3]
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	f04f 0a00 	mov.w	sl, #0
 800e8c0:	9304      	str	r3, [sp, #16]
 800e8c2:	46d3      	mov	fp, sl
 800e8c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e8c8:	f7ff fede 	bl	800e688 <__hexdig_fun>
 800e8cc:	f000 000f 	and.w	r0, r0, #15
 800e8d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800e8d4:	ea4a 0a00 	orr.w	sl, sl, r0
 800e8d8:	f10b 0b04 	add.w	fp, fp, #4
 800e8dc:	9b05      	ldr	r3, [sp, #20]
 800e8de:	e00d      	b.n	800e8fc <__gethex+0x24a>
 800e8e0:	9b05      	ldr	r3, [sp, #20]
 800e8e2:	9a08      	ldr	r2, [sp, #32]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	42bb      	cmp	r3, r7
 800e8e8:	d3e1      	bcc.n	800e8ae <__gethex+0x1fc>
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	9a01      	ldr	r2, [sp, #4]
 800e8ee:	9903      	ldr	r1, [sp, #12]
 800e8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800e8f2:	f001 f929 	bl	800fb48 <strncmp>
 800e8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d1d8      	bne.n	800e8ae <__gethex+0x1fc>
 800e8fc:	461e      	mov	r6, r3
 800e8fe:	e791      	b.n	800e824 <__gethex+0x172>
 800e900:	1eb9      	subs	r1, r7, #2
 800e902:	4628      	mov	r0, r5
 800e904:	f000 fdad 	bl	800f462 <__any_on>
 800e908:	2800      	cmp	r0, #0
 800e90a:	d0b2      	beq.n	800e872 <__gethex+0x1c0>
 800e90c:	f04f 0a03 	mov.w	sl, #3
 800e910:	e7b1      	b.n	800e876 <__gethex+0x1c4>
 800e912:	da09      	bge.n	800e928 <__gethex+0x276>
 800e914:	1bf7      	subs	r7, r6, r7
 800e916:	4629      	mov	r1, r5
 800e918:	463a      	mov	r2, r7
 800e91a:	9802      	ldr	r0, [sp, #8]
 800e91c:	f000 fbc2 	bl	800f0a4 <__lshift>
 800e920:	1be4      	subs	r4, r4, r7
 800e922:	4605      	mov	r5, r0
 800e924:	f100 0914 	add.w	r9, r0, #20
 800e928:	f04f 0a00 	mov.w	sl, #0
 800e92c:	e7a8      	b.n	800e880 <__gethex+0x1ce>
 800e92e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e932:	42a0      	cmp	r0, r4
 800e934:	dd6a      	ble.n	800ea0c <__gethex+0x35a>
 800e936:	1b04      	subs	r4, r0, r4
 800e938:	42a6      	cmp	r6, r4
 800e93a:	dc2e      	bgt.n	800e99a <__gethex+0x2e8>
 800e93c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e940:	2b02      	cmp	r3, #2
 800e942:	d022      	beq.n	800e98a <__gethex+0x2d8>
 800e944:	2b03      	cmp	r3, #3
 800e946:	d024      	beq.n	800e992 <__gethex+0x2e0>
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d115      	bne.n	800e978 <__gethex+0x2c6>
 800e94c:	42a6      	cmp	r6, r4
 800e94e:	d113      	bne.n	800e978 <__gethex+0x2c6>
 800e950:	2e01      	cmp	r6, #1
 800e952:	dc0b      	bgt.n	800e96c <__gethex+0x2ba>
 800e954:	9a06      	ldr	r2, [sp, #24]
 800e956:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e95a:	6013      	str	r3, [r2, #0]
 800e95c:	2301      	movs	r3, #1
 800e95e:	612b      	str	r3, [r5, #16]
 800e960:	f8c9 3000 	str.w	r3, [r9]
 800e964:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e966:	2762      	movs	r7, #98	; 0x62
 800e968:	601d      	str	r5, [r3, #0]
 800e96a:	e72a      	b.n	800e7c2 <__gethex+0x110>
 800e96c:	1e71      	subs	r1, r6, #1
 800e96e:	4628      	mov	r0, r5
 800e970:	f000 fd77 	bl	800f462 <__any_on>
 800e974:	2800      	cmp	r0, #0
 800e976:	d1ed      	bne.n	800e954 <__gethex+0x2a2>
 800e978:	4629      	mov	r1, r5
 800e97a:	9802      	ldr	r0, [sp, #8]
 800e97c:	f000 f9c6 	bl	800ed0c <_Bfree>
 800e980:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e982:	2300      	movs	r3, #0
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	2750      	movs	r7, #80	; 0x50
 800e988:	e71b      	b.n	800e7c2 <__gethex+0x110>
 800e98a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d0e1      	beq.n	800e954 <__gethex+0x2a2>
 800e990:	e7f2      	b.n	800e978 <__gethex+0x2c6>
 800e992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1dd      	bne.n	800e954 <__gethex+0x2a2>
 800e998:	e7ee      	b.n	800e978 <__gethex+0x2c6>
 800e99a:	1e67      	subs	r7, r4, #1
 800e99c:	f1ba 0f00 	cmp.w	sl, #0
 800e9a0:	d131      	bne.n	800ea06 <__gethex+0x354>
 800e9a2:	b127      	cbz	r7, 800e9ae <__gethex+0x2fc>
 800e9a4:	4639      	mov	r1, r7
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f000 fd5b 	bl	800f462 <__any_on>
 800e9ac:	4682      	mov	sl, r0
 800e9ae:	117a      	asrs	r2, r7, #5
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	f007 071f 	and.w	r7, r7, #31
 800e9b6:	fa03 f707 	lsl.w	r7, r3, r7
 800e9ba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e9be:	4621      	mov	r1, r4
 800e9c0:	421f      	tst	r7, r3
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	bf18      	it	ne
 800e9c6:	f04a 0a02 	orrne.w	sl, sl, #2
 800e9ca:	1b36      	subs	r6, r6, r4
 800e9cc:	f7ff fe22 	bl	800e614 <rshift>
 800e9d0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e9d4:	2702      	movs	r7, #2
 800e9d6:	f1ba 0f00 	cmp.w	sl, #0
 800e9da:	d048      	beq.n	800ea6e <__gethex+0x3bc>
 800e9dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	d015      	beq.n	800ea10 <__gethex+0x35e>
 800e9e4:	2b03      	cmp	r3, #3
 800e9e6:	d017      	beq.n	800ea18 <__gethex+0x366>
 800e9e8:	2b01      	cmp	r3, #1
 800e9ea:	d109      	bne.n	800ea00 <__gethex+0x34e>
 800e9ec:	f01a 0f02 	tst.w	sl, #2
 800e9f0:	d006      	beq.n	800ea00 <__gethex+0x34e>
 800e9f2:	f8d9 3000 	ldr.w	r3, [r9]
 800e9f6:	ea4a 0a03 	orr.w	sl, sl, r3
 800e9fa:	f01a 0f01 	tst.w	sl, #1
 800e9fe:	d10e      	bne.n	800ea1e <__gethex+0x36c>
 800ea00:	f047 0710 	orr.w	r7, r7, #16
 800ea04:	e033      	b.n	800ea6e <__gethex+0x3bc>
 800ea06:	f04f 0a01 	mov.w	sl, #1
 800ea0a:	e7d0      	b.n	800e9ae <__gethex+0x2fc>
 800ea0c:	2701      	movs	r7, #1
 800ea0e:	e7e2      	b.n	800e9d6 <__gethex+0x324>
 800ea10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea12:	f1c3 0301 	rsb	r3, r3, #1
 800ea16:	9315      	str	r3, [sp, #84]	; 0x54
 800ea18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d0f0      	beq.n	800ea00 <__gethex+0x34e>
 800ea1e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ea22:	f105 0314 	add.w	r3, r5, #20
 800ea26:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ea2a:	eb03 010a 	add.w	r1, r3, sl
 800ea2e:	f04f 0c00 	mov.w	ip, #0
 800ea32:	4618      	mov	r0, r3
 800ea34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea38:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800ea3c:	d01c      	beq.n	800ea78 <__gethex+0x3c6>
 800ea3e:	3201      	adds	r2, #1
 800ea40:	6002      	str	r2, [r0, #0]
 800ea42:	2f02      	cmp	r7, #2
 800ea44:	f105 0314 	add.w	r3, r5, #20
 800ea48:	d138      	bne.n	800eabc <__gethex+0x40a>
 800ea4a:	f8d8 2000 	ldr.w	r2, [r8]
 800ea4e:	3a01      	subs	r2, #1
 800ea50:	42b2      	cmp	r2, r6
 800ea52:	d10a      	bne.n	800ea6a <__gethex+0x3b8>
 800ea54:	1171      	asrs	r1, r6, #5
 800ea56:	2201      	movs	r2, #1
 800ea58:	f006 061f 	and.w	r6, r6, #31
 800ea5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea60:	fa02 f606 	lsl.w	r6, r2, r6
 800ea64:	421e      	tst	r6, r3
 800ea66:	bf18      	it	ne
 800ea68:	4617      	movne	r7, r2
 800ea6a:	f047 0720 	orr.w	r7, r7, #32
 800ea6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea70:	601d      	str	r5, [r3, #0]
 800ea72:	9b06      	ldr	r3, [sp, #24]
 800ea74:	601c      	str	r4, [r3, #0]
 800ea76:	e6a4      	b.n	800e7c2 <__gethex+0x110>
 800ea78:	4299      	cmp	r1, r3
 800ea7a:	f843 cc04 	str.w	ip, [r3, #-4]
 800ea7e:	d8d8      	bhi.n	800ea32 <__gethex+0x380>
 800ea80:	68ab      	ldr	r3, [r5, #8]
 800ea82:	4599      	cmp	r9, r3
 800ea84:	db12      	blt.n	800eaac <__gethex+0x3fa>
 800ea86:	6869      	ldr	r1, [r5, #4]
 800ea88:	9802      	ldr	r0, [sp, #8]
 800ea8a:	3101      	adds	r1, #1
 800ea8c:	f000 f90a 	bl	800eca4 <_Balloc>
 800ea90:	692a      	ldr	r2, [r5, #16]
 800ea92:	3202      	adds	r2, #2
 800ea94:	f105 010c 	add.w	r1, r5, #12
 800ea98:	4683      	mov	fp, r0
 800ea9a:	0092      	lsls	r2, r2, #2
 800ea9c:	300c      	adds	r0, #12
 800ea9e:	f000 f8f6 	bl	800ec8e <memcpy>
 800eaa2:	4629      	mov	r1, r5
 800eaa4:	9802      	ldr	r0, [sp, #8]
 800eaa6:	f000 f931 	bl	800ed0c <_Bfree>
 800eaaa:	465d      	mov	r5, fp
 800eaac:	692b      	ldr	r3, [r5, #16]
 800eaae:	1c5a      	adds	r2, r3, #1
 800eab0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800eab4:	612a      	str	r2, [r5, #16]
 800eab6:	2201      	movs	r2, #1
 800eab8:	615a      	str	r2, [r3, #20]
 800eaba:	e7c2      	b.n	800ea42 <__gethex+0x390>
 800eabc:	692a      	ldr	r2, [r5, #16]
 800eabe:	454a      	cmp	r2, r9
 800eac0:	dd0b      	ble.n	800eada <__gethex+0x428>
 800eac2:	2101      	movs	r1, #1
 800eac4:	4628      	mov	r0, r5
 800eac6:	f7ff fda5 	bl	800e614 <rshift>
 800eaca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eace:	3401      	adds	r4, #1
 800ead0:	42a3      	cmp	r3, r4
 800ead2:	f6ff aed9 	blt.w	800e888 <__gethex+0x1d6>
 800ead6:	2701      	movs	r7, #1
 800ead8:	e7c7      	b.n	800ea6a <__gethex+0x3b8>
 800eada:	f016 061f 	ands.w	r6, r6, #31
 800eade:	d0fa      	beq.n	800ead6 <__gethex+0x424>
 800eae0:	449a      	add	sl, r3
 800eae2:	f1c6 0620 	rsb	r6, r6, #32
 800eae6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800eaea:	f000 f99f 	bl	800ee2c <__hi0bits>
 800eaee:	42b0      	cmp	r0, r6
 800eaf0:	dbe7      	blt.n	800eac2 <__gethex+0x410>
 800eaf2:	e7f0      	b.n	800ead6 <__gethex+0x424>

0800eaf4 <L_shift>:
 800eaf4:	f1c2 0208 	rsb	r2, r2, #8
 800eaf8:	0092      	lsls	r2, r2, #2
 800eafa:	b570      	push	{r4, r5, r6, lr}
 800eafc:	f1c2 0620 	rsb	r6, r2, #32
 800eb00:	6843      	ldr	r3, [r0, #4]
 800eb02:	6804      	ldr	r4, [r0, #0]
 800eb04:	fa03 f506 	lsl.w	r5, r3, r6
 800eb08:	432c      	orrs	r4, r5
 800eb0a:	40d3      	lsrs	r3, r2
 800eb0c:	6004      	str	r4, [r0, #0]
 800eb0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800eb12:	4288      	cmp	r0, r1
 800eb14:	d3f4      	bcc.n	800eb00 <L_shift+0xc>
 800eb16:	bd70      	pop	{r4, r5, r6, pc}

0800eb18 <__match>:
 800eb18:	b530      	push	{r4, r5, lr}
 800eb1a:	6803      	ldr	r3, [r0, #0]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb22:	b914      	cbnz	r4, 800eb2a <__match+0x12>
 800eb24:	6003      	str	r3, [r0, #0]
 800eb26:	2001      	movs	r0, #1
 800eb28:	bd30      	pop	{r4, r5, pc}
 800eb2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800eb32:	2d19      	cmp	r5, #25
 800eb34:	bf98      	it	ls
 800eb36:	3220      	addls	r2, #32
 800eb38:	42a2      	cmp	r2, r4
 800eb3a:	d0f0      	beq.n	800eb1e <__match+0x6>
 800eb3c:	2000      	movs	r0, #0
 800eb3e:	e7f3      	b.n	800eb28 <__match+0x10>

0800eb40 <__hexnan>:
 800eb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb44:	680b      	ldr	r3, [r1, #0]
 800eb46:	6801      	ldr	r1, [r0, #0]
 800eb48:	115f      	asrs	r7, r3, #5
 800eb4a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800eb4e:	f013 031f 	ands.w	r3, r3, #31
 800eb52:	b087      	sub	sp, #28
 800eb54:	bf18      	it	ne
 800eb56:	3704      	addne	r7, #4
 800eb58:	2500      	movs	r5, #0
 800eb5a:	1f3e      	subs	r6, r7, #4
 800eb5c:	4682      	mov	sl, r0
 800eb5e:	4690      	mov	r8, r2
 800eb60:	9301      	str	r3, [sp, #4]
 800eb62:	f847 5c04 	str.w	r5, [r7, #-4]
 800eb66:	46b1      	mov	r9, r6
 800eb68:	4634      	mov	r4, r6
 800eb6a:	9502      	str	r5, [sp, #8]
 800eb6c:	46ab      	mov	fp, r5
 800eb6e:	784a      	ldrb	r2, [r1, #1]
 800eb70:	1c4b      	adds	r3, r1, #1
 800eb72:	9303      	str	r3, [sp, #12]
 800eb74:	b342      	cbz	r2, 800ebc8 <__hexnan+0x88>
 800eb76:	4610      	mov	r0, r2
 800eb78:	9105      	str	r1, [sp, #20]
 800eb7a:	9204      	str	r2, [sp, #16]
 800eb7c:	f7ff fd84 	bl	800e688 <__hexdig_fun>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	d143      	bne.n	800ec0c <__hexnan+0xcc>
 800eb84:	9a04      	ldr	r2, [sp, #16]
 800eb86:	9905      	ldr	r1, [sp, #20]
 800eb88:	2a20      	cmp	r2, #32
 800eb8a:	d818      	bhi.n	800ebbe <__hexnan+0x7e>
 800eb8c:	9b02      	ldr	r3, [sp, #8]
 800eb8e:	459b      	cmp	fp, r3
 800eb90:	dd13      	ble.n	800ebba <__hexnan+0x7a>
 800eb92:	454c      	cmp	r4, r9
 800eb94:	d206      	bcs.n	800eba4 <__hexnan+0x64>
 800eb96:	2d07      	cmp	r5, #7
 800eb98:	dc04      	bgt.n	800eba4 <__hexnan+0x64>
 800eb9a:	462a      	mov	r2, r5
 800eb9c:	4649      	mov	r1, r9
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f7ff ffa8 	bl	800eaf4 <L_shift>
 800eba4:	4544      	cmp	r4, r8
 800eba6:	d944      	bls.n	800ec32 <__hexnan+0xf2>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f1a4 0904 	sub.w	r9, r4, #4
 800ebae:	f844 3c04 	str.w	r3, [r4, #-4]
 800ebb2:	f8cd b008 	str.w	fp, [sp, #8]
 800ebb6:	464c      	mov	r4, r9
 800ebb8:	461d      	mov	r5, r3
 800ebba:	9903      	ldr	r1, [sp, #12]
 800ebbc:	e7d7      	b.n	800eb6e <__hexnan+0x2e>
 800ebbe:	2a29      	cmp	r2, #41	; 0x29
 800ebc0:	d14a      	bne.n	800ec58 <__hexnan+0x118>
 800ebc2:	3102      	adds	r1, #2
 800ebc4:	f8ca 1000 	str.w	r1, [sl]
 800ebc8:	f1bb 0f00 	cmp.w	fp, #0
 800ebcc:	d044      	beq.n	800ec58 <__hexnan+0x118>
 800ebce:	454c      	cmp	r4, r9
 800ebd0:	d206      	bcs.n	800ebe0 <__hexnan+0xa0>
 800ebd2:	2d07      	cmp	r5, #7
 800ebd4:	dc04      	bgt.n	800ebe0 <__hexnan+0xa0>
 800ebd6:	462a      	mov	r2, r5
 800ebd8:	4649      	mov	r1, r9
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f7ff ff8a 	bl	800eaf4 <L_shift>
 800ebe0:	4544      	cmp	r4, r8
 800ebe2:	d928      	bls.n	800ec36 <__hexnan+0xf6>
 800ebe4:	4643      	mov	r3, r8
 800ebe6:	f854 2b04 	ldr.w	r2, [r4], #4
 800ebea:	f843 2b04 	str.w	r2, [r3], #4
 800ebee:	42a6      	cmp	r6, r4
 800ebf0:	d2f9      	bcs.n	800ebe6 <__hexnan+0xa6>
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f843 2b04 	str.w	r2, [r3], #4
 800ebf8:	429e      	cmp	r6, r3
 800ebfa:	d2fb      	bcs.n	800ebf4 <__hexnan+0xb4>
 800ebfc:	6833      	ldr	r3, [r6, #0]
 800ebfe:	b91b      	cbnz	r3, 800ec08 <__hexnan+0xc8>
 800ec00:	4546      	cmp	r6, r8
 800ec02:	d127      	bne.n	800ec54 <__hexnan+0x114>
 800ec04:	2301      	movs	r3, #1
 800ec06:	6033      	str	r3, [r6, #0]
 800ec08:	2005      	movs	r0, #5
 800ec0a:	e026      	b.n	800ec5a <__hexnan+0x11a>
 800ec0c:	3501      	adds	r5, #1
 800ec0e:	2d08      	cmp	r5, #8
 800ec10:	f10b 0b01 	add.w	fp, fp, #1
 800ec14:	dd06      	ble.n	800ec24 <__hexnan+0xe4>
 800ec16:	4544      	cmp	r4, r8
 800ec18:	d9cf      	bls.n	800ebba <__hexnan+0x7a>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ec20:	2501      	movs	r5, #1
 800ec22:	3c04      	subs	r4, #4
 800ec24:	6822      	ldr	r2, [r4, #0]
 800ec26:	f000 000f 	and.w	r0, r0, #15
 800ec2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ec2e:	6020      	str	r0, [r4, #0]
 800ec30:	e7c3      	b.n	800ebba <__hexnan+0x7a>
 800ec32:	2508      	movs	r5, #8
 800ec34:	e7c1      	b.n	800ebba <__hexnan+0x7a>
 800ec36:	9b01      	ldr	r3, [sp, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d0df      	beq.n	800ebfc <__hexnan+0xbc>
 800ec3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec40:	f1c3 0320 	rsb	r3, r3, #32
 800ec44:	fa22 f303 	lsr.w	r3, r2, r3
 800ec48:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ec4c:	401a      	ands	r2, r3
 800ec4e:	f847 2c04 	str.w	r2, [r7, #-4]
 800ec52:	e7d3      	b.n	800ebfc <__hexnan+0xbc>
 800ec54:	3e04      	subs	r6, #4
 800ec56:	e7d1      	b.n	800ebfc <__hexnan+0xbc>
 800ec58:	2004      	movs	r0, #4
 800ec5a:	b007      	add	sp, #28
 800ec5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec60 <__locale_ctype_ptr_l>:
 800ec60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800ec64:	4770      	bx	lr

0800ec66 <__localeconv_l>:
 800ec66:	30f0      	adds	r0, #240	; 0xf0
 800ec68:	4770      	bx	lr

0800ec6a <__ascii_mbtowc>:
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	b901      	cbnz	r1, 800ec70 <__ascii_mbtowc+0x6>
 800ec6e:	a901      	add	r1, sp, #4
 800ec70:	b142      	cbz	r2, 800ec84 <__ascii_mbtowc+0x1a>
 800ec72:	b14b      	cbz	r3, 800ec88 <__ascii_mbtowc+0x1e>
 800ec74:	7813      	ldrb	r3, [r2, #0]
 800ec76:	600b      	str	r3, [r1, #0]
 800ec78:	7812      	ldrb	r2, [r2, #0]
 800ec7a:	1c10      	adds	r0, r2, #0
 800ec7c:	bf18      	it	ne
 800ec7e:	2001      	movne	r0, #1
 800ec80:	b002      	add	sp, #8
 800ec82:	4770      	bx	lr
 800ec84:	4610      	mov	r0, r2
 800ec86:	e7fb      	b.n	800ec80 <__ascii_mbtowc+0x16>
 800ec88:	f06f 0001 	mvn.w	r0, #1
 800ec8c:	e7f8      	b.n	800ec80 <__ascii_mbtowc+0x16>

0800ec8e <memcpy>:
 800ec8e:	b510      	push	{r4, lr}
 800ec90:	1e43      	subs	r3, r0, #1
 800ec92:	440a      	add	r2, r1
 800ec94:	4291      	cmp	r1, r2
 800ec96:	d100      	bne.n	800ec9a <memcpy+0xc>
 800ec98:	bd10      	pop	{r4, pc}
 800ec9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eca2:	e7f7      	b.n	800ec94 <memcpy+0x6>

0800eca4 <_Balloc>:
 800eca4:	b570      	push	{r4, r5, r6, lr}
 800eca6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eca8:	4604      	mov	r4, r0
 800ecaa:	460e      	mov	r6, r1
 800ecac:	b93d      	cbnz	r5, 800ecbe <_Balloc+0x1a>
 800ecae:	2010      	movs	r0, #16
 800ecb0:	f000 ff6a 	bl	800fb88 <malloc>
 800ecb4:	6260      	str	r0, [r4, #36]	; 0x24
 800ecb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ecba:	6005      	str	r5, [r0, #0]
 800ecbc:	60c5      	str	r5, [r0, #12]
 800ecbe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ecc0:	68eb      	ldr	r3, [r5, #12]
 800ecc2:	b183      	cbz	r3, 800ece6 <_Balloc+0x42>
 800ecc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecc6:	68db      	ldr	r3, [r3, #12]
 800ecc8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eccc:	b9b8      	cbnz	r0, 800ecfe <_Balloc+0x5a>
 800ecce:	2101      	movs	r1, #1
 800ecd0:	fa01 f506 	lsl.w	r5, r1, r6
 800ecd4:	1d6a      	adds	r2, r5, #5
 800ecd6:	0092      	lsls	r2, r2, #2
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f000 fbe3 	bl	800f4a4 <_calloc_r>
 800ecde:	b160      	cbz	r0, 800ecfa <_Balloc+0x56>
 800ece0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ece4:	e00e      	b.n	800ed04 <_Balloc+0x60>
 800ece6:	2221      	movs	r2, #33	; 0x21
 800ece8:	2104      	movs	r1, #4
 800ecea:	4620      	mov	r0, r4
 800ecec:	f000 fbda 	bl	800f4a4 <_calloc_r>
 800ecf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecf2:	60e8      	str	r0, [r5, #12]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1e4      	bne.n	800ecc4 <_Balloc+0x20>
 800ecfa:	2000      	movs	r0, #0
 800ecfc:	bd70      	pop	{r4, r5, r6, pc}
 800ecfe:	6802      	ldr	r2, [r0, #0]
 800ed00:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ed04:	2300      	movs	r3, #0
 800ed06:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ed0a:	e7f7      	b.n	800ecfc <_Balloc+0x58>

0800ed0c <_Bfree>:
 800ed0c:	b570      	push	{r4, r5, r6, lr}
 800ed0e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ed10:	4606      	mov	r6, r0
 800ed12:	460d      	mov	r5, r1
 800ed14:	b93c      	cbnz	r4, 800ed26 <_Bfree+0x1a>
 800ed16:	2010      	movs	r0, #16
 800ed18:	f000 ff36 	bl	800fb88 <malloc>
 800ed1c:	6270      	str	r0, [r6, #36]	; 0x24
 800ed1e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed22:	6004      	str	r4, [r0, #0]
 800ed24:	60c4      	str	r4, [r0, #12]
 800ed26:	b13d      	cbz	r5, 800ed38 <_Bfree+0x2c>
 800ed28:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ed2a:	686a      	ldr	r2, [r5, #4]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed32:	6029      	str	r1, [r5, #0]
 800ed34:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ed38:	bd70      	pop	{r4, r5, r6, pc}

0800ed3a <__multadd>:
 800ed3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed3e:	690d      	ldr	r5, [r1, #16]
 800ed40:	461f      	mov	r7, r3
 800ed42:	4606      	mov	r6, r0
 800ed44:	460c      	mov	r4, r1
 800ed46:	f101 0c14 	add.w	ip, r1, #20
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	f8dc 0000 	ldr.w	r0, [ip]
 800ed50:	b281      	uxth	r1, r0
 800ed52:	fb02 7101 	mla	r1, r2, r1, r7
 800ed56:	0c0f      	lsrs	r7, r1, #16
 800ed58:	0c00      	lsrs	r0, r0, #16
 800ed5a:	fb02 7000 	mla	r0, r2, r0, r7
 800ed5e:	b289      	uxth	r1, r1
 800ed60:	3301      	adds	r3, #1
 800ed62:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ed66:	429d      	cmp	r5, r3
 800ed68:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ed6c:	f84c 1b04 	str.w	r1, [ip], #4
 800ed70:	dcec      	bgt.n	800ed4c <__multadd+0x12>
 800ed72:	b1d7      	cbz	r7, 800edaa <__multadd+0x70>
 800ed74:	68a3      	ldr	r3, [r4, #8]
 800ed76:	42ab      	cmp	r3, r5
 800ed78:	dc12      	bgt.n	800eda0 <__multadd+0x66>
 800ed7a:	6861      	ldr	r1, [r4, #4]
 800ed7c:	4630      	mov	r0, r6
 800ed7e:	3101      	adds	r1, #1
 800ed80:	f7ff ff90 	bl	800eca4 <_Balloc>
 800ed84:	6922      	ldr	r2, [r4, #16]
 800ed86:	3202      	adds	r2, #2
 800ed88:	f104 010c 	add.w	r1, r4, #12
 800ed8c:	4680      	mov	r8, r0
 800ed8e:	0092      	lsls	r2, r2, #2
 800ed90:	300c      	adds	r0, #12
 800ed92:	f7ff ff7c 	bl	800ec8e <memcpy>
 800ed96:	4621      	mov	r1, r4
 800ed98:	4630      	mov	r0, r6
 800ed9a:	f7ff ffb7 	bl	800ed0c <_Bfree>
 800ed9e:	4644      	mov	r4, r8
 800eda0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eda4:	3501      	adds	r5, #1
 800eda6:	615f      	str	r7, [r3, #20]
 800eda8:	6125      	str	r5, [r4, #16]
 800edaa:	4620      	mov	r0, r4
 800edac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800edb0 <__s2b>:
 800edb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edb4:	460c      	mov	r4, r1
 800edb6:	4615      	mov	r5, r2
 800edb8:	461f      	mov	r7, r3
 800edba:	2209      	movs	r2, #9
 800edbc:	3308      	adds	r3, #8
 800edbe:	4606      	mov	r6, r0
 800edc0:	fb93 f3f2 	sdiv	r3, r3, r2
 800edc4:	2100      	movs	r1, #0
 800edc6:	2201      	movs	r2, #1
 800edc8:	429a      	cmp	r2, r3
 800edca:	db20      	blt.n	800ee0e <__s2b+0x5e>
 800edcc:	4630      	mov	r0, r6
 800edce:	f7ff ff69 	bl	800eca4 <_Balloc>
 800edd2:	9b08      	ldr	r3, [sp, #32]
 800edd4:	6143      	str	r3, [r0, #20]
 800edd6:	2d09      	cmp	r5, #9
 800edd8:	f04f 0301 	mov.w	r3, #1
 800eddc:	6103      	str	r3, [r0, #16]
 800edde:	dd19      	ble.n	800ee14 <__s2b+0x64>
 800ede0:	f104 0809 	add.w	r8, r4, #9
 800ede4:	46c1      	mov	r9, r8
 800ede6:	442c      	add	r4, r5
 800ede8:	f819 3b01 	ldrb.w	r3, [r9], #1
 800edec:	4601      	mov	r1, r0
 800edee:	3b30      	subs	r3, #48	; 0x30
 800edf0:	220a      	movs	r2, #10
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7ff ffa1 	bl	800ed3a <__multadd>
 800edf8:	45a1      	cmp	r9, r4
 800edfa:	d1f5      	bne.n	800ede8 <__s2b+0x38>
 800edfc:	eb08 0405 	add.w	r4, r8, r5
 800ee00:	3c08      	subs	r4, #8
 800ee02:	1b2d      	subs	r5, r5, r4
 800ee04:	1963      	adds	r3, r4, r5
 800ee06:	42bb      	cmp	r3, r7
 800ee08:	db07      	blt.n	800ee1a <__s2b+0x6a>
 800ee0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee0e:	0052      	lsls	r2, r2, #1
 800ee10:	3101      	adds	r1, #1
 800ee12:	e7d9      	b.n	800edc8 <__s2b+0x18>
 800ee14:	340a      	adds	r4, #10
 800ee16:	2509      	movs	r5, #9
 800ee18:	e7f3      	b.n	800ee02 <__s2b+0x52>
 800ee1a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ee1e:	4601      	mov	r1, r0
 800ee20:	3b30      	subs	r3, #48	; 0x30
 800ee22:	220a      	movs	r2, #10
 800ee24:	4630      	mov	r0, r6
 800ee26:	f7ff ff88 	bl	800ed3a <__multadd>
 800ee2a:	e7eb      	b.n	800ee04 <__s2b+0x54>

0800ee2c <__hi0bits>:
 800ee2c:	0c02      	lsrs	r2, r0, #16
 800ee2e:	0412      	lsls	r2, r2, #16
 800ee30:	4603      	mov	r3, r0
 800ee32:	b9b2      	cbnz	r2, 800ee62 <__hi0bits+0x36>
 800ee34:	0403      	lsls	r3, r0, #16
 800ee36:	2010      	movs	r0, #16
 800ee38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ee3c:	bf04      	itt	eq
 800ee3e:	021b      	lsleq	r3, r3, #8
 800ee40:	3008      	addeq	r0, #8
 800ee42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ee46:	bf04      	itt	eq
 800ee48:	011b      	lsleq	r3, r3, #4
 800ee4a:	3004      	addeq	r0, #4
 800ee4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ee50:	bf04      	itt	eq
 800ee52:	009b      	lsleq	r3, r3, #2
 800ee54:	3002      	addeq	r0, #2
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	db06      	blt.n	800ee68 <__hi0bits+0x3c>
 800ee5a:	005b      	lsls	r3, r3, #1
 800ee5c:	d503      	bpl.n	800ee66 <__hi0bits+0x3a>
 800ee5e:	3001      	adds	r0, #1
 800ee60:	4770      	bx	lr
 800ee62:	2000      	movs	r0, #0
 800ee64:	e7e8      	b.n	800ee38 <__hi0bits+0xc>
 800ee66:	2020      	movs	r0, #32
 800ee68:	4770      	bx	lr

0800ee6a <__lo0bits>:
 800ee6a:	6803      	ldr	r3, [r0, #0]
 800ee6c:	f013 0207 	ands.w	r2, r3, #7
 800ee70:	4601      	mov	r1, r0
 800ee72:	d00b      	beq.n	800ee8c <__lo0bits+0x22>
 800ee74:	07da      	lsls	r2, r3, #31
 800ee76:	d423      	bmi.n	800eec0 <__lo0bits+0x56>
 800ee78:	0798      	lsls	r0, r3, #30
 800ee7a:	bf49      	itett	mi
 800ee7c:	085b      	lsrmi	r3, r3, #1
 800ee7e:	089b      	lsrpl	r3, r3, #2
 800ee80:	2001      	movmi	r0, #1
 800ee82:	600b      	strmi	r3, [r1, #0]
 800ee84:	bf5c      	itt	pl
 800ee86:	600b      	strpl	r3, [r1, #0]
 800ee88:	2002      	movpl	r0, #2
 800ee8a:	4770      	bx	lr
 800ee8c:	b298      	uxth	r0, r3
 800ee8e:	b9a8      	cbnz	r0, 800eebc <__lo0bits+0x52>
 800ee90:	0c1b      	lsrs	r3, r3, #16
 800ee92:	2010      	movs	r0, #16
 800ee94:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ee98:	bf04      	itt	eq
 800ee9a:	0a1b      	lsreq	r3, r3, #8
 800ee9c:	3008      	addeq	r0, #8
 800ee9e:	071a      	lsls	r2, r3, #28
 800eea0:	bf04      	itt	eq
 800eea2:	091b      	lsreq	r3, r3, #4
 800eea4:	3004      	addeq	r0, #4
 800eea6:	079a      	lsls	r2, r3, #30
 800eea8:	bf04      	itt	eq
 800eeaa:	089b      	lsreq	r3, r3, #2
 800eeac:	3002      	addeq	r0, #2
 800eeae:	07da      	lsls	r2, r3, #31
 800eeb0:	d402      	bmi.n	800eeb8 <__lo0bits+0x4e>
 800eeb2:	085b      	lsrs	r3, r3, #1
 800eeb4:	d006      	beq.n	800eec4 <__lo0bits+0x5a>
 800eeb6:	3001      	adds	r0, #1
 800eeb8:	600b      	str	r3, [r1, #0]
 800eeba:	4770      	bx	lr
 800eebc:	4610      	mov	r0, r2
 800eebe:	e7e9      	b.n	800ee94 <__lo0bits+0x2a>
 800eec0:	2000      	movs	r0, #0
 800eec2:	4770      	bx	lr
 800eec4:	2020      	movs	r0, #32
 800eec6:	4770      	bx	lr

0800eec8 <__i2b>:
 800eec8:	b510      	push	{r4, lr}
 800eeca:	460c      	mov	r4, r1
 800eecc:	2101      	movs	r1, #1
 800eece:	f7ff fee9 	bl	800eca4 <_Balloc>
 800eed2:	2201      	movs	r2, #1
 800eed4:	6144      	str	r4, [r0, #20]
 800eed6:	6102      	str	r2, [r0, #16]
 800eed8:	bd10      	pop	{r4, pc}

0800eeda <__multiply>:
 800eeda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eede:	4614      	mov	r4, r2
 800eee0:	690a      	ldr	r2, [r1, #16]
 800eee2:	6923      	ldr	r3, [r4, #16]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	bfb8      	it	lt
 800eee8:	460b      	movlt	r3, r1
 800eeea:	4688      	mov	r8, r1
 800eeec:	bfbc      	itt	lt
 800eeee:	46a0      	movlt	r8, r4
 800eef0:	461c      	movlt	r4, r3
 800eef2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eef6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800eefa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eefe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ef02:	eb07 0609 	add.w	r6, r7, r9
 800ef06:	42b3      	cmp	r3, r6
 800ef08:	bfb8      	it	lt
 800ef0a:	3101      	addlt	r1, #1
 800ef0c:	f7ff feca 	bl	800eca4 <_Balloc>
 800ef10:	f100 0514 	add.w	r5, r0, #20
 800ef14:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ef18:	462b      	mov	r3, r5
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	4573      	cmp	r3, lr
 800ef1e:	d316      	bcc.n	800ef4e <__multiply+0x74>
 800ef20:	f104 0214 	add.w	r2, r4, #20
 800ef24:	f108 0114 	add.w	r1, r8, #20
 800ef28:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ef2c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ef30:	9300      	str	r3, [sp, #0]
 800ef32:	9b00      	ldr	r3, [sp, #0]
 800ef34:	9201      	str	r2, [sp, #4]
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d80c      	bhi.n	800ef54 <__multiply+0x7a>
 800ef3a:	2e00      	cmp	r6, #0
 800ef3c:	dd03      	ble.n	800ef46 <__multiply+0x6c>
 800ef3e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d05d      	beq.n	800f002 <__multiply+0x128>
 800ef46:	6106      	str	r6, [r0, #16]
 800ef48:	b003      	add	sp, #12
 800ef4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4e:	f843 2b04 	str.w	r2, [r3], #4
 800ef52:	e7e3      	b.n	800ef1c <__multiply+0x42>
 800ef54:	f8b2 b000 	ldrh.w	fp, [r2]
 800ef58:	f1bb 0f00 	cmp.w	fp, #0
 800ef5c:	d023      	beq.n	800efa6 <__multiply+0xcc>
 800ef5e:	4689      	mov	r9, r1
 800ef60:	46ac      	mov	ip, r5
 800ef62:	f04f 0800 	mov.w	r8, #0
 800ef66:	f859 4b04 	ldr.w	r4, [r9], #4
 800ef6a:	f8dc a000 	ldr.w	sl, [ip]
 800ef6e:	b2a3      	uxth	r3, r4
 800ef70:	fa1f fa8a 	uxth.w	sl, sl
 800ef74:	fb0b a303 	mla	r3, fp, r3, sl
 800ef78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ef7c:	f8dc 4000 	ldr.w	r4, [ip]
 800ef80:	4443      	add	r3, r8
 800ef82:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ef86:	fb0b 840a 	mla	r4, fp, sl, r8
 800ef8a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ef8e:	46e2      	mov	sl, ip
 800ef90:	b29b      	uxth	r3, r3
 800ef92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ef96:	454f      	cmp	r7, r9
 800ef98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ef9c:	f84a 3b04 	str.w	r3, [sl], #4
 800efa0:	d82b      	bhi.n	800effa <__multiply+0x120>
 800efa2:	f8cc 8004 	str.w	r8, [ip, #4]
 800efa6:	9b01      	ldr	r3, [sp, #4]
 800efa8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800efac:	3204      	adds	r2, #4
 800efae:	f1ba 0f00 	cmp.w	sl, #0
 800efb2:	d020      	beq.n	800eff6 <__multiply+0x11c>
 800efb4:	682b      	ldr	r3, [r5, #0]
 800efb6:	4689      	mov	r9, r1
 800efb8:	46a8      	mov	r8, r5
 800efba:	f04f 0b00 	mov.w	fp, #0
 800efbe:	f8b9 c000 	ldrh.w	ip, [r9]
 800efc2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800efc6:	fb0a 440c 	mla	r4, sl, ip, r4
 800efca:	445c      	add	r4, fp
 800efcc:	46c4      	mov	ip, r8
 800efce:	b29b      	uxth	r3, r3
 800efd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800efd4:	f84c 3b04 	str.w	r3, [ip], #4
 800efd8:	f859 3b04 	ldr.w	r3, [r9], #4
 800efdc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800efe0:	0c1b      	lsrs	r3, r3, #16
 800efe2:	fb0a b303 	mla	r3, sl, r3, fp
 800efe6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800efea:	454f      	cmp	r7, r9
 800efec:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800eff0:	d805      	bhi.n	800effe <__multiply+0x124>
 800eff2:	f8c8 3004 	str.w	r3, [r8, #4]
 800eff6:	3504      	adds	r5, #4
 800eff8:	e79b      	b.n	800ef32 <__multiply+0x58>
 800effa:	46d4      	mov	ip, sl
 800effc:	e7b3      	b.n	800ef66 <__multiply+0x8c>
 800effe:	46e0      	mov	r8, ip
 800f000:	e7dd      	b.n	800efbe <__multiply+0xe4>
 800f002:	3e01      	subs	r6, #1
 800f004:	e799      	b.n	800ef3a <__multiply+0x60>
	...

0800f008 <__pow5mult>:
 800f008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f00c:	4615      	mov	r5, r2
 800f00e:	f012 0203 	ands.w	r2, r2, #3
 800f012:	4606      	mov	r6, r0
 800f014:	460f      	mov	r7, r1
 800f016:	d007      	beq.n	800f028 <__pow5mult+0x20>
 800f018:	3a01      	subs	r2, #1
 800f01a:	4c21      	ldr	r4, [pc, #132]	; (800f0a0 <__pow5mult+0x98>)
 800f01c:	2300      	movs	r3, #0
 800f01e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f022:	f7ff fe8a 	bl	800ed3a <__multadd>
 800f026:	4607      	mov	r7, r0
 800f028:	10ad      	asrs	r5, r5, #2
 800f02a:	d035      	beq.n	800f098 <__pow5mult+0x90>
 800f02c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f02e:	b93c      	cbnz	r4, 800f040 <__pow5mult+0x38>
 800f030:	2010      	movs	r0, #16
 800f032:	f000 fda9 	bl	800fb88 <malloc>
 800f036:	6270      	str	r0, [r6, #36]	; 0x24
 800f038:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f03c:	6004      	str	r4, [r0, #0]
 800f03e:	60c4      	str	r4, [r0, #12]
 800f040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f044:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f048:	b94c      	cbnz	r4, 800f05e <__pow5mult+0x56>
 800f04a:	f240 2171 	movw	r1, #625	; 0x271
 800f04e:	4630      	mov	r0, r6
 800f050:	f7ff ff3a 	bl	800eec8 <__i2b>
 800f054:	2300      	movs	r3, #0
 800f056:	f8c8 0008 	str.w	r0, [r8, #8]
 800f05a:	4604      	mov	r4, r0
 800f05c:	6003      	str	r3, [r0, #0]
 800f05e:	f04f 0800 	mov.w	r8, #0
 800f062:	07eb      	lsls	r3, r5, #31
 800f064:	d50a      	bpl.n	800f07c <__pow5mult+0x74>
 800f066:	4639      	mov	r1, r7
 800f068:	4622      	mov	r2, r4
 800f06a:	4630      	mov	r0, r6
 800f06c:	f7ff ff35 	bl	800eeda <__multiply>
 800f070:	4639      	mov	r1, r7
 800f072:	4681      	mov	r9, r0
 800f074:	4630      	mov	r0, r6
 800f076:	f7ff fe49 	bl	800ed0c <_Bfree>
 800f07a:	464f      	mov	r7, r9
 800f07c:	106d      	asrs	r5, r5, #1
 800f07e:	d00b      	beq.n	800f098 <__pow5mult+0x90>
 800f080:	6820      	ldr	r0, [r4, #0]
 800f082:	b938      	cbnz	r0, 800f094 <__pow5mult+0x8c>
 800f084:	4622      	mov	r2, r4
 800f086:	4621      	mov	r1, r4
 800f088:	4630      	mov	r0, r6
 800f08a:	f7ff ff26 	bl	800eeda <__multiply>
 800f08e:	6020      	str	r0, [r4, #0]
 800f090:	f8c0 8000 	str.w	r8, [r0]
 800f094:	4604      	mov	r4, r0
 800f096:	e7e4      	b.n	800f062 <__pow5mult+0x5a>
 800f098:	4638      	mov	r0, r7
 800f09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f09e:	bf00      	nop
 800f0a0:	08010fa0 	.word	0x08010fa0

0800f0a4 <__lshift>:
 800f0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a8:	460c      	mov	r4, r1
 800f0aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0ae:	6923      	ldr	r3, [r4, #16]
 800f0b0:	6849      	ldr	r1, [r1, #4]
 800f0b2:	eb0a 0903 	add.w	r9, sl, r3
 800f0b6:	68a3      	ldr	r3, [r4, #8]
 800f0b8:	4607      	mov	r7, r0
 800f0ba:	4616      	mov	r6, r2
 800f0bc:	f109 0501 	add.w	r5, r9, #1
 800f0c0:	42ab      	cmp	r3, r5
 800f0c2:	db32      	blt.n	800f12a <__lshift+0x86>
 800f0c4:	4638      	mov	r0, r7
 800f0c6:	f7ff fded 	bl	800eca4 <_Balloc>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	4680      	mov	r8, r0
 800f0ce:	f100 0114 	add.w	r1, r0, #20
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	4553      	cmp	r3, sl
 800f0d6:	db2b      	blt.n	800f130 <__lshift+0x8c>
 800f0d8:	6920      	ldr	r0, [r4, #16]
 800f0da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0de:	f104 0314 	add.w	r3, r4, #20
 800f0e2:	f016 021f 	ands.w	r2, r6, #31
 800f0e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f0ee:	d025      	beq.n	800f13c <__lshift+0x98>
 800f0f0:	f1c2 0e20 	rsb	lr, r2, #32
 800f0f4:	2000      	movs	r0, #0
 800f0f6:	681e      	ldr	r6, [r3, #0]
 800f0f8:	468a      	mov	sl, r1
 800f0fa:	4096      	lsls	r6, r2
 800f0fc:	4330      	orrs	r0, r6
 800f0fe:	f84a 0b04 	str.w	r0, [sl], #4
 800f102:	f853 0b04 	ldr.w	r0, [r3], #4
 800f106:	459c      	cmp	ip, r3
 800f108:	fa20 f00e 	lsr.w	r0, r0, lr
 800f10c:	d814      	bhi.n	800f138 <__lshift+0x94>
 800f10e:	6048      	str	r0, [r1, #4]
 800f110:	b108      	cbz	r0, 800f116 <__lshift+0x72>
 800f112:	f109 0502 	add.w	r5, r9, #2
 800f116:	3d01      	subs	r5, #1
 800f118:	4638      	mov	r0, r7
 800f11a:	f8c8 5010 	str.w	r5, [r8, #16]
 800f11e:	4621      	mov	r1, r4
 800f120:	f7ff fdf4 	bl	800ed0c <_Bfree>
 800f124:	4640      	mov	r0, r8
 800f126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f12a:	3101      	adds	r1, #1
 800f12c:	005b      	lsls	r3, r3, #1
 800f12e:	e7c7      	b.n	800f0c0 <__lshift+0x1c>
 800f130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f134:	3301      	adds	r3, #1
 800f136:	e7cd      	b.n	800f0d4 <__lshift+0x30>
 800f138:	4651      	mov	r1, sl
 800f13a:	e7dc      	b.n	800f0f6 <__lshift+0x52>
 800f13c:	3904      	subs	r1, #4
 800f13e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f142:	f841 2f04 	str.w	r2, [r1, #4]!
 800f146:	459c      	cmp	ip, r3
 800f148:	d8f9      	bhi.n	800f13e <__lshift+0x9a>
 800f14a:	e7e4      	b.n	800f116 <__lshift+0x72>

0800f14c <__mcmp>:
 800f14c:	6903      	ldr	r3, [r0, #16]
 800f14e:	690a      	ldr	r2, [r1, #16]
 800f150:	1a9b      	subs	r3, r3, r2
 800f152:	b530      	push	{r4, r5, lr}
 800f154:	d10c      	bne.n	800f170 <__mcmp+0x24>
 800f156:	0092      	lsls	r2, r2, #2
 800f158:	3014      	adds	r0, #20
 800f15a:	3114      	adds	r1, #20
 800f15c:	1884      	adds	r4, r0, r2
 800f15e:	4411      	add	r1, r2
 800f160:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f164:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f168:	4295      	cmp	r5, r2
 800f16a:	d003      	beq.n	800f174 <__mcmp+0x28>
 800f16c:	d305      	bcc.n	800f17a <__mcmp+0x2e>
 800f16e:	2301      	movs	r3, #1
 800f170:	4618      	mov	r0, r3
 800f172:	bd30      	pop	{r4, r5, pc}
 800f174:	42a0      	cmp	r0, r4
 800f176:	d3f3      	bcc.n	800f160 <__mcmp+0x14>
 800f178:	e7fa      	b.n	800f170 <__mcmp+0x24>
 800f17a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f17e:	e7f7      	b.n	800f170 <__mcmp+0x24>

0800f180 <__mdiff>:
 800f180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f184:	460d      	mov	r5, r1
 800f186:	4607      	mov	r7, r0
 800f188:	4611      	mov	r1, r2
 800f18a:	4628      	mov	r0, r5
 800f18c:	4614      	mov	r4, r2
 800f18e:	f7ff ffdd 	bl	800f14c <__mcmp>
 800f192:	1e06      	subs	r6, r0, #0
 800f194:	d108      	bne.n	800f1a8 <__mdiff+0x28>
 800f196:	4631      	mov	r1, r6
 800f198:	4638      	mov	r0, r7
 800f19a:	f7ff fd83 	bl	800eca4 <_Balloc>
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1a8:	bfa4      	itt	ge
 800f1aa:	4623      	movge	r3, r4
 800f1ac:	462c      	movge	r4, r5
 800f1ae:	4638      	mov	r0, r7
 800f1b0:	6861      	ldr	r1, [r4, #4]
 800f1b2:	bfa6      	itte	ge
 800f1b4:	461d      	movge	r5, r3
 800f1b6:	2600      	movge	r6, #0
 800f1b8:	2601      	movlt	r6, #1
 800f1ba:	f7ff fd73 	bl	800eca4 <_Balloc>
 800f1be:	692b      	ldr	r3, [r5, #16]
 800f1c0:	60c6      	str	r6, [r0, #12]
 800f1c2:	6926      	ldr	r6, [r4, #16]
 800f1c4:	f105 0914 	add.w	r9, r5, #20
 800f1c8:	f104 0214 	add.w	r2, r4, #20
 800f1cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f1d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f1d4:	f100 0514 	add.w	r5, r0, #20
 800f1d8:	f04f 0e00 	mov.w	lr, #0
 800f1dc:	f852 ab04 	ldr.w	sl, [r2], #4
 800f1e0:	f859 4b04 	ldr.w	r4, [r9], #4
 800f1e4:	fa1e f18a 	uxtah	r1, lr, sl
 800f1e8:	b2a3      	uxth	r3, r4
 800f1ea:	1ac9      	subs	r1, r1, r3
 800f1ec:	0c23      	lsrs	r3, r4, #16
 800f1ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f1f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f1f6:	b289      	uxth	r1, r1
 800f1f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f1fc:	45c8      	cmp	r8, r9
 800f1fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f202:	4694      	mov	ip, r2
 800f204:	f845 3b04 	str.w	r3, [r5], #4
 800f208:	d8e8      	bhi.n	800f1dc <__mdiff+0x5c>
 800f20a:	45bc      	cmp	ip, r7
 800f20c:	d304      	bcc.n	800f218 <__mdiff+0x98>
 800f20e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f212:	b183      	cbz	r3, 800f236 <__mdiff+0xb6>
 800f214:	6106      	str	r6, [r0, #16]
 800f216:	e7c5      	b.n	800f1a4 <__mdiff+0x24>
 800f218:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f21c:	fa1e f381 	uxtah	r3, lr, r1
 800f220:	141a      	asrs	r2, r3, #16
 800f222:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f226:	b29b      	uxth	r3, r3
 800f228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f22c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f230:	f845 3b04 	str.w	r3, [r5], #4
 800f234:	e7e9      	b.n	800f20a <__mdiff+0x8a>
 800f236:	3e01      	subs	r6, #1
 800f238:	e7e9      	b.n	800f20e <__mdiff+0x8e>
	...

0800f23c <__ulp>:
 800f23c:	4b12      	ldr	r3, [pc, #72]	; (800f288 <__ulp+0x4c>)
 800f23e:	ee10 2a90 	vmov	r2, s1
 800f242:	401a      	ands	r2, r3
 800f244:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f248:	2b00      	cmp	r3, #0
 800f24a:	dd04      	ble.n	800f256 <__ulp+0x1a>
 800f24c:	2000      	movs	r0, #0
 800f24e:	4619      	mov	r1, r3
 800f250:	ec41 0b10 	vmov	d0, r0, r1
 800f254:	4770      	bx	lr
 800f256:	425b      	negs	r3, r3
 800f258:	151b      	asrs	r3, r3, #20
 800f25a:	2b13      	cmp	r3, #19
 800f25c:	f04f 0000 	mov.w	r0, #0
 800f260:	f04f 0100 	mov.w	r1, #0
 800f264:	dc04      	bgt.n	800f270 <__ulp+0x34>
 800f266:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f26a:	fa42 f103 	asr.w	r1, r2, r3
 800f26e:	e7ef      	b.n	800f250 <__ulp+0x14>
 800f270:	3b14      	subs	r3, #20
 800f272:	2b1e      	cmp	r3, #30
 800f274:	f04f 0201 	mov.w	r2, #1
 800f278:	bfda      	itte	le
 800f27a:	f1c3 031f 	rsble	r3, r3, #31
 800f27e:	fa02 f303 	lslle.w	r3, r2, r3
 800f282:	4613      	movgt	r3, r2
 800f284:	4618      	mov	r0, r3
 800f286:	e7e3      	b.n	800f250 <__ulp+0x14>
 800f288:	7ff00000 	.word	0x7ff00000

0800f28c <__b2d>:
 800f28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f28e:	6905      	ldr	r5, [r0, #16]
 800f290:	f100 0714 	add.w	r7, r0, #20
 800f294:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f298:	1f2e      	subs	r6, r5, #4
 800f29a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f7ff fdc4 	bl	800ee2c <__hi0bits>
 800f2a4:	f1c0 0320 	rsb	r3, r0, #32
 800f2a8:	280a      	cmp	r0, #10
 800f2aa:	600b      	str	r3, [r1, #0]
 800f2ac:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f324 <__b2d+0x98>
 800f2b0:	dc14      	bgt.n	800f2dc <__b2d+0x50>
 800f2b2:	f1c0 0e0b 	rsb	lr, r0, #11
 800f2b6:	fa24 f10e 	lsr.w	r1, r4, lr
 800f2ba:	42b7      	cmp	r7, r6
 800f2bc:	ea41 030c 	orr.w	r3, r1, ip
 800f2c0:	bf34      	ite	cc
 800f2c2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f2c6:	2100      	movcs	r1, #0
 800f2c8:	3015      	adds	r0, #21
 800f2ca:	fa04 f000 	lsl.w	r0, r4, r0
 800f2ce:	fa21 f10e 	lsr.w	r1, r1, lr
 800f2d2:	ea40 0201 	orr.w	r2, r0, r1
 800f2d6:	ec43 2b10 	vmov	d0, r2, r3
 800f2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2dc:	42b7      	cmp	r7, r6
 800f2de:	bf3a      	itte	cc
 800f2e0:	f1a5 0608 	subcc.w	r6, r5, #8
 800f2e4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f2e8:	2100      	movcs	r1, #0
 800f2ea:	380b      	subs	r0, #11
 800f2ec:	d015      	beq.n	800f31a <__b2d+0x8e>
 800f2ee:	4084      	lsls	r4, r0
 800f2f0:	f1c0 0520 	rsb	r5, r0, #32
 800f2f4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f2f8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f2fc:	42be      	cmp	r6, r7
 800f2fe:	fa21 fc05 	lsr.w	ip, r1, r5
 800f302:	ea44 030c 	orr.w	r3, r4, ip
 800f306:	bf8c      	ite	hi
 800f308:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f30c:	2400      	movls	r4, #0
 800f30e:	fa01 f000 	lsl.w	r0, r1, r0
 800f312:	40ec      	lsrs	r4, r5
 800f314:	ea40 0204 	orr.w	r2, r0, r4
 800f318:	e7dd      	b.n	800f2d6 <__b2d+0x4a>
 800f31a:	ea44 030c 	orr.w	r3, r4, ip
 800f31e:	460a      	mov	r2, r1
 800f320:	e7d9      	b.n	800f2d6 <__b2d+0x4a>
 800f322:	bf00      	nop
 800f324:	3ff00000 	.word	0x3ff00000

0800f328 <__d2b>:
 800f328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f32c:	460e      	mov	r6, r1
 800f32e:	2101      	movs	r1, #1
 800f330:	ec59 8b10 	vmov	r8, r9, d0
 800f334:	4615      	mov	r5, r2
 800f336:	f7ff fcb5 	bl	800eca4 <_Balloc>
 800f33a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f33e:	4607      	mov	r7, r0
 800f340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f344:	bb34      	cbnz	r4, 800f394 <__d2b+0x6c>
 800f346:	9301      	str	r3, [sp, #4]
 800f348:	f1b8 0300 	subs.w	r3, r8, #0
 800f34c:	d027      	beq.n	800f39e <__d2b+0x76>
 800f34e:	a802      	add	r0, sp, #8
 800f350:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f354:	f7ff fd89 	bl	800ee6a <__lo0bits>
 800f358:	9900      	ldr	r1, [sp, #0]
 800f35a:	b1f0      	cbz	r0, 800f39a <__d2b+0x72>
 800f35c:	9a01      	ldr	r2, [sp, #4]
 800f35e:	f1c0 0320 	rsb	r3, r0, #32
 800f362:	fa02 f303 	lsl.w	r3, r2, r3
 800f366:	430b      	orrs	r3, r1
 800f368:	40c2      	lsrs	r2, r0
 800f36a:	617b      	str	r3, [r7, #20]
 800f36c:	9201      	str	r2, [sp, #4]
 800f36e:	9b01      	ldr	r3, [sp, #4]
 800f370:	61bb      	str	r3, [r7, #24]
 800f372:	2b00      	cmp	r3, #0
 800f374:	bf14      	ite	ne
 800f376:	2102      	movne	r1, #2
 800f378:	2101      	moveq	r1, #1
 800f37a:	6139      	str	r1, [r7, #16]
 800f37c:	b1c4      	cbz	r4, 800f3b0 <__d2b+0x88>
 800f37e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f382:	4404      	add	r4, r0
 800f384:	6034      	str	r4, [r6, #0]
 800f386:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f38a:	6028      	str	r0, [r5, #0]
 800f38c:	4638      	mov	r0, r7
 800f38e:	b003      	add	sp, #12
 800f390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f398:	e7d5      	b.n	800f346 <__d2b+0x1e>
 800f39a:	6179      	str	r1, [r7, #20]
 800f39c:	e7e7      	b.n	800f36e <__d2b+0x46>
 800f39e:	a801      	add	r0, sp, #4
 800f3a0:	f7ff fd63 	bl	800ee6a <__lo0bits>
 800f3a4:	9b01      	ldr	r3, [sp, #4]
 800f3a6:	617b      	str	r3, [r7, #20]
 800f3a8:	2101      	movs	r1, #1
 800f3aa:	6139      	str	r1, [r7, #16]
 800f3ac:	3020      	adds	r0, #32
 800f3ae:	e7e5      	b.n	800f37c <__d2b+0x54>
 800f3b0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f3b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f3b8:	6030      	str	r0, [r6, #0]
 800f3ba:	6918      	ldr	r0, [r3, #16]
 800f3bc:	f7ff fd36 	bl	800ee2c <__hi0bits>
 800f3c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f3c4:	e7e1      	b.n	800f38a <__d2b+0x62>

0800f3c6 <__ratio>:
 800f3c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ca:	4688      	mov	r8, r1
 800f3cc:	4669      	mov	r1, sp
 800f3ce:	4681      	mov	r9, r0
 800f3d0:	f7ff ff5c 	bl	800f28c <__b2d>
 800f3d4:	a901      	add	r1, sp, #4
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	ec57 6b10 	vmov	r6, r7, d0
 800f3dc:	ee10 4a10 	vmov	r4, s0
 800f3e0:	f7ff ff54 	bl	800f28c <__b2d>
 800f3e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f3e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f3ec:	eba3 0c02 	sub.w	ip, r3, r2
 800f3f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f3f4:	1a9b      	subs	r3, r3, r2
 800f3f6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f3fa:	ec51 0b10 	vmov	r0, r1, d0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	ee10 aa10 	vmov	sl, s0
 800f404:	bfce      	itee	gt
 800f406:	463a      	movgt	r2, r7
 800f408:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f40c:	460a      	movle	r2, r1
 800f40e:	463d      	mov	r5, r7
 800f410:	468b      	mov	fp, r1
 800f412:	bfcc      	ite	gt
 800f414:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f418:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f41c:	ec45 4b17 	vmov	d7, r4, r5
 800f420:	ec4b ab16 	vmov	d6, sl, fp
 800f424:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800f428:	b003      	add	sp, #12
 800f42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f42e <__copybits>:
 800f42e:	3901      	subs	r1, #1
 800f430:	b510      	push	{r4, lr}
 800f432:	1149      	asrs	r1, r1, #5
 800f434:	6914      	ldr	r4, [r2, #16]
 800f436:	3101      	adds	r1, #1
 800f438:	f102 0314 	add.w	r3, r2, #20
 800f43c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f440:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f444:	42a3      	cmp	r3, r4
 800f446:	4602      	mov	r2, r0
 800f448:	d303      	bcc.n	800f452 <__copybits+0x24>
 800f44a:	2300      	movs	r3, #0
 800f44c:	428a      	cmp	r2, r1
 800f44e:	d305      	bcc.n	800f45c <__copybits+0x2e>
 800f450:	bd10      	pop	{r4, pc}
 800f452:	f853 2b04 	ldr.w	r2, [r3], #4
 800f456:	f840 2b04 	str.w	r2, [r0], #4
 800f45a:	e7f3      	b.n	800f444 <__copybits+0x16>
 800f45c:	f842 3b04 	str.w	r3, [r2], #4
 800f460:	e7f4      	b.n	800f44c <__copybits+0x1e>

0800f462 <__any_on>:
 800f462:	f100 0214 	add.w	r2, r0, #20
 800f466:	6900      	ldr	r0, [r0, #16]
 800f468:	114b      	asrs	r3, r1, #5
 800f46a:	4298      	cmp	r0, r3
 800f46c:	b510      	push	{r4, lr}
 800f46e:	db11      	blt.n	800f494 <__any_on+0x32>
 800f470:	dd0a      	ble.n	800f488 <__any_on+0x26>
 800f472:	f011 011f 	ands.w	r1, r1, #31
 800f476:	d007      	beq.n	800f488 <__any_on+0x26>
 800f478:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f47c:	fa24 f001 	lsr.w	r0, r4, r1
 800f480:	fa00 f101 	lsl.w	r1, r0, r1
 800f484:	428c      	cmp	r4, r1
 800f486:	d10b      	bne.n	800f4a0 <__any_on+0x3e>
 800f488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d803      	bhi.n	800f498 <__any_on+0x36>
 800f490:	2000      	movs	r0, #0
 800f492:	bd10      	pop	{r4, pc}
 800f494:	4603      	mov	r3, r0
 800f496:	e7f7      	b.n	800f488 <__any_on+0x26>
 800f498:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f49c:	2900      	cmp	r1, #0
 800f49e:	d0f5      	beq.n	800f48c <__any_on+0x2a>
 800f4a0:	2001      	movs	r0, #1
 800f4a2:	e7f6      	b.n	800f492 <__any_on+0x30>

0800f4a4 <_calloc_r>:
 800f4a4:	b538      	push	{r3, r4, r5, lr}
 800f4a6:	fb02 f401 	mul.w	r4, r2, r1
 800f4aa:	4621      	mov	r1, r4
 800f4ac:	f000 f808 	bl	800f4c0 <_malloc_r>
 800f4b0:	4605      	mov	r5, r0
 800f4b2:	b118      	cbz	r0, 800f4bc <_calloc_r+0x18>
 800f4b4:	4622      	mov	r2, r4
 800f4b6:	2100      	movs	r1, #0
 800f4b8:	f7fe f9fa 	bl	800d8b0 <memset>
 800f4bc:	4628      	mov	r0, r5
 800f4be:	bd38      	pop	{r3, r4, r5, pc}

0800f4c0 <_malloc_r>:
 800f4c0:	b570      	push	{r4, r5, r6, lr}
 800f4c2:	1ccd      	adds	r5, r1, #3
 800f4c4:	f025 0503 	bic.w	r5, r5, #3
 800f4c8:	3508      	adds	r5, #8
 800f4ca:	2d0c      	cmp	r5, #12
 800f4cc:	bf38      	it	cc
 800f4ce:	250c      	movcc	r5, #12
 800f4d0:	2d00      	cmp	r5, #0
 800f4d2:	4606      	mov	r6, r0
 800f4d4:	db01      	blt.n	800f4da <_malloc_r+0x1a>
 800f4d6:	42a9      	cmp	r1, r5
 800f4d8:	d903      	bls.n	800f4e2 <_malloc_r+0x22>
 800f4da:	230c      	movs	r3, #12
 800f4dc:	6033      	str	r3, [r6, #0]
 800f4de:	2000      	movs	r0, #0
 800f4e0:	bd70      	pop	{r4, r5, r6, pc}
 800f4e2:	f000 fb72 	bl	800fbca <__malloc_lock>
 800f4e6:	4a21      	ldr	r2, [pc, #132]	; (800f56c <_malloc_r+0xac>)
 800f4e8:	6814      	ldr	r4, [r2, #0]
 800f4ea:	4621      	mov	r1, r4
 800f4ec:	b991      	cbnz	r1, 800f514 <_malloc_r+0x54>
 800f4ee:	4c20      	ldr	r4, [pc, #128]	; (800f570 <_malloc_r+0xb0>)
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	b91b      	cbnz	r3, 800f4fc <_malloc_r+0x3c>
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f000 fb17 	bl	800fb28 <_sbrk_r>
 800f4fa:	6020      	str	r0, [r4, #0]
 800f4fc:	4629      	mov	r1, r5
 800f4fe:	4630      	mov	r0, r6
 800f500:	f000 fb12 	bl	800fb28 <_sbrk_r>
 800f504:	1c43      	adds	r3, r0, #1
 800f506:	d124      	bne.n	800f552 <_malloc_r+0x92>
 800f508:	230c      	movs	r3, #12
 800f50a:	6033      	str	r3, [r6, #0]
 800f50c:	4630      	mov	r0, r6
 800f50e:	f000 fb5d 	bl	800fbcc <__malloc_unlock>
 800f512:	e7e4      	b.n	800f4de <_malloc_r+0x1e>
 800f514:	680b      	ldr	r3, [r1, #0]
 800f516:	1b5b      	subs	r3, r3, r5
 800f518:	d418      	bmi.n	800f54c <_malloc_r+0x8c>
 800f51a:	2b0b      	cmp	r3, #11
 800f51c:	d90f      	bls.n	800f53e <_malloc_r+0x7e>
 800f51e:	600b      	str	r3, [r1, #0]
 800f520:	50cd      	str	r5, [r1, r3]
 800f522:	18cc      	adds	r4, r1, r3
 800f524:	4630      	mov	r0, r6
 800f526:	f000 fb51 	bl	800fbcc <__malloc_unlock>
 800f52a:	f104 000b 	add.w	r0, r4, #11
 800f52e:	1d23      	adds	r3, r4, #4
 800f530:	f020 0007 	bic.w	r0, r0, #7
 800f534:	1ac3      	subs	r3, r0, r3
 800f536:	d0d3      	beq.n	800f4e0 <_malloc_r+0x20>
 800f538:	425a      	negs	r2, r3
 800f53a:	50e2      	str	r2, [r4, r3]
 800f53c:	e7d0      	b.n	800f4e0 <_malloc_r+0x20>
 800f53e:	428c      	cmp	r4, r1
 800f540:	684b      	ldr	r3, [r1, #4]
 800f542:	bf16      	itet	ne
 800f544:	6063      	strne	r3, [r4, #4]
 800f546:	6013      	streq	r3, [r2, #0]
 800f548:	460c      	movne	r4, r1
 800f54a:	e7eb      	b.n	800f524 <_malloc_r+0x64>
 800f54c:	460c      	mov	r4, r1
 800f54e:	6849      	ldr	r1, [r1, #4]
 800f550:	e7cc      	b.n	800f4ec <_malloc_r+0x2c>
 800f552:	1cc4      	adds	r4, r0, #3
 800f554:	f024 0403 	bic.w	r4, r4, #3
 800f558:	42a0      	cmp	r0, r4
 800f55a:	d005      	beq.n	800f568 <_malloc_r+0xa8>
 800f55c:	1a21      	subs	r1, r4, r0
 800f55e:	4630      	mov	r0, r6
 800f560:	f000 fae2 	bl	800fb28 <_sbrk_r>
 800f564:	3001      	adds	r0, #1
 800f566:	d0cf      	beq.n	800f508 <_malloc_r+0x48>
 800f568:	6025      	str	r5, [r4, #0]
 800f56a:	e7db      	b.n	800f524 <_malloc_r+0x64>
 800f56c:	240007d8 	.word	0x240007d8
 800f570:	240007dc 	.word	0x240007dc

0800f574 <__ssputs_r>:
 800f574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f578:	688e      	ldr	r6, [r1, #8]
 800f57a:	429e      	cmp	r6, r3
 800f57c:	4682      	mov	sl, r0
 800f57e:	460c      	mov	r4, r1
 800f580:	4690      	mov	r8, r2
 800f582:	4699      	mov	r9, r3
 800f584:	d837      	bhi.n	800f5f6 <__ssputs_r+0x82>
 800f586:	898a      	ldrh	r2, [r1, #12]
 800f588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f58c:	d031      	beq.n	800f5f2 <__ssputs_r+0x7e>
 800f58e:	6825      	ldr	r5, [r4, #0]
 800f590:	6909      	ldr	r1, [r1, #16]
 800f592:	1a6f      	subs	r7, r5, r1
 800f594:	6965      	ldr	r5, [r4, #20]
 800f596:	2302      	movs	r3, #2
 800f598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f59c:	fb95 f5f3 	sdiv	r5, r5, r3
 800f5a0:	f109 0301 	add.w	r3, r9, #1
 800f5a4:	443b      	add	r3, r7
 800f5a6:	429d      	cmp	r5, r3
 800f5a8:	bf38      	it	cc
 800f5aa:	461d      	movcc	r5, r3
 800f5ac:	0553      	lsls	r3, r2, #21
 800f5ae:	d530      	bpl.n	800f612 <__ssputs_r+0x9e>
 800f5b0:	4629      	mov	r1, r5
 800f5b2:	f7ff ff85 	bl	800f4c0 <_malloc_r>
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	b950      	cbnz	r0, 800f5d0 <__ssputs_r+0x5c>
 800f5ba:	230c      	movs	r3, #12
 800f5bc:	f8ca 3000 	str.w	r3, [sl]
 800f5c0:	89a3      	ldrh	r3, [r4, #12]
 800f5c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5c6:	81a3      	strh	r3, [r4, #12]
 800f5c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5d0:	463a      	mov	r2, r7
 800f5d2:	6921      	ldr	r1, [r4, #16]
 800f5d4:	f7ff fb5b 	bl	800ec8e <memcpy>
 800f5d8:	89a3      	ldrh	r3, [r4, #12]
 800f5da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f5de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5e2:	81a3      	strh	r3, [r4, #12]
 800f5e4:	6126      	str	r6, [r4, #16]
 800f5e6:	6165      	str	r5, [r4, #20]
 800f5e8:	443e      	add	r6, r7
 800f5ea:	1bed      	subs	r5, r5, r7
 800f5ec:	6026      	str	r6, [r4, #0]
 800f5ee:	60a5      	str	r5, [r4, #8]
 800f5f0:	464e      	mov	r6, r9
 800f5f2:	454e      	cmp	r6, r9
 800f5f4:	d900      	bls.n	800f5f8 <__ssputs_r+0x84>
 800f5f6:	464e      	mov	r6, r9
 800f5f8:	4632      	mov	r2, r6
 800f5fa:	4641      	mov	r1, r8
 800f5fc:	6820      	ldr	r0, [r4, #0]
 800f5fe:	f000 facb 	bl	800fb98 <memmove>
 800f602:	68a3      	ldr	r3, [r4, #8]
 800f604:	1b9b      	subs	r3, r3, r6
 800f606:	60a3      	str	r3, [r4, #8]
 800f608:	6823      	ldr	r3, [r4, #0]
 800f60a:	441e      	add	r6, r3
 800f60c:	6026      	str	r6, [r4, #0]
 800f60e:	2000      	movs	r0, #0
 800f610:	e7dc      	b.n	800f5cc <__ssputs_r+0x58>
 800f612:	462a      	mov	r2, r5
 800f614:	f000 fb2a 	bl	800fc6c <_realloc_r>
 800f618:	4606      	mov	r6, r0
 800f61a:	2800      	cmp	r0, #0
 800f61c:	d1e2      	bne.n	800f5e4 <__ssputs_r+0x70>
 800f61e:	6921      	ldr	r1, [r4, #16]
 800f620:	4650      	mov	r0, sl
 800f622:	f000 fad5 	bl	800fbd0 <_free_r>
 800f626:	e7c8      	b.n	800f5ba <__ssputs_r+0x46>

0800f628 <_svfiprintf_r>:
 800f628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62c:	461d      	mov	r5, r3
 800f62e:	898b      	ldrh	r3, [r1, #12]
 800f630:	061f      	lsls	r7, r3, #24
 800f632:	b09d      	sub	sp, #116	; 0x74
 800f634:	4680      	mov	r8, r0
 800f636:	460c      	mov	r4, r1
 800f638:	4616      	mov	r6, r2
 800f63a:	d50f      	bpl.n	800f65c <_svfiprintf_r+0x34>
 800f63c:	690b      	ldr	r3, [r1, #16]
 800f63e:	b96b      	cbnz	r3, 800f65c <_svfiprintf_r+0x34>
 800f640:	2140      	movs	r1, #64	; 0x40
 800f642:	f7ff ff3d 	bl	800f4c0 <_malloc_r>
 800f646:	6020      	str	r0, [r4, #0]
 800f648:	6120      	str	r0, [r4, #16]
 800f64a:	b928      	cbnz	r0, 800f658 <_svfiprintf_r+0x30>
 800f64c:	230c      	movs	r3, #12
 800f64e:	f8c8 3000 	str.w	r3, [r8]
 800f652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f656:	e0c8      	b.n	800f7ea <_svfiprintf_r+0x1c2>
 800f658:	2340      	movs	r3, #64	; 0x40
 800f65a:	6163      	str	r3, [r4, #20]
 800f65c:	2300      	movs	r3, #0
 800f65e:	9309      	str	r3, [sp, #36]	; 0x24
 800f660:	2320      	movs	r3, #32
 800f662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f666:	2330      	movs	r3, #48	; 0x30
 800f668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f66c:	9503      	str	r5, [sp, #12]
 800f66e:	f04f 0b01 	mov.w	fp, #1
 800f672:	4637      	mov	r7, r6
 800f674:	463d      	mov	r5, r7
 800f676:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f67a:	b10b      	cbz	r3, 800f680 <_svfiprintf_r+0x58>
 800f67c:	2b25      	cmp	r3, #37	; 0x25
 800f67e:	d13e      	bne.n	800f6fe <_svfiprintf_r+0xd6>
 800f680:	ebb7 0a06 	subs.w	sl, r7, r6
 800f684:	d00b      	beq.n	800f69e <_svfiprintf_r+0x76>
 800f686:	4653      	mov	r3, sl
 800f688:	4632      	mov	r2, r6
 800f68a:	4621      	mov	r1, r4
 800f68c:	4640      	mov	r0, r8
 800f68e:	f7ff ff71 	bl	800f574 <__ssputs_r>
 800f692:	3001      	adds	r0, #1
 800f694:	f000 80a4 	beq.w	800f7e0 <_svfiprintf_r+0x1b8>
 800f698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f69a:	4453      	add	r3, sl
 800f69c:	9309      	str	r3, [sp, #36]	; 0x24
 800f69e:	783b      	ldrb	r3, [r7, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	f000 809d 	beq.w	800f7e0 <_svfiprintf_r+0x1b8>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f6ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6b0:	9304      	str	r3, [sp, #16]
 800f6b2:	9307      	str	r3, [sp, #28]
 800f6b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6b8:	931a      	str	r3, [sp, #104]	; 0x68
 800f6ba:	462f      	mov	r7, r5
 800f6bc:	2205      	movs	r2, #5
 800f6be:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f6c2:	4850      	ldr	r0, [pc, #320]	; (800f804 <_svfiprintf_r+0x1dc>)
 800f6c4:	f7f0 fe14 	bl	80002f0 <memchr>
 800f6c8:	9b04      	ldr	r3, [sp, #16]
 800f6ca:	b9d0      	cbnz	r0, 800f702 <_svfiprintf_r+0xda>
 800f6cc:	06d9      	lsls	r1, r3, #27
 800f6ce:	bf44      	itt	mi
 800f6d0:	2220      	movmi	r2, #32
 800f6d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f6d6:	071a      	lsls	r2, r3, #28
 800f6d8:	bf44      	itt	mi
 800f6da:	222b      	movmi	r2, #43	; 0x2b
 800f6dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f6e0:	782a      	ldrb	r2, [r5, #0]
 800f6e2:	2a2a      	cmp	r2, #42	; 0x2a
 800f6e4:	d015      	beq.n	800f712 <_svfiprintf_r+0xea>
 800f6e6:	9a07      	ldr	r2, [sp, #28]
 800f6e8:	462f      	mov	r7, r5
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	250a      	movs	r5, #10
 800f6ee:	4639      	mov	r1, r7
 800f6f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6f4:	3b30      	subs	r3, #48	; 0x30
 800f6f6:	2b09      	cmp	r3, #9
 800f6f8:	d94d      	bls.n	800f796 <_svfiprintf_r+0x16e>
 800f6fa:	b1b8      	cbz	r0, 800f72c <_svfiprintf_r+0x104>
 800f6fc:	e00f      	b.n	800f71e <_svfiprintf_r+0xf6>
 800f6fe:	462f      	mov	r7, r5
 800f700:	e7b8      	b.n	800f674 <_svfiprintf_r+0x4c>
 800f702:	4a40      	ldr	r2, [pc, #256]	; (800f804 <_svfiprintf_r+0x1dc>)
 800f704:	1a80      	subs	r0, r0, r2
 800f706:	fa0b f000 	lsl.w	r0, fp, r0
 800f70a:	4318      	orrs	r0, r3
 800f70c:	9004      	str	r0, [sp, #16]
 800f70e:	463d      	mov	r5, r7
 800f710:	e7d3      	b.n	800f6ba <_svfiprintf_r+0x92>
 800f712:	9a03      	ldr	r2, [sp, #12]
 800f714:	1d11      	adds	r1, r2, #4
 800f716:	6812      	ldr	r2, [r2, #0]
 800f718:	9103      	str	r1, [sp, #12]
 800f71a:	2a00      	cmp	r2, #0
 800f71c:	db01      	blt.n	800f722 <_svfiprintf_r+0xfa>
 800f71e:	9207      	str	r2, [sp, #28]
 800f720:	e004      	b.n	800f72c <_svfiprintf_r+0x104>
 800f722:	4252      	negs	r2, r2
 800f724:	f043 0302 	orr.w	r3, r3, #2
 800f728:	9207      	str	r2, [sp, #28]
 800f72a:	9304      	str	r3, [sp, #16]
 800f72c:	783b      	ldrb	r3, [r7, #0]
 800f72e:	2b2e      	cmp	r3, #46	; 0x2e
 800f730:	d10c      	bne.n	800f74c <_svfiprintf_r+0x124>
 800f732:	787b      	ldrb	r3, [r7, #1]
 800f734:	2b2a      	cmp	r3, #42	; 0x2a
 800f736:	d133      	bne.n	800f7a0 <_svfiprintf_r+0x178>
 800f738:	9b03      	ldr	r3, [sp, #12]
 800f73a:	1d1a      	adds	r2, r3, #4
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	9203      	str	r2, [sp, #12]
 800f740:	2b00      	cmp	r3, #0
 800f742:	bfb8      	it	lt
 800f744:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f748:	3702      	adds	r7, #2
 800f74a:	9305      	str	r3, [sp, #20]
 800f74c:	4d2e      	ldr	r5, [pc, #184]	; (800f808 <_svfiprintf_r+0x1e0>)
 800f74e:	7839      	ldrb	r1, [r7, #0]
 800f750:	2203      	movs	r2, #3
 800f752:	4628      	mov	r0, r5
 800f754:	f7f0 fdcc 	bl	80002f0 <memchr>
 800f758:	b138      	cbz	r0, 800f76a <_svfiprintf_r+0x142>
 800f75a:	2340      	movs	r3, #64	; 0x40
 800f75c:	1b40      	subs	r0, r0, r5
 800f75e:	fa03 f000 	lsl.w	r0, r3, r0
 800f762:	9b04      	ldr	r3, [sp, #16]
 800f764:	4303      	orrs	r3, r0
 800f766:	3701      	adds	r7, #1
 800f768:	9304      	str	r3, [sp, #16]
 800f76a:	7839      	ldrb	r1, [r7, #0]
 800f76c:	4827      	ldr	r0, [pc, #156]	; (800f80c <_svfiprintf_r+0x1e4>)
 800f76e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f772:	2206      	movs	r2, #6
 800f774:	1c7e      	adds	r6, r7, #1
 800f776:	f7f0 fdbb 	bl	80002f0 <memchr>
 800f77a:	2800      	cmp	r0, #0
 800f77c:	d038      	beq.n	800f7f0 <_svfiprintf_r+0x1c8>
 800f77e:	4b24      	ldr	r3, [pc, #144]	; (800f810 <_svfiprintf_r+0x1e8>)
 800f780:	bb13      	cbnz	r3, 800f7c8 <_svfiprintf_r+0x1a0>
 800f782:	9b03      	ldr	r3, [sp, #12]
 800f784:	3307      	adds	r3, #7
 800f786:	f023 0307 	bic.w	r3, r3, #7
 800f78a:	3308      	adds	r3, #8
 800f78c:	9303      	str	r3, [sp, #12]
 800f78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f790:	444b      	add	r3, r9
 800f792:	9309      	str	r3, [sp, #36]	; 0x24
 800f794:	e76d      	b.n	800f672 <_svfiprintf_r+0x4a>
 800f796:	fb05 3202 	mla	r2, r5, r2, r3
 800f79a:	2001      	movs	r0, #1
 800f79c:	460f      	mov	r7, r1
 800f79e:	e7a6      	b.n	800f6ee <_svfiprintf_r+0xc6>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	3701      	adds	r7, #1
 800f7a4:	9305      	str	r3, [sp, #20]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	250a      	movs	r5, #10
 800f7aa:	4638      	mov	r0, r7
 800f7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7b0:	3a30      	subs	r2, #48	; 0x30
 800f7b2:	2a09      	cmp	r2, #9
 800f7b4:	d903      	bls.n	800f7be <_svfiprintf_r+0x196>
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d0c8      	beq.n	800f74c <_svfiprintf_r+0x124>
 800f7ba:	9105      	str	r1, [sp, #20]
 800f7bc:	e7c6      	b.n	800f74c <_svfiprintf_r+0x124>
 800f7be:	fb05 2101 	mla	r1, r5, r1, r2
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	4607      	mov	r7, r0
 800f7c6:	e7f0      	b.n	800f7aa <_svfiprintf_r+0x182>
 800f7c8:	ab03      	add	r3, sp, #12
 800f7ca:	9300      	str	r3, [sp, #0]
 800f7cc:	4622      	mov	r2, r4
 800f7ce:	4b11      	ldr	r3, [pc, #68]	; (800f814 <_svfiprintf_r+0x1ec>)
 800f7d0:	a904      	add	r1, sp, #16
 800f7d2:	4640      	mov	r0, r8
 800f7d4:	f3af 8000 	nop.w
 800f7d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f7dc:	4681      	mov	r9, r0
 800f7de:	d1d6      	bne.n	800f78e <_svfiprintf_r+0x166>
 800f7e0:	89a3      	ldrh	r3, [r4, #12]
 800f7e2:	065b      	lsls	r3, r3, #25
 800f7e4:	f53f af35 	bmi.w	800f652 <_svfiprintf_r+0x2a>
 800f7e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7ea:	b01d      	add	sp, #116	; 0x74
 800f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f0:	ab03      	add	r3, sp, #12
 800f7f2:	9300      	str	r3, [sp, #0]
 800f7f4:	4622      	mov	r2, r4
 800f7f6:	4b07      	ldr	r3, [pc, #28]	; (800f814 <_svfiprintf_r+0x1ec>)
 800f7f8:	a904      	add	r1, sp, #16
 800f7fa:	4640      	mov	r0, r8
 800f7fc:	f000 f882 	bl	800f904 <_printf_i>
 800f800:	e7ea      	b.n	800f7d8 <_svfiprintf_r+0x1b0>
 800f802:	bf00      	nop
 800f804:	08010fac 	.word	0x08010fac
 800f808:	08010fb2 	.word	0x08010fb2
 800f80c:	08010fb6 	.word	0x08010fb6
 800f810:	00000000 	.word	0x00000000
 800f814:	0800f575 	.word	0x0800f575

0800f818 <_printf_common>:
 800f818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f81c:	4691      	mov	r9, r2
 800f81e:	461f      	mov	r7, r3
 800f820:	688a      	ldr	r2, [r1, #8]
 800f822:	690b      	ldr	r3, [r1, #16]
 800f824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f828:	4293      	cmp	r3, r2
 800f82a:	bfb8      	it	lt
 800f82c:	4613      	movlt	r3, r2
 800f82e:	f8c9 3000 	str.w	r3, [r9]
 800f832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f836:	4606      	mov	r6, r0
 800f838:	460c      	mov	r4, r1
 800f83a:	b112      	cbz	r2, 800f842 <_printf_common+0x2a>
 800f83c:	3301      	adds	r3, #1
 800f83e:	f8c9 3000 	str.w	r3, [r9]
 800f842:	6823      	ldr	r3, [r4, #0]
 800f844:	0699      	lsls	r1, r3, #26
 800f846:	bf42      	ittt	mi
 800f848:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f84c:	3302      	addmi	r3, #2
 800f84e:	f8c9 3000 	strmi.w	r3, [r9]
 800f852:	6825      	ldr	r5, [r4, #0]
 800f854:	f015 0506 	ands.w	r5, r5, #6
 800f858:	d107      	bne.n	800f86a <_printf_common+0x52>
 800f85a:	f104 0a19 	add.w	sl, r4, #25
 800f85e:	68e3      	ldr	r3, [r4, #12]
 800f860:	f8d9 2000 	ldr.w	r2, [r9]
 800f864:	1a9b      	subs	r3, r3, r2
 800f866:	42ab      	cmp	r3, r5
 800f868:	dc28      	bgt.n	800f8bc <_printf_common+0xa4>
 800f86a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f86e:	6822      	ldr	r2, [r4, #0]
 800f870:	3300      	adds	r3, #0
 800f872:	bf18      	it	ne
 800f874:	2301      	movne	r3, #1
 800f876:	0692      	lsls	r2, r2, #26
 800f878:	d42d      	bmi.n	800f8d6 <_printf_common+0xbe>
 800f87a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f87e:	4639      	mov	r1, r7
 800f880:	4630      	mov	r0, r6
 800f882:	47c0      	blx	r8
 800f884:	3001      	adds	r0, #1
 800f886:	d020      	beq.n	800f8ca <_printf_common+0xb2>
 800f888:	6823      	ldr	r3, [r4, #0]
 800f88a:	68e5      	ldr	r5, [r4, #12]
 800f88c:	f8d9 2000 	ldr.w	r2, [r9]
 800f890:	f003 0306 	and.w	r3, r3, #6
 800f894:	2b04      	cmp	r3, #4
 800f896:	bf08      	it	eq
 800f898:	1aad      	subeq	r5, r5, r2
 800f89a:	68a3      	ldr	r3, [r4, #8]
 800f89c:	6922      	ldr	r2, [r4, #16]
 800f89e:	bf0c      	ite	eq
 800f8a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f8a4:	2500      	movne	r5, #0
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	bfc4      	itt	gt
 800f8aa:	1a9b      	subgt	r3, r3, r2
 800f8ac:	18ed      	addgt	r5, r5, r3
 800f8ae:	f04f 0900 	mov.w	r9, #0
 800f8b2:	341a      	adds	r4, #26
 800f8b4:	454d      	cmp	r5, r9
 800f8b6:	d11a      	bne.n	800f8ee <_printf_common+0xd6>
 800f8b8:	2000      	movs	r0, #0
 800f8ba:	e008      	b.n	800f8ce <_printf_common+0xb6>
 800f8bc:	2301      	movs	r3, #1
 800f8be:	4652      	mov	r2, sl
 800f8c0:	4639      	mov	r1, r7
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	47c0      	blx	r8
 800f8c6:	3001      	adds	r0, #1
 800f8c8:	d103      	bne.n	800f8d2 <_printf_common+0xba>
 800f8ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8d2:	3501      	adds	r5, #1
 800f8d4:	e7c3      	b.n	800f85e <_printf_common+0x46>
 800f8d6:	18e1      	adds	r1, r4, r3
 800f8d8:	1c5a      	adds	r2, r3, #1
 800f8da:	2030      	movs	r0, #48	; 0x30
 800f8dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f8e0:	4422      	add	r2, r4
 800f8e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f8e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f8ea:	3302      	adds	r3, #2
 800f8ec:	e7c5      	b.n	800f87a <_printf_common+0x62>
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	4622      	mov	r2, r4
 800f8f2:	4639      	mov	r1, r7
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	47c0      	blx	r8
 800f8f8:	3001      	adds	r0, #1
 800f8fa:	d0e6      	beq.n	800f8ca <_printf_common+0xb2>
 800f8fc:	f109 0901 	add.w	r9, r9, #1
 800f900:	e7d8      	b.n	800f8b4 <_printf_common+0x9c>
	...

0800f904 <_printf_i>:
 800f904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f908:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f90c:	460c      	mov	r4, r1
 800f90e:	7e09      	ldrb	r1, [r1, #24]
 800f910:	b085      	sub	sp, #20
 800f912:	296e      	cmp	r1, #110	; 0x6e
 800f914:	4617      	mov	r7, r2
 800f916:	4606      	mov	r6, r0
 800f918:	4698      	mov	r8, r3
 800f91a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f91c:	f000 80b3 	beq.w	800fa86 <_printf_i+0x182>
 800f920:	d822      	bhi.n	800f968 <_printf_i+0x64>
 800f922:	2963      	cmp	r1, #99	; 0x63
 800f924:	d036      	beq.n	800f994 <_printf_i+0x90>
 800f926:	d80a      	bhi.n	800f93e <_printf_i+0x3a>
 800f928:	2900      	cmp	r1, #0
 800f92a:	f000 80b9 	beq.w	800faa0 <_printf_i+0x19c>
 800f92e:	2958      	cmp	r1, #88	; 0x58
 800f930:	f000 8083 	beq.w	800fa3a <_printf_i+0x136>
 800f934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f938:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f93c:	e032      	b.n	800f9a4 <_printf_i+0xa0>
 800f93e:	2964      	cmp	r1, #100	; 0x64
 800f940:	d001      	beq.n	800f946 <_printf_i+0x42>
 800f942:	2969      	cmp	r1, #105	; 0x69
 800f944:	d1f6      	bne.n	800f934 <_printf_i+0x30>
 800f946:	6820      	ldr	r0, [r4, #0]
 800f948:	6813      	ldr	r3, [r2, #0]
 800f94a:	0605      	lsls	r5, r0, #24
 800f94c:	f103 0104 	add.w	r1, r3, #4
 800f950:	d52a      	bpl.n	800f9a8 <_printf_i+0xa4>
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	6011      	str	r1, [r2, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	da03      	bge.n	800f962 <_printf_i+0x5e>
 800f95a:	222d      	movs	r2, #45	; 0x2d
 800f95c:	425b      	negs	r3, r3
 800f95e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f962:	486f      	ldr	r0, [pc, #444]	; (800fb20 <_printf_i+0x21c>)
 800f964:	220a      	movs	r2, #10
 800f966:	e039      	b.n	800f9dc <_printf_i+0xd8>
 800f968:	2973      	cmp	r1, #115	; 0x73
 800f96a:	f000 809d 	beq.w	800faa8 <_printf_i+0x1a4>
 800f96e:	d808      	bhi.n	800f982 <_printf_i+0x7e>
 800f970:	296f      	cmp	r1, #111	; 0x6f
 800f972:	d020      	beq.n	800f9b6 <_printf_i+0xb2>
 800f974:	2970      	cmp	r1, #112	; 0x70
 800f976:	d1dd      	bne.n	800f934 <_printf_i+0x30>
 800f978:	6823      	ldr	r3, [r4, #0]
 800f97a:	f043 0320 	orr.w	r3, r3, #32
 800f97e:	6023      	str	r3, [r4, #0]
 800f980:	e003      	b.n	800f98a <_printf_i+0x86>
 800f982:	2975      	cmp	r1, #117	; 0x75
 800f984:	d017      	beq.n	800f9b6 <_printf_i+0xb2>
 800f986:	2978      	cmp	r1, #120	; 0x78
 800f988:	d1d4      	bne.n	800f934 <_printf_i+0x30>
 800f98a:	2378      	movs	r3, #120	; 0x78
 800f98c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f990:	4864      	ldr	r0, [pc, #400]	; (800fb24 <_printf_i+0x220>)
 800f992:	e055      	b.n	800fa40 <_printf_i+0x13c>
 800f994:	6813      	ldr	r3, [r2, #0]
 800f996:	1d19      	adds	r1, r3, #4
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	6011      	str	r1, [r2, #0]
 800f99c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f9a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	e08c      	b.n	800fac2 <_printf_i+0x1be>
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	6011      	str	r1, [r2, #0]
 800f9ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f9b0:	bf18      	it	ne
 800f9b2:	b21b      	sxthne	r3, r3
 800f9b4:	e7cf      	b.n	800f956 <_printf_i+0x52>
 800f9b6:	6813      	ldr	r3, [r2, #0]
 800f9b8:	6825      	ldr	r5, [r4, #0]
 800f9ba:	1d18      	adds	r0, r3, #4
 800f9bc:	6010      	str	r0, [r2, #0]
 800f9be:	0628      	lsls	r0, r5, #24
 800f9c0:	d501      	bpl.n	800f9c6 <_printf_i+0xc2>
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	e002      	b.n	800f9cc <_printf_i+0xc8>
 800f9c6:	0668      	lsls	r0, r5, #25
 800f9c8:	d5fb      	bpl.n	800f9c2 <_printf_i+0xbe>
 800f9ca:	881b      	ldrh	r3, [r3, #0]
 800f9cc:	4854      	ldr	r0, [pc, #336]	; (800fb20 <_printf_i+0x21c>)
 800f9ce:	296f      	cmp	r1, #111	; 0x6f
 800f9d0:	bf14      	ite	ne
 800f9d2:	220a      	movne	r2, #10
 800f9d4:	2208      	moveq	r2, #8
 800f9d6:	2100      	movs	r1, #0
 800f9d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f9dc:	6865      	ldr	r5, [r4, #4]
 800f9de:	60a5      	str	r5, [r4, #8]
 800f9e0:	2d00      	cmp	r5, #0
 800f9e2:	f2c0 8095 	blt.w	800fb10 <_printf_i+0x20c>
 800f9e6:	6821      	ldr	r1, [r4, #0]
 800f9e8:	f021 0104 	bic.w	r1, r1, #4
 800f9ec:	6021      	str	r1, [r4, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d13d      	bne.n	800fa6e <_printf_i+0x16a>
 800f9f2:	2d00      	cmp	r5, #0
 800f9f4:	f040 808e 	bne.w	800fb14 <_printf_i+0x210>
 800f9f8:	4665      	mov	r5, ip
 800f9fa:	2a08      	cmp	r2, #8
 800f9fc:	d10b      	bne.n	800fa16 <_printf_i+0x112>
 800f9fe:	6823      	ldr	r3, [r4, #0]
 800fa00:	07db      	lsls	r3, r3, #31
 800fa02:	d508      	bpl.n	800fa16 <_printf_i+0x112>
 800fa04:	6923      	ldr	r3, [r4, #16]
 800fa06:	6862      	ldr	r2, [r4, #4]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	bfde      	ittt	le
 800fa0c:	2330      	movle	r3, #48	; 0x30
 800fa0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fa12:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fa16:	ebac 0305 	sub.w	r3, ip, r5
 800fa1a:	6123      	str	r3, [r4, #16]
 800fa1c:	f8cd 8000 	str.w	r8, [sp]
 800fa20:	463b      	mov	r3, r7
 800fa22:	aa03      	add	r2, sp, #12
 800fa24:	4621      	mov	r1, r4
 800fa26:	4630      	mov	r0, r6
 800fa28:	f7ff fef6 	bl	800f818 <_printf_common>
 800fa2c:	3001      	adds	r0, #1
 800fa2e:	d14d      	bne.n	800facc <_printf_i+0x1c8>
 800fa30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa34:	b005      	add	sp, #20
 800fa36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa3a:	4839      	ldr	r0, [pc, #228]	; (800fb20 <_printf_i+0x21c>)
 800fa3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fa40:	6813      	ldr	r3, [r2, #0]
 800fa42:	6821      	ldr	r1, [r4, #0]
 800fa44:	1d1d      	adds	r5, r3, #4
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	6015      	str	r5, [r2, #0]
 800fa4a:	060a      	lsls	r2, r1, #24
 800fa4c:	d50b      	bpl.n	800fa66 <_printf_i+0x162>
 800fa4e:	07ca      	lsls	r2, r1, #31
 800fa50:	bf44      	itt	mi
 800fa52:	f041 0120 	orrmi.w	r1, r1, #32
 800fa56:	6021      	strmi	r1, [r4, #0]
 800fa58:	b91b      	cbnz	r3, 800fa62 <_printf_i+0x15e>
 800fa5a:	6822      	ldr	r2, [r4, #0]
 800fa5c:	f022 0220 	bic.w	r2, r2, #32
 800fa60:	6022      	str	r2, [r4, #0]
 800fa62:	2210      	movs	r2, #16
 800fa64:	e7b7      	b.n	800f9d6 <_printf_i+0xd2>
 800fa66:	064d      	lsls	r5, r1, #25
 800fa68:	bf48      	it	mi
 800fa6a:	b29b      	uxthmi	r3, r3
 800fa6c:	e7ef      	b.n	800fa4e <_printf_i+0x14a>
 800fa6e:	4665      	mov	r5, ip
 800fa70:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa74:	fb02 3311 	mls	r3, r2, r1, r3
 800fa78:	5cc3      	ldrb	r3, [r0, r3]
 800fa7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fa7e:	460b      	mov	r3, r1
 800fa80:	2900      	cmp	r1, #0
 800fa82:	d1f5      	bne.n	800fa70 <_printf_i+0x16c>
 800fa84:	e7b9      	b.n	800f9fa <_printf_i+0xf6>
 800fa86:	6813      	ldr	r3, [r2, #0]
 800fa88:	6825      	ldr	r5, [r4, #0]
 800fa8a:	6961      	ldr	r1, [r4, #20]
 800fa8c:	1d18      	adds	r0, r3, #4
 800fa8e:	6010      	str	r0, [r2, #0]
 800fa90:	0628      	lsls	r0, r5, #24
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	d501      	bpl.n	800fa9a <_printf_i+0x196>
 800fa96:	6019      	str	r1, [r3, #0]
 800fa98:	e002      	b.n	800faa0 <_printf_i+0x19c>
 800fa9a:	066a      	lsls	r2, r5, #25
 800fa9c:	d5fb      	bpl.n	800fa96 <_printf_i+0x192>
 800fa9e:	8019      	strh	r1, [r3, #0]
 800faa0:	2300      	movs	r3, #0
 800faa2:	6123      	str	r3, [r4, #16]
 800faa4:	4665      	mov	r5, ip
 800faa6:	e7b9      	b.n	800fa1c <_printf_i+0x118>
 800faa8:	6813      	ldr	r3, [r2, #0]
 800faaa:	1d19      	adds	r1, r3, #4
 800faac:	6011      	str	r1, [r2, #0]
 800faae:	681d      	ldr	r5, [r3, #0]
 800fab0:	6862      	ldr	r2, [r4, #4]
 800fab2:	2100      	movs	r1, #0
 800fab4:	4628      	mov	r0, r5
 800fab6:	f7f0 fc1b 	bl	80002f0 <memchr>
 800faba:	b108      	cbz	r0, 800fac0 <_printf_i+0x1bc>
 800fabc:	1b40      	subs	r0, r0, r5
 800fabe:	6060      	str	r0, [r4, #4]
 800fac0:	6863      	ldr	r3, [r4, #4]
 800fac2:	6123      	str	r3, [r4, #16]
 800fac4:	2300      	movs	r3, #0
 800fac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800faca:	e7a7      	b.n	800fa1c <_printf_i+0x118>
 800facc:	6923      	ldr	r3, [r4, #16]
 800face:	462a      	mov	r2, r5
 800fad0:	4639      	mov	r1, r7
 800fad2:	4630      	mov	r0, r6
 800fad4:	47c0      	blx	r8
 800fad6:	3001      	adds	r0, #1
 800fad8:	d0aa      	beq.n	800fa30 <_printf_i+0x12c>
 800fada:	6823      	ldr	r3, [r4, #0]
 800fadc:	079b      	lsls	r3, r3, #30
 800fade:	d413      	bmi.n	800fb08 <_printf_i+0x204>
 800fae0:	68e0      	ldr	r0, [r4, #12]
 800fae2:	9b03      	ldr	r3, [sp, #12]
 800fae4:	4298      	cmp	r0, r3
 800fae6:	bfb8      	it	lt
 800fae8:	4618      	movlt	r0, r3
 800faea:	e7a3      	b.n	800fa34 <_printf_i+0x130>
 800faec:	2301      	movs	r3, #1
 800faee:	464a      	mov	r2, r9
 800faf0:	4639      	mov	r1, r7
 800faf2:	4630      	mov	r0, r6
 800faf4:	47c0      	blx	r8
 800faf6:	3001      	adds	r0, #1
 800faf8:	d09a      	beq.n	800fa30 <_printf_i+0x12c>
 800fafa:	3501      	adds	r5, #1
 800fafc:	68e3      	ldr	r3, [r4, #12]
 800fafe:	9a03      	ldr	r2, [sp, #12]
 800fb00:	1a9b      	subs	r3, r3, r2
 800fb02:	42ab      	cmp	r3, r5
 800fb04:	dcf2      	bgt.n	800faec <_printf_i+0x1e8>
 800fb06:	e7eb      	b.n	800fae0 <_printf_i+0x1dc>
 800fb08:	2500      	movs	r5, #0
 800fb0a:	f104 0919 	add.w	r9, r4, #25
 800fb0e:	e7f5      	b.n	800fafc <_printf_i+0x1f8>
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1ac      	bne.n	800fa6e <_printf_i+0x16a>
 800fb14:	7803      	ldrb	r3, [r0, #0]
 800fb16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb1e:	e76c      	b.n	800f9fa <_printf_i+0xf6>
 800fb20:	08010fbd 	.word	0x08010fbd
 800fb24:	08010fce 	.word	0x08010fce

0800fb28 <_sbrk_r>:
 800fb28:	b538      	push	{r3, r4, r5, lr}
 800fb2a:	4c06      	ldr	r4, [pc, #24]	; (800fb44 <_sbrk_r+0x1c>)
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	4605      	mov	r5, r0
 800fb30:	4608      	mov	r0, r1
 800fb32:	6023      	str	r3, [r4, #0]
 800fb34:	f7fd fa7e 	bl	800d034 <_sbrk>
 800fb38:	1c43      	adds	r3, r0, #1
 800fb3a:	d102      	bne.n	800fb42 <_sbrk_r+0x1a>
 800fb3c:	6823      	ldr	r3, [r4, #0]
 800fb3e:	b103      	cbz	r3, 800fb42 <_sbrk_r+0x1a>
 800fb40:	602b      	str	r3, [r5, #0]
 800fb42:	bd38      	pop	{r3, r4, r5, pc}
 800fb44:	24001fa0 	.word	0x24001fa0

0800fb48 <strncmp>:
 800fb48:	b510      	push	{r4, lr}
 800fb4a:	b16a      	cbz	r2, 800fb68 <strncmp+0x20>
 800fb4c:	3901      	subs	r1, #1
 800fb4e:	1884      	adds	r4, r0, r2
 800fb50:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fb54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d103      	bne.n	800fb64 <strncmp+0x1c>
 800fb5c:	42a0      	cmp	r0, r4
 800fb5e:	d001      	beq.n	800fb64 <strncmp+0x1c>
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d1f5      	bne.n	800fb50 <strncmp+0x8>
 800fb64:	1a98      	subs	r0, r3, r2
 800fb66:	bd10      	pop	{r4, pc}
 800fb68:	4610      	mov	r0, r2
 800fb6a:	e7fc      	b.n	800fb66 <strncmp+0x1e>

0800fb6c <__ascii_wctomb>:
 800fb6c:	b149      	cbz	r1, 800fb82 <__ascii_wctomb+0x16>
 800fb6e:	2aff      	cmp	r2, #255	; 0xff
 800fb70:	bf85      	ittet	hi
 800fb72:	238a      	movhi	r3, #138	; 0x8a
 800fb74:	6003      	strhi	r3, [r0, #0]
 800fb76:	700a      	strbls	r2, [r1, #0]
 800fb78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800fb7c:	bf98      	it	ls
 800fb7e:	2001      	movls	r0, #1
 800fb80:	4770      	bx	lr
 800fb82:	4608      	mov	r0, r1
 800fb84:	4770      	bx	lr
	...

0800fb88 <malloc>:
 800fb88:	4b02      	ldr	r3, [pc, #8]	; (800fb94 <malloc+0xc>)
 800fb8a:	4601      	mov	r1, r0
 800fb8c:	6818      	ldr	r0, [r3, #0]
 800fb8e:	f7ff bc97 	b.w	800f4c0 <_malloc_r>
 800fb92:	bf00      	nop
 800fb94:	240000a8 	.word	0x240000a8

0800fb98 <memmove>:
 800fb98:	4288      	cmp	r0, r1
 800fb9a:	b510      	push	{r4, lr}
 800fb9c:	eb01 0302 	add.w	r3, r1, r2
 800fba0:	d807      	bhi.n	800fbb2 <memmove+0x1a>
 800fba2:	1e42      	subs	r2, r0, #1
 800fba4:	4299      	cmp	r1, r3
 800fba6:	d00a      	beq.n	800fbbe <memmove+0x26>
 800fba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbac:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fbb0:	e7f8      	b.n	800fba4 <memmove+0xc>
 800fbb2:	4283      	cmp	r3, r0
 800fbb4:	d9f5      	bls.n	800fba2 <memmove+0xa>
 800fbb6:	1881      	adds	r1, r0, r2
 800fbb8:	1ad2      	subs	r2, r2, r3
 800fbba:	42d3      	cmn	r3, r2
 800fbbc:	d100      	bne.n	800fbc0 <memmove+0x28>
 800fbbe:	bd10      	pop	{r4, pc}
 800fbc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbc4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fbc8:	e7f7      	b.n	800fbba <memmove+0x22>

0800fbca <__malloc_lock>:
 800fbca:	4770      	bx	lr

0800fbcc <__malloc_unlock>:
 800fbcc:	4770      	bx	lr
	...

0800fbd0 <_free_r>:
 800fbd0:	b538      	push	{r3, r4, r5, lr}
 800fbd2:	4605      	mov	r5, r0
 800fbd4:	2900      	cmp	r1, #0
 800fbd6:	d045      	beq.n	800fc64 <_free_r+0x94>
 800fbd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbdc:	1f0c      	subs	r4, r1, #4
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	bfb8      	it	lt
 800fbe2:	18e4      	addlt	r4, r4, r3
 800fbe4:	f7ff fff1 	bl	800fbca <__malloc_lock>
 800fbe8:	4a1f      	ldr	r2, [pc, #124]	; (800fc68 <_free_r+0x98>)
 800fbea:	6813      	ldr	r3, [r2, #0]
 800fbec:	4610      	mov	r0, r2
 800fbee:	b933      	cbnz	r3, 800fbfe <_free_r+0x2e>
 800fbf0:	6063      	str	r3, [r4, #4]
 800fbf2:	6014      	str	r4, [r2, #0]
 800fbf4:	4628      	mov	r0, r5
 800fbf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbfa:	f7ff bfe7 	b.w	800fbcc <__malloc_unlock>
 800fbfe:	42a3      	cmp	r3, r4
 800fc00:	d90c      	bls.n	800fc1c <_free_r+0x4c>
 800fc02:	6821      	ldr	r1, [r4, #0]
 800fc04:	1862      	adds	r2, r4, r1
 800fc06:	4293      	cmp	r3, r2
 800fc08:	bf04      	itt	eq
 800fc0a:	681a      	ldreq	r2, [r3, #0]
 800fc0c:	685b      	ldreq	r3, [r3, #4]
 800fc0e:	6063      	str	r3, [r4, #4]
 800fc10:	bf04      	itt	eq
 800fc12:	1852      	addeq	r2, r2, r1
 800fc14:	6022      	streq	r2, [r4, #0]
 800fc16:	6004      	str	r4, [r0, #0]
 800fc18:	e7ec      	b.n	800fbf4 <_free_r+0x24>
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	685a      	ldr	r2, [r3, #4]
 800fc1e:	b10a      	cbz	r2, 800fc24 <_free_r+0x54>
 800fc20:	42a2      	cmp	r2, r4
 800fc22:	d9fa      	bls.n	800fc1a <_free_r+0x4a>
 800fc24:	6819      	ldr	r1, [r3, #0]
 800fc26:	1858      	adds	r0, r3, r1
 800fc28:	42a0      	cmp	r0, r4
 800fc2a:	d10b      	bne.n	800fc44 <_free_r+0x74>
 800fc2c:	6820      	ldr	r0, [r4, #0]
 800fc2e:	4401      	add	r1, r0
 800fc30:	1858      	adds	r0, r3, r1
 800fc32:	4282      	cmp	r2, r0
 800fc34:	6019      	str	r1, [r3, #0]
 800fc36:	d1dd      	bne.n	800fbf4 <_free_r+0x24>
 800fc38:	6810      	ldr	r0, [r2, #0]
 800fc3a:	6852      	ldr	r2, [r2, #4]
 800fc3c:	605a      	str	r2, [r3, #4]
 800fc3e:	4401      	add	r1, r0
 800fc40:	6019      	str	r1, [r3, #0]
 800fc42:	e7d7      	b.n	800fbf4 <_free_r+0x24>
 800fc44:	d902      	bls.n	800fc4c <_free_r+0x7c>
 800fc46:	230c      	movs	r3, #12
 800fc48:	602b      	str	r3, [r5, #0]
 800fc4a:	e7d3      	b.n	800fbf4 <_free_r+0x24>
 800fc4c:	6820      	ldr	r0, [r4, #0]
 800fc4e:	1821      	adds	r1, r4, r0
 800fc50:	428a      	cmp	r2, r1
 800fc52:	bf04      	itt	eq
 800fc54:	6811      	ldreq	r1, [r2, #0]
 800fc56:	6852      	ldreq	r2, [r2, #4]
 800fc58:	6062      	str	r2, [r4, #4]
 800fc5a:	bf04      	itt	eq
 800fc5c:	1809      	addeq	r1, r1, r0
 800fc5e:	6021      	streq	r1, [r4, #0]
 800fc60:	605c      	str	r4, [r3, #4]
 800fc62:	e7c7      	b.n	800fbf4 <_free_r+0x24>
 800fc64:	bd38      	pop	{r3, r4, r5, pc}
 800fc66:	bf00      	nop
 800fc68:	240007d8 	.word	0x240007d8

0800fc6c <_realloc_r>:
 800fc6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc6e:	4607      	mov	r7, r0
 800fc70:	4614      	mov	r4, r2
 800fc72:	460e      	mov	r6, r1
 800fc74:	b921      	cbnz	r1, 800fc80 <_realloc_r+0x14>
 800fc76:	4611      	mov	r1, r2
 800fc78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fc7c:	f7ff bc20 	b.w	800f4c0 <_malloc_r>
 800fc80:	b922      	cbnz	r2, 800fc8c <_realloc_r+0x20>
 800fc82:	f7ff ffa5 	bl	800fbd0 <_free_r>
 800fc86:	4625      	mov	r5, r4
 800fc88:	4628      	mov	r0, r5
 800fc8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc8c:	f000 f814 	bl	800fcb8 <_malloc_usable_size_r>
 800fc90:	42a0      	cmp	r0, r4
 800fc92:	d20f      	bcs.n	800fcb4 <_realloc_r+0x48>
 800fc94:	4621      	mov	r1, r4
 800fc96:	4638      	mov	r0, r7
 800fc98:	f7ff fc12 	bl	800f4c0 <_malloc_r>
 800fc9c:	4605      	mov	r5, r0
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	d0f2      	beq.n	800fc88 <_realloc_r+0x1c>
 800fca2:	4631      	mov	r1, r6
 800fca4:	4622      	mov	r2, r4
 800fca6:	f7fe fff2 	bl	800ec8e <memcpy>
 800fcaa:	4631      	mov	r1, r6
 800fcac:	4638      	mov	r0, r7
 800fcae:	f7ff ff8f 	bl	800fbd0 <_free_r>
 800fcb2:	e7e9      	b.n	800fc88 <_realloc_r+0x1c>
 800fcb4:	4635      	mov	r5, r6
 800fcb6:	e7e7      	b.n	800fc88 <_realloc_r+0x1c>

0800fcb8 <_malloc_usable_size_r>:
 800fcb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcbc:	1f18      	subs	r0, r3, #4
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	bfbc      	itt	lt
 800fcc2:	580b      	ldrlt	r3, [r1, r0]
 800fcc4:	18c0      	addlt	r0, r0, r3
 800fcc6:	4770      	bx	lr

0800fcc8 <pow>:
 800fcc8:	b570      	push	{r4, r5, r6, lr}
 800fcca:	ed2d 8b0a 	vpush	{d8-d12}
 800fcce:	eeb0 9b40 	vmov.f64	d9, d0
 800fcd2:	eeb0 8b41 	vmov.f64	d8, d1
 800fcd6:	4c8c      	ldr	r4, [pc, #560]	; (800ff08 <pow+0x240>)
 800fcd8:	b08a      	sub	sp, #40	; 0x28
 800fcda:	f000 f971 	bl	800ffc0 <__ieee754_pow>
 800fcde:	f994 3000 	ldrsb.w	r3, [r4]
 800fce2:	eeb0 ab40 	vmov.f64	d10, d0
 800fce6:	1c5a      	adds	r2, r3, #1
 800fce8:	4626      	mov	r6, r4
 800fcea:	d04b      	beq.n	800fd84 <pow+0xbc>
 800fcec:	eeb4 8b48 	vcmp.f64	d8, d8
 800fcf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf4:	d646      	bvs.n	800fd84 <pow+0xbc>
 800fcf6:	eeb4 9b49 	vcmp.f64	d9, d9
 800fcfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcfe:	d719      	bvc.n	800fd34 <pow+0x6c>
 800fd00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd08:	d13c      	bne.n	800fd84 <pow+0xbc>
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	9200      	str	r2, [sp, #0]
 800fd0e:	497f      	ldr	r1, [pc, #508]	; (800ff0c <pow+0x244>)
 800fd10:	4a7f      	ldr	r2, [pc, #508]	; (800ff10 <pow+0x248>)
 800fd12:	9201      	str	r2, [sp, #4]
 800fd14:	2000      	movs	r0, #0
 800fd16:	2200      	movs	r2, #0
 800fd18:	2b02      	cmp	r3, #2
 800fd1a:	9208      	str	r2, [sp, #32]
 800fd1c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800fd20:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fd24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fd28:	d02a      	beq.n	800fd80 <pow+0xb8>
 800fd2a:	4668      	mov	r0, sp
 800fd2c:	f000 fce2 	bl	80106f4 <matherr>
 800fd30:	bb00      	cbnz	r0, 800fd74 <pow+0xac>
 800fd32:	e04e      	b.n	800fdd2 <pow+0x10a>
 800fd34:	ed9f bb72 	vldr	d11, [pc, #456]	; 800ff00 <pow+0x238>
 800fd38:	eeb4 9b4b 	vcmp.f64	d9, d11
 800fd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd40:	eeb0 cb4b 	vmov.f64	d12, d11
 800fd44:	d14a      	bne.n	800fddc <pow+0x114>
 800fd46:	eeb4 8b4b 	vcmp.f64	d8, d11
 800fd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd4e:	d11f      	bne.n	800fd90 <pow+0xc8>
 800fd50:	2201      	movs	r2, #1
 800fd52:	9200      	str	r2, [sp, #0]
 800fd54:	4a6e      	ldr	r2, [pc, #440]	; (800ff10 <pow+0x248>)
 800fd56:	9201      	str	r2, [sp, #4]
 800fd58:	2200      	movs	r2, #0
 800fd5a:	9208      	str	r2, [sp, #32]
 800fd5c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800fd60:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fd64:	ed8d bb06 	vstr	d11, [sp, #24]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d0de      	beq.n	800fd2a <pow+0x62>
 800fd6c:	4b67      	ldr	r3, [pc, #412]	; (800ff0c <pow+0x244>)
 800fd6e:	2200      	movs	r2, #0
 800fd70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fd74:	9b08      	ldr	r3, [sp, #32]
 800fd76:	b11b      	cbz	r3, 800fd80 <pow+0xb8>
 800fd78:	f7fd fd70 	bl	800d85c <__errno>
 800fd7c:	9b08      	ldr	r3, [sp, #32]
 800fd7e:	6003      	str	r3, [r0, #0]
 800fd80:	ed9d ab06 	vldr	d10, [sp, #24]
 800fd84:	eeb0 0b4a 	vmov.f64	d0, d10
 800fd88:	b00a      	add	sp, #40	; 0x28
 800fd8a:	ecbd 8b0a 	vpop	{d8-d12}
 800fd8e:	bd70      	pop	{r4, r5, r6, pc}
 800fd90:	eeb0 0b48 	vmov.f64	d0, d8
 800fd94:	f000 fca6 	bl	80106e4 <finite>
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	d0f3      	beq.n	800fd84 <pow+0xbc>
 800fd9c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800fda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda4:	d5ee      	bpl.n	800fd84 <pow+0xbc>
 800fda6:	2301      	movs	r3, #1
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	4b59      	ldr	r3, [pc, #356]	; (800ff10 <pow+0x248>)
 800fdac:	9301      	str	r3, [sp, #4]
 800fdae:	2300      	movs	r3, #0
 800fdb0:	9308      	str	r3, [sp, #32]
 800fdb2:	f994 3000 	ldrsb.w	r3, [r4]
 800fdb6:	ed8d 9b02 	vstr	d9, [sp, #8]
 800fdba:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fdbe:	b913      	cbnz	r3, 800fdc6 <pow+0xfe>
 800fdc0:	ed8d bb06 	vstr	d11, [sp, #24]
 800fdc4:	e7b1      	b.n	800fd2a <pow+0x62>
 800fdc6:	4953      	ldr	r1, [pc, #332]	; (800ff14 <pow+0x24c>)
 800fdc8:	2000      	movs	r0, #0
 800fdca:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fdce:	2b02      	cmp	r3, #2
 800fdd0:	d1ab      	bne.n	800fd2a <pow+0x62>
 800fdd2:	f7fd fd43 	bl	800d85c <__errno>
 800fdd6:	2321      	movs	r3, #33	; 0x21
 800fdd8:	6003      	str	r3, [r0, #0]
 800fdda:	e7cb      	b.n	800fd74 <pow+0xac>
 800fddc:	f000 fc82 	bl	80106e4 <finite>
 800fde0:	4605      	mov	r5, r0
 800fde2:	2800      	cmp	r0, #0
 800fde4:	d164      	bne.n	800feb0 <pow+0x1e8>
 800fde6:	eeb0 0b49 	vmov.f64	d0, d9
 800fdea:	f000 fc7b 	bl	80106e4 <finite>
 800fdee:	2800      	cmp	r0, #0
 800fdf0:	d05e      	beq.n	800feb0 <pow+0x1e8>
 800fdf2:	eeb0 0b48 	vmov.f64	d0, d8
 800fdf6:	f000 fc75 	bl	80106e4 <finite>
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	d058      	beq.n	800feb0 <pow+0x1e8>
 800fdfe:	eeb4 ab4a 	vcmp.f64	d10, d10
 800fe02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe06:	f994 3000 	ldrsb.w	r3, [r4]
 800fe0a:	4a41      	ldr	r2, [pc, #260]	; (800ff10 <pow+0x248>)
 800fe0c:	d70e      	bvc.n	800fe2c <pow+0x164>
 800fe0e:	2101      	movs	r1, #1
 800fe10:	e9cd 1200 	strd	r1, r2, [sp]
 800fe14:	9508      	str	r5, [sp, #32]
 800fe16:	ed8d 9b02 	vstr	d9, [sp, #8]
 800fe1a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d0ce      	beq.n	800fdc0 <pow+0xf8>
 800fe22:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800fe26:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fe2a:	e7d0      	b.n	800fdce <pow+0x106>
 800fe2c:	2103      	movs	r1, #3
 800fe2e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fe32:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800fe36:	ee28 8b07 	vmul.f64	d8, d8, d7
 800fe3a:	e9cd 1200 	strd	r1, r2, [sp]
 800fe3e:	9508      	str	r5, [sp, #32]
 800fe40:	ed8d 9b02 	vstr	d9, [sp, #8]
 800fe44:	b9fb      	cbnz	r3, 800fe86 <pow+0x1be>
 800fe46:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800fe4a:	4b33      	ldr	r3, [pc, #204]	; (800ff18 <pow+0x250>)
 800fe4c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800fe50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fe58:	d54b      	bpl.n	800fef2 <pow+0x22a>
 800fe5a:	eeb0 0b48 	vmov.f64	d0, d8
 800fe5e:	f000 fc53 	bl	8010708 <rint>
 800fe62:	eeb4 0b48 	vcmp.f64	d0, d8
 800fe66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6a:	d004      	beq.n	800fe76 <pow+0x1ae>
 800fe6c:	4b2b      	ldr	r3, [pc, #172]	; (800ff1c <pow+0x254>)
 800fe6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800fe72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fe76:	f996 3000 	ldrsb.w	r3, [r6]
 800fe7a:	2b02      	cmp	r3, #2
 800fe7c:	d139      	bne.n	800fef2 <pow+0x22a>
 800fe7e:	f7fd fced 	bl	800d85c <__errno>
 800fe82:	2322      	movs	r3, #34	; 0x22
 800fe84:	e7a8      	b.n	800fdd8 <pow+0x110>
 800fe86:	4b26      	ldr	r3, [pc, #152]	; (800ff20 <pow+0x258>)
 800fe88:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fe96:	d5ee      	bpl.n	800fe76 <pow+0x1ae>
 800fe98:	eeb0 0b48 	vmov.f64	d0, d8
 800fe9c:	f000 fc34 	bl	8010708 <rint>
 800fea0:	eeb4 0b48 	vcmp.f64	d0, d8
 800fea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea8:	d0e5      	beq.n	800fe76 <pow+0x1ae>
 800feaa:	2200      	movs	r2, #0
 800feac:	4b19      	ldr	r3, [pc, #100]	; (800ff14 <pow+0x24c>)
 800feae:	e7e0      	b.n	800fe72 <pow+0x1aa>
 800feb0:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800feb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb8:	f47f af64 	bne.w	800fd84 <pow+0xbc>
 800febc:	eeb0 0b49 	vmov.f64	d0, d9
 800fec0:	f000 fc10 	bl	80106e4 <finite>
 800fec4:	2800      	cmp	r0, #0
 800fec6:	f43f af5d 	beq.w	800fd84 <pow+0xbc>
 800feca:	eeb0 0b48 	vmov.f64	d0, d8
 800fece:	f000 fc09 	bl	80106e4 <finite>
 800fed2:	2800      	cmp	r0, #0
 800fed4:	f43f af56 	beq.w	800fd84 <pow+0xbc>
 800fed8:	2304      	movs	r3, #4
 800feda:	9300      	str	r3, [sp, #0]
 800fedc:	4b0c      	ldr	r3, [pc, #48]	; (800ff10 <pow+0x248>)
 800fede:	9301      	str	r3, [sp, #4]
 800fee0:	2300      	movs	r3, #0
 800fee2:	9308      	str	r3, [sp, #32]
 800fee4:	ed8d 9b02 	vstr	d9, [sp, #8]
 800fee8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800feec:	ed8d cb06 	vstr	d12, [sp, #24]
 800fef0:	e7c1      	b.n	800fe76 <pow+0x1ae>
 800fef2:	4668      	mov	r0, sp
 800fef4:	f000 fbfe 	bl	80106f4 <matherr>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	f47f af3b 	bne.w	800fd74 <pow+0xac>
 800fefe:	e7be      	b.n	800fe7e <pow+0x1b6>
	...
 800ff08:	24000278 	.word	0x24000278
 800ff0c:	3ff00000 	.word	0x3ff00000
 800ff10:	080110e0 	.word	0x080110e0
 800ff14:	fff00000 	.word	0xfff00000
 800ff18:	47efffff 	.word	0x47efffff
 800ff1c:	c7efffff 	.word	0xc7efffff
 800ff20:	7ff00000 	.word	0x7ff00000
 800ff24:	00000000 	.word	0x00000000

0800ff28 <sqrt>:
 800ff28:	b500      	push	{lr}
 800ff2a:	ed2d 8b02 	vpush	{d8}
 800ff2e:	eeb0 8b40 	vmov.f64	d8, d0
 800ff32:	b08b      	sub	sp, #44	; 0x2c
 800ff34:	f000 fbca 	bl	80106cc <__ieee754_sqrt>
 800ff38:	4b1f      	ldr	r3, [pc, #124]	; (800ffb8 <sqrt+0x90>)
 800ff3a:	f993 3000 	ldrsb.w	r3, [r3]
 800ff3e:	1c5a      	adds	r2, r3, #1
 800ff40:	d024      	beq.n	800ff8c <sqrt+0x64>
 800ff42:	eeb4 8b48 	vcmp.f64	d8, d8
 800ff46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff4a:	d61f      	bvs.n	800ff8c <sqrt+0x64>
 800ff4c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800ffb0 <sqrt+0x88>
 800ff50:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800ff54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff58:	d518      	bpl.n	800ff8c <sqrt+0x64>
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	9200      	str	r2, [sp, #0]
 800ff5e:	4a17      	ldr	r2, [pc, #92]	; (800ffbc <sqrt+0x94>)
 800ff60:	9201      	str	r2, [sp, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	9208      	str	r2, [sp, #32]
 800ff66:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ff6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ff6e:	b993      	cbnz	r3, 800ff96 <sqrt+0x6e>
 800ff70:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ff74:	4668      	mov	r0, sp
 800ff76:	f000 fbbd 	bl	80106f4 <matherr>
 800ff7a:	b190      	cbz	r0, 800ffa2 <sqrt+0x7a>
 800ff7c:	9b08      	ldr	r3, [sp, #32]
 800ff7e:	b11b      	cbz	r3, 800ff88 <sqrt+0x60>
 800ff80:	f7fd fc6c 	bl	800d85c <__errno>
 800ff84:	9b08      	ldr	r3, [sp, #32]
 800ff86:	6003      	str	r3, [r0, #0]
 800ff88:	ed9d 0b06 	vldr	d0, [sp, #24]
 800ff8c:	b00b      	add	sp, #44	; 0x2c
 800ff8e:	ecbd 8b02 	vpop	{d8}
 800ff92:	f85d fb04 	ldr.w	pc, [sp], #4
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800ff9c:	ed8d 6b06 	vstr	d6, [sp, #24]
 800ffa0:	d1e8      	bne.n	800ff74 <sqrt+0x4c>
 800ffa2:	f7fd fc5b 	bl	800d85c <__errno>
 800ffa6:	2321      	movs	r3, #33	; 0x21
 800ffa8:	6003      	str	r3, [r0, #0]
 800ffaa:	e7e7      	b.n	800ff7c <sqrt+0x54>
 800ffac:	f3af 8000 	nop.w
	...
 800ffb8:	24000278 	.word	0x24000278
 800ffbc:	080110e4 	.word	0x080110e4

0800ffc0 <__ieee754_pow>:
 800ffc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffc4:	ec57 6b11 	vmov	r6, r7, d1
 800ffc8:	ed2d 8b02 	vpush	{d8}
 800ffcc:	eeb0 8b40 	vmov.f64	d8, d0
 800ffd0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ffd4:	ea58 0306 	orrs.w	r3, r8, r6
 800ffd8:	b085      	sub	sp, #20
 800ffda:	46b9      	mov	r9, r7
 800ffdc:	ee11 2a10 	vmov	r2, s2
 800ffe0:	f000 8306 	beq.w	80105f0 <__ieee754_pow+0x630>
 800ffe4:	ee18 aa90 	vmov	sl, s17
 800ffe8:	4bb9      	ldr	r3, [pc, #740]	; (80102d0 <__ieee754_pow+0x310>)
 800ffea:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800ffee:	429c      	cmp	r4, r3
 800fff0:	ee10 ba10 	vmov	fp, s0
 800fff4:	dc0b      	bgt.n	801000e <__ieee754_pow+0x4e>
 800fff6:	d105      	bne.n	8010004 <__ieee754_pow+0x44>
 800fff8:	f1bb 0f00 	cmp.w	fp, #0
 800fffc:	d107      	bne.n	801000e <__ieee754_pow+0x4e>
 800fffe:	45a0      	cmp	r8, r4
 8010000:	dc0d      	bgt.n	801001e <__ieee754_pow+0x5e>
 8010002:	e001      	b.n	8010008 <__ieee754_pow+0x48>
 8010004:	4598      	cmp	r8, r3
 8010006:	dc02      	bgt.n	801000e <__ieee754_pow+0x4e>
 8010008:	4598      	cmp	r8, r3
 801000a:	d110      	bne.n	801002e <__ieee754_pow+0x6e>
 801000c:	b17a      	cbz	r2, 801002e <__ieee754_pow+0x6e>
 801000e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010012:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010016:	ea54 030b 	orrs.w	r3, r4, fp
 801001a:	f000 82e9 	beq.w	80105f0 <__ieee754_pow+0x630>
 801001e:	48ad      	ldr	r0, [pc, #692]	; (80102d4 <__ieee754_pow+0x314>)
 8010020:	b005      	add	sp, #20
 8010022:	ecbd 8b02 	vpop	{d8}
 8010026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801002a:	f000 bb65 	b.w	80106f8 <nan>
 801002e:	f1ba 0f00 	cmp.w	sl, #0
 8010032:	da4e      	bge.n	80100d2 <__ieee754_pow+0x112>
 8010034:	4ba8      	ldr	r3, [pc, #672]	; (80102d8 <__ieee754_pow+0x318>)
 8010036:	4598      	cmp	r8, r3
 8010038:	dc49      	bgt.n	80100ce <__ieee754_pow+0x10e>
 801003a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801003e:	4598      	cmp	r8, r3
 8010040:	dd47      	ble.n	80100d2 <__ieee754_pow+0x112>
 8010042:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010046:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801004a:	2b14      	cmp	r3, #20
 801004c:	dd24      	ble.n	8010098 <__ieee754_pow+0xd8>
 801004e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010052:	fa22 f503 	lsr.w	r5, r2, r3
 8010056:	fa05 f303 	lsl.w	r3, r5, r3
 801005a:	4293      	cmp	r3, r2
 801005c:	d139      	bne.n	80100d2 <__ieee754_pow+0x112>
 801005e:	f005 0501 	and.w	r5, r5, #1
 8010062:	f1c5 0502 	rsb	r5, r5, #2
 8010066:	2a00      	cmp	r2, #0
 8010068:	d15a      	bne.n	8010120 <__ieee754_pow+0x160>
 801006a:	4b99      	ldr	r3, [pc, #612]	; (80102d0 <__ieee754_pow+0x310>)
 801006c:	4598      	cmp	r8, r3
 801006e:	d122      	bne.n	80100b6 <__ieee754_pow+0xf6>
 8010070:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010074:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010078:	ea53 030b 	orrs.w	r3, r3, fp
 801007c:	f000 82b8 	beq.w	80105f0 <__ieee754_pow+0x630>
 8010080:	4b96      	ldr	r3, [pc, #600]	; (80102dc <__ieee754_pow+0x31c>)
 8010082:	429c      	cmp	r4, r3
 8010084:	dd27      	ble.n	80100d6 <__ieee754_pow+0x116>
 8010086:	f1b9 0f00 	cmp.w	r9, #0
 801008a:	f280 82b4 	bge.w	80105f6 <__ieee754_pow+0x636>
 801008e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 80102a0 <__ieee754_pow+0x2e0>
 8010092:	ed8d 7b00 	vstr	d7, [sp]
 8010096:	e026      	b.n	80100e6 <__ieee754_pow+0x126>
 8010098:	2a00      	cmp	r2, #0
 801009a:	d140      	bne.n	801011e <__ieee754_pow+0x15e>
 801009c:	f1c3 0314 	rsb	r3, r3, #20
 80100a0:	fa48 f503 	asr.w	r5, r8, r3
 80100a4:	fa05 f303 	lsl.w	r3, r5, r3
 80100a8:	4543      	cmp	r3, r8
 80100aa:	f040 82aa 	bne.w	8010602 <__ieee754_pow+0x642>
 80100ae:	f005 0501 	and.w	r5, r5, #1
 80100b2:	f1c5 0502 	rsb	r5, r5, #2
 80100b6:	4b8a      	ldr	r3, [pc, #552]	; (80102e0 <__ieee754_pow+0x320>)
 80100b8:	4598      	cmp	r8, r3
 80100ba:	d11b      	bne.n	80100f4 <__ieee754_pow+0x134>
 80100bc:	f1b9 0f00 	cmp.w	r9, #0
 80100c0:	f280 829c 	bge.w	80105fc <__ieee754_pow+0x63c>
 80100c4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80100c8:	ee87 7b08 	vdiv.f64	d7, d7, d8
 80100cc:	e7e1      	b.n	8010092 <__ieee754_pow+0xd2>
 80100ce:	2502      	movs	r5, #2
 80100d0:	e7c9      	b.n	8010066 <__ieee754_pow+0xa6>
 80100d2:	2500      	movs	r5, #0
 80100d4:	e7c7      	b.n	8010066 <__ieee754_pow+0xa6>
 80100d6:	f1b9 0f00 	cmp.w	r9, #0
 80100da:	dad8      	bge.n	801008e <__ieee754_pow+0xce>
 80100dc:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 80100e0:	4633      	mov	r3, r6
 80100e2:	e9cd 3400 	strd	r3, r4, [sp]
 80100e6:	ed9d 0b00 	vldr	d0, [sp]
 80100ea:	b005      	add	sp, #20
 80100ec:	ecbd 8b02 	vpop	{d8}
 80100f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80100f8:	d102      	bne.n	8010100 <__ieee754_pow+0x140>
 80100fa:	ee28 7b08 	vmul.f64	d7, d8, d8
 80100fe:	e7c8      	b.n	8010092 <__ieee754_pow+0xd2>
 8010100:	4b78      	ldr	r3, [pc, #480]	; (80102e4 <__ieee754_pow+0x324>)
 8010102:	4599      	cmp	r9, r3
 8010104:	d10c      	bne.n	8010120 <__ieee754_pow+0x160>
 8010106:	f1ba 0f00 	cmp.w	sl, #0
 801010a:	db09      	blt.n	8010120 <__ieee754_pow+0x160>
 801010c:	eeb0 0b48 	vmov.f64	d0, d8
 8010110:	b005      	add	sp, #20
 8010112:	ecbd 8b02 	vpop	{d8}
 8010116:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011a:	f000 bad7 	b.w	80106cc <__ieee754_sqrt>
 801011e:	2500      	movs	r5, #0
 8010120:	eeb0 0b48 	vmov.f64	d0, d8
 8010124:	f000 fad5 	bl	80106d2 <fabs>
 8010128:	ed8d 0b00 	vstr	d0, [sp]
 801012c:	f1bb 0f00 	cmp.w	fp, #0
 8010130:	d128      	bne.n	8010184 <__ieee754_pow+0x1c4>
 8010132:	b124      	cbz	r4, 801013e <__ieee754_pow+0x17e>
 8010134:	4b6a      	ldr	r3, [pc, #424]	; (80102e0 <__ieee754_pow+0x320>)
 8010136:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 801013a:	429a      	cmp	r2, r3
 801013c:	d122      	bne.n	8010184 <__ieee754_pow+0x1c4>
 801013e:	f1b9 0f00 	cmp.w	r9, #0
 8010142:	da07      	bge.n	8010154 <__ieee754_pow+0x194>
 8010144:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010148:	ed9d 6b00 	vldr	d6, [sp]
 801014c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 8010150:	ed8d 7b00 	vstr	d7, [sp]
 8010154:	f1ba 0f00 	cmp.w	sl, #0
 8010158:	dac5      	bge.n	80100e6 <__ieee754_pow+0x126>
 801015a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801015e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010162:	ea54 0305 	orrs.w	r3, r4, r5
 8010166:	d106      	bne.n	8010176 <__ieee754_pow+0x1b6>
 8010168:	ed9d 7b00 	vldr	d7, [sp]
 801016c:	ee37 7b47 	vsub.f64	d7, d7, d7
 8010170:	ee87 7b07 	vdiv.f64	d7, d7, d7
 8010174:	e78d      	b.n	8010092 <__ieee754_pow+0xd2>
 8010176:	2d01      	cmp	r5, #1
 8010178:	d1b5      	bne.n	80100e6 <__ieee754_pow+0x126>
 801017a:	ed9d 7b00 	vldr	d7, [sp]
 801017e:	eeb1 7b47 	vneg.f64	d7, d7
 8010182:	e786      	b.n	8010092 <__ieee754_pow+0xd2>
 8010184:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 8010188:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801018c:	ea55 030a 	orrs.w	r3, r5, sl
 8010190:	d104      	bne.n	801019c <__ieee754_pow+0x1dc>
 8010192:	ee38 8b48 	vsub.f64	d8, d8, d8
 8010196:	ee88 7b08 	vdiv.f64	d7, d8, d8
 801019a:	e77a      	b.n	8010092 <__ieee754_pow+0xd2>
 801019c:	4b52      	ldr	r3, [pc, #328]	; (80102e8 <__ieee754_pow+0x328>)
 801019e:	4598      	cmp	r8, r3
 80101a0:	f340 80a8 	ble.w	80102f4 <__ieee754_pow+0x334>
 80101a4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80101a8:	4598      	cmp	r8, r3
 80101aa:	dd0b      	ble.n	80101c4 <__ieee754_pow+0x204>
 80101ac:	4b4b      	ldr	r3, [pc, #300]	; (80102dc <__ieee754_pow+0x31c>)
 80101ae:	429c      	cmp	r4, r3
 80101b0:	dc0e      	bgt.n	80101d0 <__ieee754_pow+0x210>
 80101b2:	f1b9 0f00 	cmp.w	r9, #0
 80101b6:	f6bf af6a 	bge.w	801008e <__ieee754_pow+0xce>
 80101ba:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 80102a8 <__ieee754_pow+0x2e8>
 80101be:	ee27 7b07 	vmul.f64	d7, d7, d7
 80101c2:	e766      	b.n	8010092 <__ieee754_pow+0xd2>
 80101c4:	4b49      	ldr	r3, [pc, #292]	; (80102ec <__ieee754_pow+0x32c>)
 80101c6:	429c      	cmp	r4, r3
 80101c8:	ddf3      	ble.n	80101b2 <__ieee754_pow+0x1f2>
 80101ca:	4b45      	ldr	r3, [pc, #276]	; (80102e0 <__ieee754_pow+0x320>)
 80101cc:	429c      	cmp	r4, r3
 80101ce:	dd03      	ble.n	80101d8 <__ieee754_pow+0x218>
 80101d0:	f1b9 0f00 	cmp.w	r9, #0
 80101d4:	dcf1      	bgt.n	80101ba <__ieee754_pow+0x1fa>
 80101d6:	e75a      	b.n	801008e <__ieee754_pow+0xce>
 80101d8:	ed9d 7b00 	vldr	d7, [sp]
 80101dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80101e0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80102b0 <__ieee754_pow+0x2f0>
 80101e4:	ee37 6b46 	vsub.f64	d6, d7, d6
 80101e8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 80101ec:	eeb1 3b46 	vneg.f64	d3, d6
 80101f0:	eea3 5b07 	vfma.f64	d5, d3, d7
 80101f4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80101f8:	eea5 7b46 	vfms.f64	d7, d5, d6
 80101fc:	ee26 5b06 	vmul.f64	d5, d6, d6
 8010200:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010204:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80102b8 <__ieee754_pow+0x2f8>
 8010208:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801020c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80102c0 <__ieee754_pow+0x300>
 8010210:	eea6 7b05 	vfma.f64	d7, d6, d5
 8010214:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 80102c8 <__ieee754_pow+0x308>
 8010218:	eeb0 4b47 	vmov.f64	d4, d7
 801021c:	eea6 4b05 	vfma.f64	d4, d6, d5
 8010220:	ec53 2b14 	vmov	r2, r3, d4
 8010224:	2200      	movs	r2, #0
 8010226:	ec43 2b14 	vmov	d4, r2, r3
 801022a:	eeb0 6b44 	vmov.f64	d6, d4
 801022e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010232:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010236:	3d01      	subs	r5, #1
 8010238:	ea55 030a 	orrs.w	r3, r5, sl
 801023c:	f04f 0200 	mov.w	r2, #0
 8010240:	463b      	mov	r3, r7
 8010242:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010246:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801024a:	ec47 6b15 	vmov	d5, r6, r7
 801024e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 8010252:	ec47 6b13 	vmov	d3, r6, r7
 8010256:	ec43 2b16 	vmov	d6, r2, r3
 801025a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801025e:	ee35 5b46 	vsub.f64	d5, d5, d6
 8010262:	4b23      	ldr	r3, [pc, #140]	; (80102f0 <__ieee754_pow+0x330>)
 8010264:	eea5 7b04 	vfma.f64	d7, d5, d4
 8010268:	ee24 6b06 	vmul.f64	d6, d4, d6
 801026c:	ee37 5b06 	vadd.f64	d5, d7, d6
 8010270:	ee15 1a90 	vmov	r1, s11
 8010274:	4299      	cmp	r1, r3
 8010276:	ee15 2a10 	vmov	r2, s10
 801027a:	f340 819b 	ble.w	80105b4 <__ieee754_pow+0x5f4>
 801027e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010282:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010286:	4313      	orrs	r3, r2
 8010288:	f000 810a 	beq.w	80104a0 <__ieee754_pow+0x4e0>
 801028c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80102a8 <__ieee754_pow+0x2e8>
 8010290:	ee28 8b07 	vmul.f64	d8, d8, d7
 8010294:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010298:	e6fb      	b.n	8010092 <__ieee754_pow+0xd2>
 801029a:	bf00      	nop
 801029c:	f3af 8000 	nop.w
	...
 80102a8:	8800759c 	.word	0x8800759c
 80102ac:	7e37e43c 	.word	0x7e37e43c
 80102b0:	55555555 	.word	0x55555555
 80102b4:	3fd55555 	.word	0x3fd55555
 80102b8:	652b82fe 	.word	0x652b82fe
 80102bc:	3ff71547 	.word	0x3ff71547
 80102c0:	f85ddf44 	.word	0xf85ddf44
 80102c4:	3e54ae0b 	.word	0x3e54ae0b
 80102c8:	60000000 	.word	0x60000000
 80102cc:	3ff71547 	.word	0x3ff71547
 80102d0:	7ff00000 	.word	0x7ff00000
 80102d4:	08010fb1 	.word	0x08010fb1
 80102d8:	433fffff 	.word	0x433fffff
 80102dc:	3fefffff 	.word	0x3fefffff
 80102e0:	3ff00000 	.word	0x3ff00000
 80102e4:	3fe00000 	.word	0x3fe00000
 80102e8:	41e00000 	.word	0x41e00000
 80102ec:	3feffffe 	.word	0x3feffffe
 80102f0:	408fffff 	.word	0x408fffff
 80102f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80102f8:	f280 80ce 	bge.w	8010498 <__ieee754_pow+0x4d8>
 80102fc:	ed9d 6b00 	vldr	d6, [sp]
 8010300:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 8010608 <__ieee754_pow+0x648>
 8010304:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010308:	ed8d 7b00 	vstr	d7, [sp]
 801030c:	9c01      	ldr	r4, [sp, #4]
 801030e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 8010312:	1521      	asrs	r1, r4, #20
 8010314:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010318:	4419      	add	r1, r3
 801031a:	4be3      	ldr	r3, [pc, #908]	; (80106a8 <__ieee754_pow+0x6e8>)
 801031c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010320:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 8010324:	429c      	cmp	r4, r3
 8010326:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 801032a:	dd06      	ble.n	801033a <__ieee754_pow+0x37a>
 801032c:	4bdf      	ldr	r3, [pc, #892]	; (80106ac <__ieee754_pow+0x6ec>)
 801032e:	429c      	cmp	r4, r3
 8010330:	f340 80b4 	ble.w	801049c <__ieee754_pow+0x4dc>
 8010334:	3101      	adds	r1, #1
 8010336:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801033a:	2400      	movs	r4, #0
 801033c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010340:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8010344:	4603      	mov	r3, r0
 8010346:	ec43 2b17 	vmov	d7, r2, r3
 801034a:	4bd9      	ldr	r3, [pc, #868]	; (80106b0 <__ieee754_pow+0x6f0>)
 801034c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 8010350:	4463      	add	r3, ip
 8010352:	ed93 5b00 	vldr	d5, [r3]
 8010356:	1040      	asrs	r0, r0, #1
 8010358:	ee37 2b45 	vsub.f64	d2, d7, d5
 801035c:	ee35 6b07 	vadd.f64	d6, d5, d7
 8010360:	ee84 1b06 	vdiv.f64	d1, d4, d6
 8010364:	ee22 6b01 	vmul.f64	d6, d2, d1
 8010368:	ed8d 6b00 	vstr	d6, [sp]
 801036c:	e9dd 8900 	ldrd	r8, r9, [sp]
 8010370:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8010374:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 8010378:	f04f 0800 	mov.w	r8, #0
 801037c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 8010380:	2200      	movs	r2, #0
 8010382:	ec49 8b14 	vmov	d4, r8, r9
 8010386:	ec43 2b16 	vmov	d6, r2, r3
 801038a:	eeb1 3b44 	vneg.f64	d3, d4
 801038e:	eea3 2b06 	vfma.f64	d2, d3, d6
 8010392:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010396:	ee37 7b46 	vsub.f64	d7, d7, d6
 801039a:	eea3 2b07 	vfma.f64	d2, d3, d7
 801039e:	ed9d 7b00 	vldr	d7, [sp]
 80103a2:	ee22 2b01 	vmul.f64	d2, d2, d1
 80103a6:	ee27 5b07 	vmul.f64	d5, d7, d7
 80103aa:	ee37 6b04 	vadd.f64	d6, d7, d4
 80103ae:	ed9f 1b98 	vldr	d1, [pc, #608]	; 8010610 <__ieee754_pow+0x650>
 80103b2:	ee25 0b05 	vmul.f64	d0, d5, d5
 80103b6:	ee26 6b02 	vmul.f64	d6, d6, d2
 80103ba:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8010618 <__ieee754_pow+0x658>
 80103be:	eea5 7b01 	vfma.f64	d7, d5, d1
 80103c2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8010620 <__ieee754_pow+0x660>
 80103c6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80103ca:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8010628 <__ieee754_pow+0x668>
 80103ce:	eea1 7b05 	vfma.f64	d7, d1, d5
 80103d2:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8010630 <__ieee754_pow+0x670>
 80103d6:	eea7 1b05 	vfma.f64	d1, d7, d5
 80103da:	ed9f 7b97 	vldr	d7, [pc, #604]	; 8010638 <__ieee754_pow+0x678>
 80103de:	eea1 7b05 	vfma.f64	d7, d1, d5
 80103e2:	eea0 6b07 	vfma.f64	d6, d0, d7
 80103e6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 80103ea:	eeb0 5b47 	vmov.f64	d5, d7
 80103ee:	eea4 5b04 	vfma.f64	d5, d4, d4
 80103f2:	ee35 5b06 	vadd.f64	d5, d5, d6
 80103f6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80103fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80103fe:	ed9d 5b02 	vldr	d5, [sp, #8]
 8010402:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010406:	eea3 7b04 	vfma.f64	d7, d3, d4
 801040a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801040e:	ed9d 6b00 	vldr	d6, [sp]
 8010412:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010416:	eea2 7b05 	vfma.f64	d7, d2, d5
 801041a:	eeb0 6b47 	vmov.f64	d6, d7
 801041e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8010422:	ed8d 6b00 	vstr	d6, [sp]
 8010426:	f8cd 8000 	str.w	r8, [sp]
 801042a:	ed9d 2b00 	vldr	d2, [sp]
 801042e:	eeb0 6b42 	vmov.f64	d6, d2
 8010432:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010436:	ee37 7b46 	vsub.f64	d7, d7, d6
 801043a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8010640 <__ieee754_pow+0x680>
 801043e:	4b9d      	ldr	r3, [pc, #628]	; (80106b4 <__ieee754_pow+0x6f4>)
 8010440:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010444:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8010648 <__ieee754_pow+0x688>
 8010448:	4463      	add	r3, ip
 801044a:	eea2 7b06 	vfma.f64	d7, d2, d6
 801044e:	ed93 6b00 	vldr	d6, [r3]
 8010452:	4b99      	ldr	r3, [pc, #612]	; (80106b8 <__ieee754_pow+0x6f8>)
 8010454:	ee37 6b06 	vadd.f64	d6, d7, d6
 8010458:	449c      	add	ip, r3
 801045a:	ed9c 1b00 	vldr	d1, [ip]
 801045e:	eeb0 4b46 	vmov.f64	d4, d6
 8010462:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 8010650 <__ieee754_pow+0x690>
 8010466:	ee07 1a90 	vmov	s15, r1
 801046a:	eea2 4b03 	vfma.f64	d4, d2, d3
 801046e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010472:	ee34 4b01 	vadd.f64	d4, d4, d1
 8010476:	ee34 5b07 	vadd.f64	d5, d4, d7
 801047a:	ed8d 5b00 	vstr	d5, [sp]
 801047e:	f8cd 8000 	str.w	r8, [sp]
 8010482:	ed9d 4b00 	vldr	d4, [sp]
 8010486:	ee34 7b47 	vsub.f64	d7, d4, d7
 801048a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801048e:	eea2 7b43 	vfms.f64	d7, d2, d3
 8010492:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010496:	e6ce      	b.n	8010236 <__ieee754_pow+0x276>
 8010498:	2300      	movs	r3, #0
 801049a:	e73a      	b.n	8010312 <__ieee754_pow+0x352>
 801049c:	2401      	movs	r4, #1
 801049e:	e74d      	b.n	801033c <__ieee754_pow+0x37c>
 80104a0:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 8010658 <__ieee754_pow+0x698>
 80104a4:	ee35 5b46 	vsub.f64	d5, d5, d6
 80104a8:	ee37 4b04 	vadd.f64	d4, d7, d4
 80104ac:	eeb4 4bc5 	vcmpe.f64	d4, d5
 80104b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b4:	f73f aeea 	bgt.w	801028c <__ieee754_pow+0x2cc>
 80104b8:	4a80      	ldr	r2, [pc, #512]	; (80106bc <__ieee754_pow+0x6fc>)
 80104ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80104be:	4293      	cmp	r3, r2
 80104c0:	f340 808e 	ble.w	80105e0 <__ieee754_pow+0x620>
 80104c4:	151b      	asrs	r3, r3, #20
 80104c6:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 80104ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80104ce:	4103      	asrs	r3, r0
 80104d0:	440b      	add	r3, r1
 80104d2:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80104d6:	487a      	ldr	r0, [pc, #488]	; (80106c0 <__ieee754_pow+0x700>)
 80104d8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80104dc:	4110      	asrs	r0, r2
 80104de:	ea23 0500 	bic.w	r5, r3, r0
 80104e2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 80104e6:	2400      	movs	r4, #0
 80104e8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 80104ec:	f1c2 0214 	rsb	r2, r2, #20
 80104f0:	ec45 4b15 	vmov	d5, r4, r5
 80104f4:	4110      	asrs	r0, r2
 80104f6:	2900      	cmp	r1, #0
 80104f8:	bfb8      	it	lt
 80104fa:	4240      	neglt	r0, r0
 80104fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010500:	ee36 5b07 	vadd.f64	d5, d6, d7
 8010504:	ec53 2b15 	vmov	r2, r3, d5
 8010508:	2200      	movs	r2, #0
 801050a:	ec43 2b15 	vmov	d5, r2, r3
 801050e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8010660 <__ieee754_pow+0x6a0>
 8010512:	ee35 6b46 	vsub.f64	d6, d5, d6
 8010516:	ee37 6b46 	vsub.f64	d6, d7, d6
 801051a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 8010668 <__ieee754_pow+0x6a8>
 801051e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010522:	eea6 7b04 	vfma.f64	d7, d6, d4
 8010526:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8010670 <__ieee754_pow+0x6b0>
 801052a:	eeb0 4b47 	vmov.f64	d4, d7
 801052e:	eea5 4b06 	vfma.f64	d4, d5, d6
 8010532:	eeb0 3b44 	vmov.f64	d3, d4
 8010536:	eea5 3b46 	vfms.f64	d3, d5, d6
 801053a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8010678 <__ieee754_pow+0x6b8>
 801053e:	ee37 7b43 	vsub.f64	d7, d7, d3
 8010542:	ee24 6b04 	vmul.f64	d6, d4, d4
 8010546:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8010680 <__ieee754_pow+0x6c0>
 801054a:	eea4 7b07 	vfma.f64	d7, d4, d7
 801054e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8010552:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8010688 <__ieee754_pow+0x6c8>
 8010556:	eea3 5b06 	vfma.f64	d5, d3, d6
 801055a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8010690 <__ieee754_pow+0x6d0>
 801055e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8010562:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8010698 <__ieee754_pow+0x6d8>
 8010566:	eea3 5b06 	vfma.f64	d5, d3, d6
 801056a:	eeb0 3b44 	vmov.f64	d3, d4
 801056e:	eea5 3b46 	vfms.f64	d3, d5, d6
 8010572:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010576:	eeb0 6b43 	vmov.f64	d6, d3
 801057a:	ee24 3b03 	vmul.f64	d3, d4, d3
 801057e:	ee36 5b45 	vsub.f64	d5, d6, d5
 8010582:	ee83 6b05 	vdiv.f64	d6, d3, d5
 8010586:	ee36 7b47 	vsub.f64	d7, d6, d7
 801058a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801058e:	ee37 7b44 	vsub.f64	d7, d7, d4
 8010592:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010596:	ed8d 7b00 	vstr	d7, [sp]
 801059a:	9901      	ldr	r1, [sp, #4]
 801059c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 80105a0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80105a4:	da1e      	bge.n	80105e4 <__ieee754_pow+0x624>
 80105a6:	eeb0 0b47 	vmov.f64	d0, d7
 80105aa:	f000 f939 	bl	8010820 <scalbn>
 80105ae:	ee20 7b08 	vmul.f64	d7, d0, d8
 80105b2:	e56e      	b.n	8010092 <__ieee754_pow+0xd2>
 80105b4:	4b43      	ldr	r3, [pc, #268]	; (80106c4 <__ieee754_pow+0x704>)
 80105b6:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 80105ba:	4298      	cmp	r0, r3
 80105bc:	f77f af7c 	ble.w	80104b8 <__ieee754_pow+0x4f8>
 80105c0:	4b41      	ldr	r3, [pc, #260]	; (80106c8 <__ieee754_pow+0x708>)
 80105c2:	440b      	add	r3, r1
 80105c4:	4313      	orrs	r3, r2
 80105c6:	d002      	beq.n	80105ce <__ieee754_pow+0x60e>
 80105c8:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80106a0 <__ieee754_pow+0x6e0>
 80105cc:	e660      	b.n	8010290 <__ieee754_pow+0x2d0>
 80105ce:	ee35 5b46 	vsub.f64	d5, d5, d6
 80105d2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80105d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105da:	f6ff af6d 	blt.w	80104b8 <__ieee754_pow+0x4f8>
 80105de:	e7f3      	b.n	80105c8 <__ieee754_pow+0x608>
 80105e0:	2000      	movs	r0, #0
 80105e2:	e78d      	b.n	8010500 <__ieee754_pow+0x540>
 80105e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105e8:	460b      	mov	r3, r1
 80105ea:	ec43 2b10 	vmov	d0, r2, r3
 80105ee:	e7de      	b.n	80105ae <__ieee754_pow+0x5ee>
 80105f0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80105f4:	e54d      	b.n	8010092 <__ieee754_pow+0xd2>
 80105f6:	e9cd 6700 	strd	r6, r7, [sp]
 80105fa:	e574      	b.n	80100e6 <__ieee754_pow+0x126>
 80105fc:	ed8d 8b00 	vstr	d8, [sp]
 8010600:	e571      	b.n	80100e6 <__ieee754_pow+0x126>
 8010602:	4615      	mov	r5, r2
 8010604:	e557      	b.n	80100b6 <__ieee754_pow+0xf6>
 8010606:	bf00      	nop
 8010608:	00000000 	.word	0x00000000
 801060c:	43400000 	.word	0x43400000
 8010610:	4a454eef 	.word	0x4a454eef
 8010614:	3fca7e28 	.word	0x3fca7e28
 8010618:	93c9db65 	.word	0x93c9db65
 801061c:	3fcd864a 	.word	0x3fcd864a
 8010620:	a91d4101 	.word	0xa91d4101
 8010624:	3fd17460 	.word	0x3fd17460
 8010628:	518f264d 	.word	0x518f264d
 801062c:	3fd55555 	.word	0x3fd55555
 8010630:	db6fabff 	.word	0xdb6fabff
 8010634:	3fdb6db6 	.word	0x3fdb6db6
 8010638:	33333303 	.word	0x33333303
 801063c:	3fe33333 	.word	0x3fe33333
 8010640:	dc3a03fd 	.word	0xdc3a03fd
 8010644:	3feec709 	.word	0x3feec709
 8010648:	145b01f5 	.word	0x145b01f5
 801064c:	be3e2fe0 	.word	0xbe3e2fe0
 8010650:	e0000000 	.word	0xe0000000
 8010654:	3feec709 	.word	0x3feec709
 8010658:	652b82fe 	.word	0x652b82fe
 801065c:	3c971547 	.word	0x3c971547
 8010660:	fefa39ef 	.word	0xfefa39ef
 8010664:	3fe62e42 	.word	0x3fe62e42
 8010668:	0ca86c39 	.word	0x0ca86c39
 801066c:	be205c61 	.word	0xbe205c61
 8010670:	00000000 	.word	0x00000000
 8010674:	3fe62e43 	.word	0x3fe62e43
 8010678:	72bea4d0 	.word	0x72bea4d0
 801067c:	3e663769 	.word	0x3e663769
 8010680:	c5d26bf1 	.word	0xc5d26bf1
 8010684:	bebbbd41 	.word	0xbebbbd41
 8010688:	af25de2c 	.word	0xaf25de2c
 801068c:	3f11566a 	.word	0x3f11566a
 8010690:	16bebd93 	.word	0x16bebd93
 8010694:	bf66c16c 	.word	0xbf66c16c
 8010698:	5555553e 	.word	0x5555553e
 801069c:	3fc55555 	.word	0x3fc55555
 80106a0:	c2f8f359 	.word	0xc2f8f359
 80106a4:	01a56e1f 	.word	0x01a56e1f
 80106a8:	0003988e 	.word	0x0003988e
 80106ac:	000bb679 	.word	0x000bb679
 80106b0:	080110f0 	.word	0x080110f0
 80106b4:	08011110 	.word	0x08011110
 80106b8:	08011100 	.word	0x08011100
 80106bc:	3fe00000 	.word	0x3fe00000
 80106c0:	000fffff 	.word	0x000fffff
 80106c4:	4090cbff 	.word	0x4090cbff
 80106c8:	3f6f3400 	.word	0x3f6f3400

080106cc <__ieee754_sqrt>:
 80106cc:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80106d0:	4770      	bx	lr

080106d2 <fabs>:
 80106d2:	ec51 0b10 	vmov	r0, r1, d0
 80106d6:	ee10 2a10 	vmov	r2, s0
 80106da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80106de:	ec43 2b10 	vmov	d0, r2, r3
 80106e2:	4770      	bx	lr

080106e4 <finite>:
 80106e4:	ee10 3a90 	vmov	r3, s1
 80106e8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80106ec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80106f0:	0fc0      	lsrs	r0, r0, #31
 80106f2:	4770      	bx	lr

080106f4 <matherr>:
 80106f4:	2000      	movs	r0, #0
 80106f6:	4770      	bx	lr

080106f8 <nan>:
 80106f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010700 <nan+0x8>
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	00000000 	.word	0x00000000
 8010704:	7ff80000 	.word	0x7ff80000

08010708 <rint>:
 8010708:	b530      	push	{r4, r5, lr}
 801070a:	b085      	sub	sp, #20
 801070c:	ed8d 0b00 	vstr	d0, [sp]
 8010710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010714:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8010718:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 801071c:	2813      	cmp	r0, #19
 801071e:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8010722:	dc5a      	bgt.n	80107da <rint+0xd2>
 8010724:	2800      	cmp	r0, #0
 8010726:	da2f      	bge.n	8010788 <rint+0x80>
 8010728:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801072c:	4311      	orrs	r1, r2
 801072e:	d027      	beq.n	8010780 <rint+0x78>
 8010730:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8010734:	4315      	orrs	r5, r2
 8010736:	426a      	negs	r2, r5
 8010738:	432a      	orrs	r2, r5
 801073a:	0b12      	lsrs	r2, r2, #12
 801073c:	0c5b      	lsrs	r3, r3, #17
 801073e:	045b      	lsls	r3, r3, #17
 8010740:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8010744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010748:	ea42 0103 	orr.w	r1, r2, r3
 801074c:	4b31      	ldr	r3, [pc, #196]	; (8010814 <rint+0x10c>)
 801074e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010752:	ed93 6b00 	vldr	d6, [r3]
 8010756:	ec41 0b17 	vmov	d7, r0, r1
 801075a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801075e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010762:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010766:	ee37 7b46 	vsub.f64	d7, d7, d6
 801076a:	ed8d 7b00 	vstr	d7, [sp]
 801076e:	9b01      	ldr	r3, [sp, #4]
 8010770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010774:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010778:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 801077c:	e9cd 0100 	strd	r0, r1, [sp]
 8010780:	ed9d 0b00 	vldr	d0, [sp]
 8010784:	b005      	add	sp, #20
 8010786:	bd30      	pop	{r4, r5, pc}
 8010788:	4923      	ldr	r1, [pc, #140]	; (8010818 <rint+0x110>)
 801078a:	4101      	asrs	r1, r0
 801078c:	ea03 0501 	and.w	r5, r3, r1
 8010790:	4315      	orrs	r5, r2
 8010792:	d0f5      	beq.n	8010780 <rint+0x78>
 8010794:	0849      	lsrs	r1, r1, #1
 8010796:	ea03 0501 	and.w	r5, r3, r1
 801079a:	432a      	orrs	r2, r5
 801079c:	d00b      	beq.n	80107b6 <rint+0xae>
 801079e:	ea23 0101 	bic.w	r1, r3, r1
 80107a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80107a6:	2813      	cmp	r0, #19
 80107a8:	fa43 f300 	asr.w	r3, r3, r0
 80107ac:	bf0c      	ite	eq
 80107ae:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80107b2:	2200      	movne	r2, #0
 80107b4:	430b      	orrs	r3, r1
 80107b6:	4619      	mov	r1, r3
 80107b8:	4b16      	ldr	r3, [pc, #88]	; (8010814 <rint+0x10c>)
 80107ba:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80107be:	ed94 6b00 	vldr	d6, [r4]
 80107c2:	4610      	mov	r0, r2
 80107c4:	ec41 0b17 	vmov	d7, r0, r1
 80107c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80107cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80107d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80107d8:	e008      	b.n	80107ec <rint+0xe4>
 80107da:	2833      	cmp	r0, #51	; 0x33
 80107dc:	dd09      	ble.n	80107f2 <rint+0xea>
 80107de:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80107e2:	d1cd      	bne.n	8010780 <rint+0x78>
 80107e4:	ed9d 7b00 	vldr	d7, [sp]
 80107e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80107ec:	ed8d 7b00 	vstr	d7, [sp]
 80107f0:	e7c6      	b.n	8010780 <rint+0x78>
 80107f2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 80107f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80107fa:	40c1      	lsrs	r1, r0
 80107fc:	420a      	tst	r2, r1
 80107fe:	d0bf      	beq.n	8010780 <rint+0x78>
 8010800:	0849      	lsrs	r1, r1, #1
 8010802:	420a      	tst	r2, r1
 8010804:	bf1f      	itttt	ne
 8010806:	ea22 0101 	bicne.w	r1, r2, r1
 801080a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 801080e:	4102      	asrne	r2, r0
 8010810:	430a      	orrne	r2, r1
 8010812:	e7d0      	b.n	80107b6 <rint+0xae>
 8010814:	08011120 	.word	0x08011120
 8010818:	000fffff 	.word	0x000fffff
 801081c:	00000000 	.word	0x00000000

08010820 <scalbn>:
 8010820:	b500      	push	{lr}
 8010822:	ed2d 8b02 	vpush	{d8}
 8010826:	b083      	sub	sp, #12
 8010828:	ed8d 0b00 	vstr	d0, [sp]
 801082c:	9b01      	ldr	r3, [sp, #4]
 801082e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010832:	b9a2      	cbnz	r2, 801085e <scalbn+0x3e>
 8010834:	9a00      	ldr	r2, [sp, #0]
 8010836:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801083a:	4313      	orrs	r3, r2
 801083c:	d03a      	beq.n	80108b4 <scalbn+0x94>
 801083e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80108f8 <scalbn+0xd8>
 8010842:	4b35      	ldr	r3, [pc, #212]	; (8010918 <scalbn+0xf8>)
 8010844:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010848:	4298      	cmp	r0, r3
 801084a:	ed8d 7b00 	vstr	d7, [sp]
 801084e:	da11      	bge.n	8010874 <scalbn+0x54>
 8010850:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 8010900 <scalbn+0xe0>
 8010854:	ed9d 6b00 	vldr	d6, [sp]
 8010858:	ee27 7b06 	vmul.f64	d7, d7, d6
 801085c:	e007      	b.n	801086e <scalbn+0x4e>
 801085e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010862:	428a      	cmp	r2, r1
 8010864:	d10a      	bne.n	801087c <scalbn+0x5c>
 8010866:	ed9d 7b00 	vldr	d7, [sp]
 801086a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801086e:	ed8d 7b00 	vstr	d7, [sp]
 8010872:	e01f      	b.n	80108b4 <scalbn+0x94>
 8010874:	9b01      	ldr	r3, [sp, #4]
 8010876:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801087a:	3a36      	subs	r2, #54	; 0x36
 801087c:	4402      	add	r2, r0
 801087e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010882:	428a      	cmp	r2, r1
 8010884:	dd0a      	ble.n	801089c <scalbn+0x7c>
 8010886:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8010908 <scalbn+0xe8>
 801088a:	eeb0 0b48 	vmov.f64	d0, d8
 801088e:	ed9d 1b00 	vldr	d1, [sp]
 8010892:	f000 f843 	bl	801091c <copysign>
 8010896:	ee20 7b08 	vmul.f64	d7, d0, d8
 801089a:	e7e8      	b.n	801086e <scalbn+0x4e>
 801089c:	2a00      	cmp	r2, #0
 801089e:	dd10      	ble.n	80108c2 <scalbn+0xa2>
 80108a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80108a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80108ac:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80108b0:	e9cd 0100 	strd	r0, r1, [sp]
 80108b4:	ed9d 0b00 	vldr	d0, [sp]
 80108b8:	b003      	add	sp, #12
 80108ba:	ecbd 8b02 	vpop	{d8}
 80108be:	f85d fb04 	ldr.w	pc, [sp], #4
 80108c2:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80108c6:	da06      	bge.n	80108d6 <scalbn+0xb6>
 80108c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80108cc:	4298      	cmp	r0, r3
 80108ce:	dcda      	bgt.n	8010886 <scalbn+0x66>
 80108d0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 8010900 <scalbn+0xe0>
 80108d4:	e7d9      	b.n	801088a <scalbn+0x6a>
 80108d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80108da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80108de:	3236      	adds	r2, #54	; 0x36
 80108e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80108e4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80108e8:	ec41 0b17 	vmov	d7, r0, r1
 80108ec:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8010910 <scalbn+0xf0>
 80108f0:	e7b2      	b.n	8010858 <scalbn+0x38>
 80108f2:	bf00      	nop
 80108f4:	f3af 8000 	nop.w
 80108f8:	00000000 	.word	0x00000000
 80108fc:	43500000 	.word	0x43500000
 8010900:	c2f8f359 	.word	0xc2f8f359
 8010904:	01a56e1f 	.word	0x01a56e1f
 8010908:	8800759c 	.word	0x8800759c
 801090c:	7e37e43c 	.word	0x7e37e43c
 8010910:	00000000 	.word	0x00000000
 8010914:	3c900000 	.word	0x3c900000
 8010918:	ffff3cb0 	.word	0xffff3cb0

0801091c <copysign>:
 801091c:	ec51 0b10 	vmov	r0, r1, d0
 8010920:	ee11 0a90 	vmov	r0, s3
 8010924:	ee10 2a10 	vmov	r2, s0
 8010928:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801092c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010930:	ea41 0300 	orr.w	r3, r1, r0
 8010934:	ec43 2b10 	vmov	d0, r2, r3
 8010938:	4770      	bx	lr
	...

0801093c <_init>:
 801093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801093e:	bf00      	nop
 8010940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010942:	bc08      	pop	{r3}
 8010944:	469e      	mov	lr, r3
 8010946:	4770      	bx	lr

08010948 <_fini>:
 8010948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094a:	bf00      	nop
 801094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801094e:	bc08      	pop	{r3}
 8010950:	469e      	mov	lr, r3
 8010952:	4770      	bx	lr
